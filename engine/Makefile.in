#Makefile for the C part of Gforth

#Copyright (C) 1995,1996,1997,1998,2000,2003,2006 Free Software Foundation, Inc.

#This file is part of Gforth.

#Gforth is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.#See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.

# ------------- gforth version

VERSION =@PACKAGE_VERSION@
DOSVERSION=`echo $VERSION|sed 's/\.//g'`
EXE=@EXEEXT@

# ------------- System specific variables

machine=@machine@
kernel_fi = @kernel_fi@
include_fi = @include_fi@
# this is the type of machine
# used to extend the include path with ./arch/$machine
# so we could include a machine specific
# machine.h file

PATHSEP = @PATHSEP@

osclass = @OSCLASS@

EC = @EC@

# ------------- Utility programs

SHELL	= /bin/sh
RM	= rm
RMTREE	= rm -rf
CP	= cp -p
TAR	= tar cf -
GCC	= @CC@
CC	= $(GCC)
LD	= $(GCC:gcc=ld)
STRIP	= strip
GCCLD	= @GCC_LD@

FORTHPATH = .$(PATHSEP)$(libdir)/gforth/site-forth$(PATHSEP)$(datadir)/gforth/site-forth$(PATHSEP)$(libdir)/gforth/$(VERSION)$(PATHSEP)$(datadir)/gforth/$(VERSION)

# ------------	Install Directorys

VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @srcdir@
bindir = $(exec_prefix)/bin
#read-only architecture-independent files
datadir = $(prefix)/share
#read-only architecture-dependent non-ascii files
libdir = $(prefix)/lib
infodir = $(prefix)/info
mandir = $(prefix)/man
man1dir= $(mandir)/man1
man1ext= .1

# ------------- Compiler Flags

XCFLAGS	= @CFLAGS@
XDEFINES = @DEFS@
SWITCHES = $(XCFLAGS) $(XDEFINES)
#use -fno-inline to avoid register problems with asinh, atanh on gcc-3.3 on 386
ENGINE_FLAGS = @ENGINE_FLAGS@ -fno-defer-pop -fcaller-saves -fno-inline
DEBUGFLAG = @DEBUGFLAG@
CFLAGS	= $(DEBUGFLAG) -I$(srcdir)/../arch/$(machine) -I. -Wall $(SWITCHES) -DDEFAULTPATH='"$(FORTHPATH)"'
CFLAGS2	= $(DEBUGFLAG) -I$(srcdir)/../arch/$(machine) -I. -Wall $(SWITCHES) -DDEFAULTPATH='"$(FORTHPATH)"'
FORTHKFLAGS= --die-on-signal -p "..$(PATHSEP)$(srcdir)" -i ../$(kernel_fi)
FORTHK	= ../gforth $(FORTHKFLAGS)
FORTH	= ../gforth --die-on-signal -p "..$(PATHSEP)$(srcdir)" -i ../gforth.fi

#John Wavrik should use -Xlinker -N to get a writable text (executable)
XLDFLAGS = @LDFLAGS@
LDFLAGS =  $(DEBUGFLAG) $(XLDFLAGS)
LDLIBS  = @LIBS@

AOBJECTS = @signals_o@ support.o @LIBOBJS@

OBJECTS = engine.o @engine2@ main.o
OBJECTS_NATIVE = engine-native.o engine-native2.o engine-native3.o main-native.o
OBJECTS_FAST = engine-fast.o @engine_fast2@ main-fast.o
OBJECTS_ITC = engine-itc.o main-itc.o
OBJECTS_DITC = engine-ditc.o main-ditc.o
OBJECTS_PROF = engine-prof.o main-prof.o
OBJECTS_FI =  engine.o main-fi.o

# In engine subdirectory there are (or should be) only files that belong to
# our engine, so we can make life easy
DEPS =  config.h *.h $(srcdir)/../arch/$(machine)/*.[h]
ENGINE_DEPS = engine.c $(DEPS) prim_lab.i prim.i @image_i@
MAIN_DEPS = main.c $(DEPS) prim_superend.i prim_num.i prim_grp.i costs.i super2.i
ENGINE_FAST_DEPS = engine.c $(DEPS) prim_lab-fast.i prim-fast.i
MAIN_FAST_DEPS = main.c $(DEPS) prim_superend-fast.i prim_num-fast.i prim_grp-fast.i costs-fast.i super2-fast.i

#some makes don't do the -o $@ correctly, so we help them
.c.o:
	$(GCC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

support.o: support.c config.h forth.h longlong.h

gforth$(EC)$(EXE):	$(OBJECTS) $(AOBJECTS)
	$(GCCLD) $(LDFLAGS) $(OBJECTS) $(AOBJECTS) $(LDLIBS) -o $@

gforth-native$(EC)$(EXE):	$(OBJECTS_NATIVE) $(AOBJECTS)
	$(GCCLD) $(LDFLAGS) $(OBJECTS_NATIVE) $(AOBJECTS) $(LDLIBS) -o $@

gforth-fast$(EC)$(EXE):	$(OBJECTS_FAST) $(AOBJECTS)
	$(GCCLD) $(LDFLAGS) $(OBJECTS_FAST) $(AOBJECTS) $(LDLIBS) -o $@

gforth-itc$(EC)$(EXE):	$(OBJECTS_ITC) $(AOBJECTS)
	$(GCCLD) $(LDFLAGS) $(OBJECTS_ITC) $(AOBJECTS) $(LDLIBS) -o $@

gforth-ditc$(EC)$(EXE): $(OBJECTS_DITC) $(AOBJECTS)
	$(GCCLD) $(LDFLAGS) $(OBJECTS_DITC) $(AOBJECTS) $(LDLIBS) -o $@

gforth-prof$(EC)$(EXE): $(OBJECTS_PROF) $(AOBJECTS) profile.o
	$(GCCLD) $(LDFLAGS) $(OBJECTS_PROF) $(AOBJECTS) profile.o $(LDLIBS) -o $@

gforth-fi$(EC)$(EXE):	$(OBJECTS_FI) $(AOBJECTS)
	$(GCCLD) $(LDFLAGS) $(OBJECTS_FI) $(AOBJECTS) $(LDLIBS) -o $@

engine.s:	$(ENGINE_FAST_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -S $(srcdir)/engine.c

engine.o:	$(ENGINE_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DGFORTH_DEBUGGING -o $@ -c $(srcdir)/engine.c

engine2.o:	$(ENGINE_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DGFORTH_DEBUGGING -DENGINE=2 -o $@ -c $(srcdir)/engine.c

engine-native.o:$(ENGINE_FAST_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DNO_IP -o $@ -c $(srcdir)/engine.c

engine-native2.o:$(ENGINE_FAST_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DNO_IP -DENGINE=2 -o $@ -c $(srcdir)/engine.c

engine-native3.o:$(ENGINE_FAST_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DNO_IP -DENGINE=3 -o $@ -c $(srcdir)/engine.c

engine-fast.o:	$(ENGINE_FAST_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -o $@ -c $(srcdir)/engine.c

engine-fast2.o:	$(ENGINE_FAST_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DENGINE=2 -o $@ -c $(srcdir)/engine.c

engine-itc.o:	$(ENGINE_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DINDIRECT_THREADED -DGFORTH_DEBUGGING -o $@ -c $(srcdir)/engine.c

engine-ditc.o:	$(ENGINE_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DDOUBLY_INDIRECT -o $@ -c $(srcdir)/engine.c

engine-prof.o:	$(ENGINE_DEPS)
		$(GCC) $(CFLAGS2) $(ENGINE_FLAGS) -DVM_PROFILING -o $@ -c $(srcdir)/engine.c

main.o:		$(MAIN_DEPS) 
		$(GCC) $(CFLAGS) -DGFORTH_DEBUGGING @no_dynamic@ -o $@ -c $(srcdir)/main.c

main-native.o:	$(MAIN_FAST_DEPS) 
		$(GCC) $(CFLAGS) -DNO_IP -o $@ -c $(srcdir)/main.c

main-fast.o:	$(MAIN_FAST_DEPS) 
		$(GCC) $(CFLAGS) -o $@ -c $(srcdir)/main.c

main-itc.o:	$(MAIN_DEPS) 
		$(GCC) $(CFLAGS) -DINDIRECT_THREADED -DGFORTH_DEBUGGING -o $@ -c $(srcdir)/main.c

main-ditc.o:	$(MAIN_DEPS)
		$(GCC) $(CFLAGS) -DDOUBLY_INDIRECT -o $@ -c $(srcdir)/main.c

main-prof.o:	$(MAIN_DEPS)
		$(GCC) $(CFLAGS) -DVM_PROFILING -o $@ -c $(srcdir)/main.c

main-fi.o:	$(MAIN_DEPS)
		$(GCC) $(CFLAGS) -DINCLUDE_IMAGE -o $@ -c $(srcdir)/main.c

peephole.o:	peephole.c peephole.i $(DEPS)
		$(GCC) $(CFLAGS) -o $@ -c $(srcdir)/peephole.c

profile.o:	profile.c profile.i $(DEPS)
		$(GCC) $(CFLAGS) -o $@ -c $(srcdir)/profile.c

#The next two rules seem to be superfluous:

# engine:		$(OBJECTS) $(OBJECTS0) ;

# engine_ditc:	$(OBJECTS_DITC) $(OBJECTS0) ;

#NeXTstep hack

termios.o:	/usr/lib/libposix.a
	ar x /usr/lib/libposix.a termios.o

#duplicated rules to avoid too many recursive make invocations
# !! No any forth stuff should be done in ../Makefile.
# !! I added the dependencies on prim.i and prim_lab.i in the main Makefile, jens

#I commented out the following rules because they are no longer up-to-date. - anton

#prim.i:		../prim.b ../prims2x.fs
#		$(FORTHK) prims2x.fs -e "s\" ../prim.b\" ' output-c process-file bye" >$@-
#		$(CP) $@- $@
#		$(RM) $@-
#
#prim_lab.i:	../prim.b ../prims2x.fs
#		$(FORTHK) prims2x.fs -e "s\" ../prim.b\" ' output-label process-file bye" >$@-
#		$(CP) $@- $@
#		$(RM) $@-

config.h:	stamp-h
stamp-h:	config.h.in ../config.status ../stamp-h.in
		cd .. && CONFIG_FILES=$@ CONFIG_HEADERS=engine/config.h ./config.status
		echo timestamp > stamp-h

image.i:	../fi2c.fs ../$(include_fi)
		$(FORTH) fi2c.fs -e "s\" ../$(include_fi)\" fi2c bye" >$@

../$(include_fi):	FORCE
		cd .. && $(MAKE) $(include_fi)

#phony targets depend on FORCE; this is more portable than .PHONY
FORCE:

