\input texinfo   @c -*-texinfo-*-
@comment The source is gforth.ds, from which gforth.texi is generated
@comment %**start of header (This is for running Texinfo on a region.)
@setfilename gforth.info
@settitle Gforth Manual
@comment @setchapternewpage odd
@comment %**end of header (This is for running Texinfo on a region.)

@ifinfo
This file documents Gforth 0.2

Copyright @copyright{} 1995 Free Software Foundation, Inc.

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission notice
     are preserved on all copies.
     
@ignore
     Permission is granted to process this file through TeX and print the
     results, provided the printed document carries a copying permission
     notice identical to this one except for the removal of this paragraph
     (this paragraph not being relevant to the printed manual).
     
@end ignore
     Permission is granted to copy and distribute modified versions of this
     manual under the conditions for verbatim copying, provided also that the
     sections entitled "Distribution" and "General Public License" are
     included exactly as in the original, and provided that the entire
     resulting derived work is distributed under the terms of a permission
     notice identical to this one.
     
     Permission is granted to copy and distribute translations of this manual
     into another language, under the above conditions for modified versions,
     except that the sections entitled "Distribution" and "General Public
     License" may be included in a translation approved by the author instead
     of in the original English.
@end ifinfo

@finalout
@titlepage
@sp 10
@center @titlefont{Gforth Manual}
@sp 2
@center for version 0.2
@sp 2
@center Anton Ertl
@center Bernd Paysan
@sp 3
@center This manual is under construction

@comment  The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995 Free Software Foundation, Inc.

@comment !! Published by ... or You can get a copy of this manual ...

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission notice
     are preserved on all copies.
     
     Permission is granted to copy and distribute modified versions of this
     manual under the conditions for verbatim copying, provided also that the
     sections entitled "Distribution" and "General Public License" are
     included exactly as in the original, and provided that the entire
     resulting derived work is distributed under the terms of a permission
     notice identical to this one.
     
     Permission is granted to copy and distribute translations of this manual
     into another language, under the above conditions for modified versions,
     except that the sections entitled "Distribution" and "General Public
     License" may be included in a translation approved by the author instead
     of in the original English.
@end titlepage


@node Top, License, (dir), (dir)
@ifinfo
Gforth is a free implementation of ANS Forth available on many
personal machines. This manual corresponds to version 0.2.
@end ifinfo

@menu
* License::                     
* Goals::                       About the Gforth Project
* Other Books::                 Things you might want to read
* Invocation::                  Starting Gforth
* Words::                       Forth words available in Gforth
* ANS conformance::             Implementation-defined options etc.
* Model::                       The abstract machine of Gforth
* Emacs and Gforth::            The Gforth Mode
* Internals::                   Implementation details
* Bugs::                        How to report them
* Origin::                      Authors and ancestors of Gforth
* Word Index::                  An item for each Forth word
* Node Index::                  An item for each node
@end menu

@node License, Goals, Top, Top
@unnumbered GNU GENERAL PUBLIC LICENSE
@center Version 2, June 1991

@display
Copyright @copyright{} 1989, 1991 Free Software Foundation, Inc.
675 Mass Ave, Cambridge, MA 02139, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@unnumberedsec Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software---to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

@iftex
@unnumberedsec TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end iftex
@ifinfo
@center TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end ifinfo

@enumerate 0
@item
This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The ``Program'', below,
refers to any such program or work, and a ``work based on the Program''
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term ``modification''.)  Each licensee is addressed as ``you''.

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

@item
You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

@item
You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

@enumerate a
@item
You must cause the modified files to carry prominent notices
stating that you changed the files and the date of any change.

@item
You must cause any work that you distribute or publish, that in
whole or in part contains or is derived from the Program or any
part thereof, to be licensed as a whole at no charge to all third
parties under the terms of this License.

@item
If the modified program normally reads commands interactively
when run, you must cause it, when started running for such
interactive use in the most ordinary way, to print or display an
announcement including an appropriate copyright notice and a
notice that there is no warranty (or else, saying that you provide
a warranty) and that users may redistribute the program under
these conditions, and telling the user how to view a copy of this
License.  (Exception: if the Program itself is interactive but
does not normally print such an announcement, your work based on
the Program is not required to print an announcement.)
@end enumerate

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

@item
You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

@enumerate a
@item
Accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms of Sections
1 and 2 above on a medium customarily used for software interchange; or,

@item
Accompany it with a written offer, valid for at least three
years, to give any third party, for a charge no more than your
cost of physically performing source distribution, a complete
machine-readable copy of the corresponding source code, to be
distributed under the terms of Sections 1 and 2 above on a medium
customarily used for software interchange; or,

@item
Accompany it with the information you received as to the offer
to distribute corresponding source code.  (This alternative is
allowed only for noncommercial distribution and only if you
received the program in object code or executable form with such
an offer, in accord with Subsection b above.)
@end enumerate

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

@item
You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

@item
Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

@item
If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

@item
If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

@item
The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and ``any
later version'', you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

@item
If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

@iftex
@heading NO WARRANTY
@end iftex
@ifinfo
@center NO WARRANTY
@end ifinfo

@item
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

@item
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
@end enumerate

@iftex
@heading END OF TERMS AND CONDITIONS
@end iftex
@ifinfo
@center END OF TERMS AND CONDITIONS
@end ifinfo

@page
@unnumberedsec How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and a brief idea of what it does.}
Copyright (C) 19@var{yy}  @var{name of author}

This program is free software; you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by 
the Free Software Foundation; either version 2 of the License, or 
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

@smallexample
Gnomovision version 69, Copyright (C) 19@var{yy} @var{name of author}
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
type `show w'.  
This is free software, and you are welcome to redistribute it 
under certain conditions; type `show c' for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than @samp{show w} and
@samp{show c}; they could even be mouse-clicks or menu items---whatever
suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a ``copyright disclaimer'' for the program, if
necessary.  Here is a sample; alter the names:

@smallexample
Yoyodyne, Inc., hereby disclaims all copyright interest in the program
`Gnomovision' (which makes passes at compilers) written by James Hacker.

@var{signature of Ty Coon}, 1 April 1989
Ty Coon, President of Vice
@end smallexample

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.

@iftex
@node    Preface
@comment node-name,     next,           previous, up
@unnumbered Preface
@cindex Preface
This manual documents Gforth. The reader is expected to know
Forth. This manual is primarily a reference manual. @xref{Other Books}
for introductory material.
@end iftex

@node    Goals, Other Books, License, Top
@comment node-name,     next,           previous, up
@chapter Goals of Gforth
@cindex Goals
The goal of the Gforth Project is to develop a standard model for
ANSI Forth. This can be split into several subgoals:

@itemize @bullet
@item
Gforth should conform to the ANSI Forth standard.
@item
It should be a model, i.e. it should define all the
implementation-dependent things.
@item
It should become standard, i.e. widely accepted and used. This goal
is the most difficult one.
@end itemize

To achieve these goals Gforth should be
@itemize @bullet
@item
Similar to previous models (fig-Forth, F83)
@item
Powerful. It should provide for all the things that are considered
necessary today and even some that are not yet considered necessary.
@item
Efficient. It should not get the reputation of being exceptionally
slow.
@item
Free.
@item
Available on many machines/easy to port.
@end itemize

Have we achieved these goals? Gforth conforms to the ANS Forth
standard. It may be considered a model, but we have not yet documented
which parts of the model are stable and which parts we are likely to
change. It certainly has not yet become a de facto standard. It has some
similarities and some differences to previous models. It has some
powerful features, but not yet everything that we envisioned. We
certainly have achieved our execution speed goals (@pxref{Performance}).
It is free and available on many machines.

@node Other Books, Invocation, Goals, Top
@chapter Other books on ANS Forth

As the standard is relatively new, there are not many books out yet. It
is not recommended to learn Forth by using Gforth and a book that is
not written for ANS Forth, as you will not know your mistakes from the
deviations of the book.

There is, of course, the standard, the definite reference if you want to
write ANS Forth programs. It is available in printed form from the
National Standards Institute Sales Department (Tel.: USA (212) 642-4900;
Fax.: USA (212) 302-1286) as document @cite{X3.215-1994} for about $200. You
can also get it from Global Engineering Documents (Tel.: USA (800)
854-7179; Fax.: (303) 843-9880) for about $300.

@cite{dpANS6}, the last draft of the standard, which was then submitted to ANSI
for publication is available electronically and for free in some MS Word
format, and it has been converted to HTML. Some pointers to these
versions can be found through
@*@file{http://www.complang.tuwien.ac.at/projects/forth.html}.

@cite{Forth: The new model} by Jack Woehr (Prentice-Hall, 1993) is an
introductory book based on a draft version of the standard. It does not
cover the whole standard. It also contains interesting background
information (Jack Woehr was in the ANS Forth Technical Committe). It is
not appropriate for complete newbies, but programmers experienced in
other languages should find it ok.

@node Invocation, Words, Other Books, Top
@chapter Invocation

You will usually just say @code{gforth}. In many other cases the default
Gforth image will be invoked like this:

@example
gforth [files] [-e forth-code]
@end example

executing the contents of the files and the Forth code in the order they
are given.

In general, the command line looks like this:

@example
gforth [initialization options] [image-specific options]
@end example

The initialization options must come before the rest of the command
line. They are:

@table @code
@item --image-file @var{file}
@item -i @var{file}
Loads the Forth image @var{file} instead of the default
@file{gforth.fi}.

@item --path @var{path}
@item -p @var{path}
Uses @var{path} for searching the image file and Forth source code
files instead of the default in the environment variable
@code{GFORTHPATH} or the path specified at installation time (typically
@file{/usr/local/lib/gforth:.}). A path is given as a @code{:}-separated
list.

@item --dictionary-size @var{size}
@item -m @var{size}
Allocate @var{size} space for the Forth dictionary space instead of
using the default specified in the image (typically 256K). The
@var{size} specification consists of an integer and a unit (e.g.,
@code{4M}). The unit can be one of @code{b} (bytes), @code{e} (element
size, in this case Cells), @code{k} (kilobytes), and @code{M}
(Megabytes). If no unit is specified, @code{e} is used.

@item --data-stack-size @var{size}
@item -d @var{size}
Allocate @var{size} space for the data stack instead of using the
default specified in the image (typically 16K).

@item --return-stack-size @var{size}
@item -r @var{size}
Allocate @var{size} space for the return stack instead of using the
default specified in the image (typically 16K).

@item --fp-stack-size @var{size}
@item -f @var{size}
Allocate @var{size} space for the floating point stack instead of
using the default specified in the image (typically 16K). In this case
the unit specifier @code{e} refers to floating point numbers.

@item --locals-stack-size @var{size}
@item -l @var{size}
Allocate @var{size} space for the locals stack instead of using the
default specified in the image (typically 16K).

@end table

As explained above, the image-specific command-line arguments for the
default image @file{gforth.fi} consist of a sequence of filenames and
@code{-e @var{forth-code}} options that are interpreted in the seqence
in which they are given. The @code{-e @var{forth-code}} or
@code{--evaluate @var{forth-code}} option evaluates the forth
code. This option takes only one argument; if you want to evaluate more
Forth words, you have to quote them or use several @code{-e}s. To exit
after processing the command line (instead of entering interactive mode)
append @code{-e bye} to the command line.

If you have several versions of Gforth installed, @code{gforth} will
invoke the version that was installed last. @code{gforth-@var{version}}
invokes a specific version. You may want to use the option
@code{--path}, if your environment contains the variable
@code{GFORTHPATH}.

Not yet implemented:
On startup the system first executes the system initialization file
(unless the option @code{--no-init-file} is given; note that the system
resulting from using this option may not be ANS Forth conformant). Then
the user initialization file @file{.gforth.fs} is executed, unless the
option @code{--no-rc} is given; this file is first searched in @file{.},
then in @file{~}, then in the normal path (see above).

@node Words, ANS conformance, Invocation, Top
@chapter Forth Words

@menu
* Notation::                    
* Arithmetic::                  
* Stack Manipulation::          
* Memory access::               
* Control Structures::          
* Locals::                      
* Defining Words::              
* Wordlists::                   
* Files::                       
* Blocks::                      
* Other I/O::                   
* Programming Tools::           
* Assembler and Code words::    
* Threading Words::             
@end menu

@node Notation, Arithmetic, Words, Words
@section Notation

The Forth words are described in this section in the glossary notation
that has become a de-facto standard for Forth texts, i.e.

@format
@var{word}     @var{Stack effect}   @var{wordset}   @var{pronunciation}
@end format
@var{Description}

@table @var
@item word
The name of the word. BTW, Gforth is case insensitive, so you can
type the words in in lower case (However, @pxref{core-idef}).

@item Stack effect
The stack effect is written in the notation @code{@var{before} --
@var{after}}, where @var{before} and @var{after} describe the top of
stack entries before and after the execution of the word. The rest of
the stack is not touched by the word. The top of stack is rightmost,
i.e., a stack sequence is written as it is typed in. Note that Gforth
uses a separate floating point stack, but a unified stack
notation. Also, return stack effects are not shown in @var{stack
effect}, but in @var{Description}. The name of a stack item describes
the type and/or the function of the item. See below for a discussion of
the types.

All words have two stack effects: A compile-time stack effect and a
run-time stack effect. The compile-time stack-effect of most words is
@var{ -- }. If the compile-time stack-effect of a word deviates from
this standard behaviour, or the word does other unusual things at
compile time, both stack effects are shown; otherwise only the run-time
stack effect is shown.

@item pronunciation
How the word is pronounced

@item wordset
The ANS Forth standard is divided into several wordsets. A standard
system need not support all of them. So, the fewer wordsets your program
uses the more portable it will be in theory. However, we suspect that
most ANS Forth systems on personal machines will feature all
wordsets. Words that are not defined in the ANS standard have
@code{gforth} or @code{gforth-internal} as wordset. @code{gforth}
describes words that will work in future releases of Gforth;
@code{gforth-internal} words are more volatile. Environmental query
strings are also displayed like words; you can recognize them by the
@code{environment} in the wordset field.

@item Description
A description of the behaviour of the word.
@end table

The type of a stack item is specified by the character(s) the name
starts with:

@table @code
@item f
Bool, i.e. @code{false} or @code{true}.
@item c
Char
@item w
Cell, can contain an integer or an address
@item n
signed integer
@item u
unsigned integer
@item d
double sized signed integer
@item ud
double sized unsigned integer
@item r
Float
@item a_
Cell-aligned address
@item c_
Char-aligned address (note that a Char is two bytes in Windows NT)
@item f_
Float-aligned address
@item df_
Address aligned for IEEE double precision float
@item sf_
Address aligned for IEEE single precision float
@item xt
Execution token, same size as Cell
@item wid
Wordlist ID, same size as Cell
@item f83name
Pointer to a name structure
@end table

@node Arithmetic, Stack Manipulation, Notation, Words
@section Arithmetic
Forth arithmetic is not checked, i.e., you will not hear about integer
overflow on addition or multiplication, you may hear about division by
zero if you are lucky. The operator is written after the operands, but
the operands are still in the original order. I.e., the infix @code{2-1}
corresponds to @code{2 1 -}. Forth offers a variety of division
operators. If you perform division with potentially negative operands,
you do not want to use @code{/} or @code{/mod} with its undefined
behaviour, but rather @code{fm/mod} or @code{sm/mod} (probably the
former, @pxref{Mixed precision}).

@menu
* Single precision::            
* Bitwise operations::          
* Mixed precision::             operations with single and double-cell integers
* Double precision::            Double-cell integer arithmetic
* Floating Point::              
@end menu

@node Single precision, Bitwise operations, Arithmetic, Arithmetic
@subsection Single precision
doc-+
doc--
doc-*
doc-/
doc-mod
doc-/mod
doc-negate
doc-abs
doc-min
doc-max

@node Bitwise operations, Mixed precision, Single precision, Arithmetic
@subsection Bitwise operations
doc-and
doc-or
doc-xor
doc-invert
doc-2*
doc-2/

@node Mixed precision, Double precision, Bitwise operations, Arithmetic
@subsection Mixed precision
doc-m+
doc-*/
doc-*/mod
doc-m*
doc-um*
doc-m*/
doc-um/mod
doc-fm/mod
doc-sm/rem

@node Double precision, Floating Point, Mixed precision, Arithmetic
@subsection Double precision

The outer (aka text) interpreter converts numbers containing a dot into
a double precision number. Note that only numbers with the dot as last
character are standard-conforming.

doc-d+
doc-d-
doc-dnegate
doc-dabs
doc-dmin
doc-dmax

@node Floating Point,  , Double precision, Arithmetic
@subsection Floating Point

The format of floating point numbers recognized by the outer (aka text)
interpreter is: a signed decimal number, possibly containing a decimal
point (@code{.}), followed by @code{E} or @code{e}, optionally followed
by a signed integer (the exponent). E.g., @code{1e} ist the same as
@code{+1.0e+1}. Note that a number without @code{e}
is not interpreted as floating-point number, but as double (if the
number contains a @code{.}) or single precision integer. Also,
conversions between string and floating point numbers always use base
10, irrespective of the value of @code{BASE}. If @code{BASE} contains a
value greater then 14, the @code{E} may be interpreted as digit and the
number will be interpreted as integer, unless it has a signed exponent
(both @code{+} and @code{-} are allowed as signs).

Angles in floating point operations are given in radians (a full circle
has 2 pi radians). Note, that Gforth has a separate floating point
stack, but we use the unified notation.

Floating point numbers have a number of unpleasant surprises for the
unwary (e.g., floating point addition is not associative) and even a few
for the wary. You should not use them unless you know what you are doing
or you don't care that the results you get are totally bogus. If you
want to learn about the problems of floating point numbers (and how to
avoid them), you might start with @cite{David Goldberg, What Every
Computer Scientist Should Know About Floating-Point Arithmetic, ACM
Computing Surveys 23(1):5@minus{}48, March 1991}.

doc-f+
doc-f-
doc-f*
doc-f/
doc-fnegate
doc-fabs
doc-fmax
doc-fmin
doc-floor
doc-fround
doc-f**
doc-fsqrt
doc-fexp
doc-fexpm1
doc-fln
doc-flnp1
doc-flog
doc-falog
doc-fsin
doc-fcos
doc-fsincos
doc-ftan
doc-fasin
doc-facos
doc-fatan
doc-fatan2
doc-fsinh
doc-fcosh
doc-ftanh
doc-fasinh
doc-facosh
doc-fatanh

@node Stack Manipulation, Memory access, Arithmetic, Words
@section Stack Manipulation

Gforth has a data stack (aka parameter stack) for characters, cells,
addresses, and double cells, a floating point stack for floating point
numbers, a return stack for storing the return addresses of colon
definitions and other data, and a locals stack for storing local
variables. Note that while every sane Forth has a separate floating
point stack, this is not strictly required; an ANS Forth system could
theoretically keep floating point numbers on the data stack. As an
additional difficulty, you don't know how many cells a floating point
number takes. It is reportedly possible to write words in a way that
they work also for a unified stack model, but we do not recommend trying
it. Instead, just say that your program has an environmental dependency
on a separate FP stack.

Also, a Forth system is allowed to keep the local variables on the
return stack. This is reasonable, as local variables usually eliminate
the need to use the return stack explicitly. So, if you want to produce
a standard complying program and if you are using local variables in a
word, forget about return stack manipulations in that word (see the
standard document for the exact rules).

@menu
* Data stack::                  
* Floating point stack::        
* Return stack::                
* Locals stack::                
* Stack pointer manipulation::  
@end menu

@node Data stack, Floating point stack, Stack Manipulation, Stack Manipulation
@subsection Data stack
doc-drop
doc-nip
doc-dup
doc-over
doc-tuck
doc-swap
doc-rot
doc--rot
doc-?dup
doc-pick
doc-roll
doc-2drop
doc-2nip
doc-2dup
doc-2over
doc-2tuck
doc-2swap
doc-2rot

@node Floating point stack, Return stack, Data stack, Stack Manipulation
@subsection Floating point stack
doc-fdrop
doc-fnip
doc-fdup
doc-fover
doc-ftuck
doc-fswap
doc-frot

@node Return stack, Locals stack, Floating point stack, Stack Manipulation
@subsection Return stack
doc->r
doc-r>
doc-r@
doc-rdrop
doc-2>r
doc-2r>
doc-2r@
doc-2rdrop

@node Locals stack, Stack pointer manipulation, Return stack, Stack Manipulation
@subsection Locals stack

@node Stack pointer manipulation,  , Locals stack, Stack Manipulation
@subsection Stack pointer manipulation
doc-sp@
doc-sp!
doc-fp@
doc-fp!
doc-rp@
doc-rp!
doc-lp@
doc-lp!

@node Memory access, Control Structures, Stack Manipulation, Words
@section Memory access

@menu
* Stack-Memory transfers::      
* Address arithmetic::          
* Memory block access::         
@end menu

@node Stack-Memory transfers, Address arithmetic, Memory access, Memory access
@subsection Stack-Memory transfers

doc-@
doc-!
doc-+!
doc-c@
doc-c!
doc-2@
doc-2!
doc-f@
doc-f!
doc-sf@
doc-sf!
doc-df@
doc-df!

@node Address arithmetic, Memory block access, Stack-Memory transfers, Memory access
@subsection Address arithmetic

ANS Forth does not specify the sizes of the data types. Instead, it
offers a number of words for computing sizes and doing address
arithmetic. Basically, address arithmetic is performed in terms of
address units (aus); on most systems the address unit is one byte. Note
that a character may have more than one au, so @code{chars} is no noop
(on systems where it is a noop, it compiles to nothing).

ANS Forth also defines words for aligning addresses for specific
addresses. Many computers require that accesses to specific data types
must only occur at specific addresses; e.g., that cells may only be
accessed at addresses divisible by 4. Even if a machine allows unaligned
accesses, it can usually perform aligned accesses faster. 

For the performance-conscious: alignment operations are usually only
necessary during the definition of a data structure, not during the
(more frequent) accesses to it.

ANS Forth defines no words for character-aligning addresses. This is not
an oversight, but reflects the fact that addresses that are not
char-aligned have no use in the standard and therefore will not be
created.

The standard guarantees that addresses returned by @code{CREATE}d words
are cell-aligned; in addition, Gforth guarantees that these addresses
are aligned for all purposes.

Note that the standard defines a word @code{char}, which has nothing to
do with address arithmetic.

doc-chars
doc-char+
doc-cells
doc-cell+
doc-align
doc-aligned
doc-floats
doc-float+
doc-falign
doc-faligned
doc-sfloats
doc-sfloat+
doc-sfalign
doc-sfaligned
doc-dfloats
doc-dfloat+
doc-dfalign
doc-dfaligned
doc-maxalign
doc-maxaligned
doc-cfalign
doc-cfaligned
doc-address-unit-bits

@node Memory block access,  , Address arithmetic, Memory access
@subsection Memory block access

doc-move
doc-erase

While the previous words work on address units, the rest works on
characters.

doc-cmove
doc-cmove>
doc-fill
doc-blank

@node Control Structures, Locals, Memory access, Words
@section Control Structures

Control structures in Forth cannot be used in interpret state, only in
compile state, i.e., in a colon definition. We do not like this
limitation, but have not seen a satisfying way around it yet, although
many schemes have been proposed.

@menu
* Selection::                   
* Simple Loops::                
* Counted Loops::               
* Arbitrary control structures::  
* Calls and returns::           
* Exception Handling::          
@end menu

@node Selection, Simple Loops, Control Structures, Control Structures
@subsection Selection

@example
@var{flag}
IF
  @var{code}
ENDIF
@end example
or
@example
@var{flag}
IF
  @var{code1}
ELSE
  @var{code2}
ENDIF
@end example

You can use @code{THEN} instead of @code{ENDIF}. Indeed, @code{THEN} is
standard, and @code{ENDIF} is not, although it is quite popular. We
recommend using @code{ENDIF}, because it is less confusing for people
who also know other languages (and is not prone to reinforcing negative
prejudices against Forth in these people). Adding @code{ENDIF} to a
system that only supplies @code{THEN} is simple:
@example
: endif   POSTPONE then ; immediate
@end example

[According to @cite{Webster's New Encyclopedic Dictionary}, @dfn{then
(adv.)}  has the following meanings:
@quotation
... 2b: following next after in order ... 3d: as a necessary consequence
(if you were there, then you saw them).
@end quotation
Forth's @code{THEN} has the meaning 2b, whereas @code{THEN} in Pascal
and many other programming languages has the meaning 3d.]

We also provide the words @code{?dup-if} and @code{?dup-0=-if}, so you
can avoid using @code{?dup}.

@example
@var{n}
CASE
  @var{n1} OF @var{code1} ENDOF
  @var{n2} OF @var{code2} ENDOF
  @dots{}
ENDCASE
@end example

Executes the first @var{codei}, where the @var{ni} is equal to
@var{n}. A default case can be added by simply writing the code after
the last @code{ENDOF}. It may use @var{n}, which is on top of the stack,
but must not consume it.

@node Simple Loops, Counted Loops, Selection, Control Structures
@subsection Simple Loops

@example
BEGIN
  @var{code1}
  @var{flag}
WHILE
  @var{code2}
REPEAT
@end example

@var{code1} is executed and @var{flag} is computed. If it is true,
@var{code2} is executed and the loop is restarted; If @var{flag} is false, execution continues after the @code{REPEAT}.

@example
BEGIN
  @var{code}
  @var{flag}
UNTIL
@end example

@var{code} is executed. The loop is restarted if @code{flag} is false.

@example
BEGIN
  @var{code}
AGAIN
@end example

This is an endless loop.

@node Counted Loops, Arbitrary control structures, Simple Loops, Control Structures
@subsection Counted Loops

The basic counted loop is:
@example
@var{limit} @var{start}
?DO
  @var{body}
LOOP
@end example

This performs one iteration for every integer, starting from @var{start}
and up to, but excluding @var{limit}. The counter, aka index, can be
accessed with @code{i}. E.g., the loop
@example
10 0 ?DO
  i .
LOOP
@end example
prints
@example
0 1 2 3 4 5 6 7 8 9
@end example
The index of the innermost loop can be accessed with @code{i}, the index
of the next loop with @code{j}, and the index of the third loop with
@code{k}.

The loop control data are kept on the return stack, so there are some
restrictions on mixing return stack accesses and counted loop
words. E.g., if you put values on the return stack outside the loop, you
cannot read them inside the loop. If you put values on the return stack
within a loop, you have to remove them before the end of the loop and
before accessing the index of the loop.

There are several variations on the counted loop:

@code{LEAVE} leaves the innermost counted loop immediately.

If @var{start} is greater than @var{limit}, a @code{?DO} loop is entered
(and @code{LOOP} iterates until they become equal by wrap-around
arithmetic). This behaviour is usually not what you want. Therefore,
Gforth offers @code{+DO} and @code{U+DO} (as replacements for
@code{?DO}), which do not enter the loop if @var{start} is greater than
@var{limit}; @code{+DO} is for signed loop parameters, @code{U+DO} for
unsigned loop parameters.

@code{LOOP} can be replaced with @code{@var{n} +LOOP}; this updates the
index by @var{n} instead of by 1. The loop is terminated when the border
between @var{limit-1} and @var{limit} is crossed. E.g.:

@code{4 0 +DO  i .  2 +LOOP}   prints @code{0 2}

@code{4 1 +DO  i .  2 +LOOP}   prints @code{1 3}

The behaviour of @code{@var{n} +LOOP} is peculiar when @var{n} is negative:

@code{-1 0 ?DO  i .  -1 +LOOP}  prints @code{0 -1}

@code{ 0 0 ?DO  i .  -1 +LOOP}  prints nothing

Therefore we recommend avoiding @code{@var{n} +LOOP} with negative
@var{n}. One alternative is @code{@var{u} -LOOP}, which reduces the
index by @var{u} each iteration. The loop is terminated when the border
between @var{limit+1} and @var{limit} is crossed. Gforth also provides
@code{-DO} and @code{U-DO} for down-counting loops. E.g.:

@code{-2 0 -DO  i .  1 -LOOP}  prints @code{0 -1}

@code{-1 0 -DO  i .  1 -LOOP}  prints @code{0}

@code{ 0 0 -DO  i .  1 -LOOP}  prints nothing

Unfortunately, @code{+DO}, @code{U+DO}, @code{-DO}, @code{U-DO} and
@code{-LOOP} are not in the ANS Forth standard. However, an
implementation for these words that uses only standard words is provided
in @file{compat/loops.fs}.

@code{?DO} can also be replaced by @code{DO}. @code{DO} always enters
the loop, independent of the loop parameters. Do not use @code{DO}, even
if you know that the loop is entered in any case. Such knowledge tends
to become invalid during maintenance of a program, and then the
@code{DO} will make trouble.

@code{UNLOOP} is used to prepare for an abnormal loop exit, e.g., via
@code{EXIT}. @code{UNLOOP} removes the loop control parameters from the
return stack so @code{EXIT} can get to its return address.

Another counted loop is
@example
@var{n}
FOR
  @var{body}
NEXT
@end example
This is the preferred loop of native code compiler writers who are too
lazy to optimize @code{?DO} loops properly. In Gforth, this loop
iterates @var{n+1} times; @code{i} produces values starting with @var{n}
and ending with 0. Other Forth systems may behave differently, even if
they support @code{FOR} loops. To avoid problems, don't use @code{FOR}
loops.

@node Arbitrary control structures, Calls and returns, Counted Loops, Control Structures
@subsection Arbitrary control structures

ANS Forth permits and supports using control structures in a non-nested
way. Information about incomplete control structures is stored on the
control-flow stack. This stack may be implemented on the Forth data
stack, and this is what we have done in Gforth.

An @i{orig} entry represents an unresolved forward branch, a @i{dest}
entry represents a backward branch target. A few words are the basis for
building any control structure possible (except control structures that
need storage, like calls, coroutines, and backtracking).

doc-if
doc-ahead
doc-then
doc-begin
doc-until
doc-again
doc-cs-pick
doc-cs-roll

On many systems control-flow stack items take one word, in Gforth they
currently take three (this may change in the future). Therefore it is a
really good idea to manipulate the control flow stack with
@code{cs-pick} and @code{cs-roll}, not with data stack manipulation
words.

Some standard control structure words are built from these words:

doc-else
doc-while
doc-repeat

Counted loop words constitute a separate group of words:

doc-?do
doc-+do
doc-u+do
doc--do
doc-u-do
doc-do
doc-for
doc-loop
doc-+loop
doc--loop
doc-next
doc-leave
doc-?leave
doc-unloop
doc-done

The standard does not allow using @code{cs-pick} and @code{cs-roll} on
@i{do-sys}. Our system allows it, but it's your job to ensure that for
every @code{?DO} etc. there is exactly one @code{UNLOOP} on any path
through the definition (@code{LOOP} etc. compile an @code{UNLOOP} on the
fall-through path). Also, you have to ensure that all @code{LEAVE}s are
resolved (by using one of the loop-ending words or @code{DONE}).

Another group of control structure words are

doc-case
doc-endcase
doc-of
doc-endof

@i{case-sys} and @i{of-sys} cannot be processed using @code{cs-pick} and
@code{cs-roll}.

@subsubsection Programming Style

In order to ensure readability we recommend that you do not create
arbitrary control structures directly, but define new control structure
words for the control structure you want and use these words in your
program.

E.g., instead of writing

@example
begin
  ...
if [ 1 cs-roll ]
  ...
again then
@end example

we recommend defining control structure words, e.g.,

@example
: while ( dest -- orig dest )
 POSTPONE if
 1 cs-roll ; immediate

: repeat ( orig dest -- )
 POSTPONE again
 POSTPONE then ; immediate
@end example

and then using these to create the control structure:

@example
begin
  ...
while
  ...
repeat
@end example

That's much easier to read, isn't it? Of course, @code{REPEAT} and
@code{WHILE} are predefined, so in this example it would not be
necessary to define them.

@node Calls and returns, Exception Handling, Arbitrary control structures, Control Structures
@subsection Calls and returns

A definition can be called simply be writing the name of the
definition. When the end of the definition is reached, it returns. An
earlier return can be forced using

doc-exit

Don't forget to clean up the return stack and @code{UNLOOP} any
outstanding @code{?DO}...@code{LOOP}s before @code{EXIT}ing. The
primitive compiled by @code{EXIT} is

doc-;s

@node Exception Handling,  , Calls and returns, Control Structures
@subsection Exception Handling

doc-catch
doc-throw

@node Locals, Defining Words, Control Structures, Words
@section Locals

Local variables can make Forth programming more enjoyable and Forth
programs easier to read. Unfortunately, the locals of ANS Forth are
laden with restrictions. Therefore, we provide not only the ANS Forth
locals wordset, but also our own, more powerful locals wordset (we
implemented the ANS Forth locals wordset through our locals wordset).

The ideas in this section have also been published in the paper
@cite{Automatic Scoping of Local Variables} by M. Anton Ertl, presented
at EuroForth '94; it is available at
@*@file{http://www.complang.tuwien.ac.at/papers/ertl94l.ps.gz}.

@menu
* Gforth locals::               
* ANS Forth locals::            
@end menu

@node Gforth locals, ANS Forth locals, Locals, Locals
@subsection Gforth locals

Locals can be defined with

@example
@{ local1 local2 ... -- comment @}
@end example
or
@example
@{ local1 local2 ... @}
@end example

E.g.,
@example
: max @{ n1 n2 -- n3 @}
 n1 n2 > if
   n1
 else
   n2
 endif ;
@end example

The similarity of locals definitions with stack comments is intended. A
locals definition often replaces the stack comment of a word. The order
of the locals corresponds to the order in a stack comment and everything
after the @code{--} is really a comment.

This similarity has one disadvantage: It is too easy to confuse locals
declarations with stack comments, causing bugs and making them hard to
find. However, this problem can be avoided by appropriate coding
conventions: Do not use both notations in the same program. If you do,
they should be distinguished using additional means, e.g. by position.

The name of the local may be preceded by a type specifier, e.g.,
@code{F:} for a floating point value:

@example
: CX* @{ F: Ar F: Ai F: Br F: Bi -- Cr Ci @}
\ complex multiplication
 Ar Br f* Ai Bi f* f-
 Ar Bi f* Ai Br f* f+ ;
@end example

Gforth currently supports cells (@code{W:}, @code{W^}), doubles
(@code{D:}, @code{D^}), floats (@code{F:}, @code{F^}) and characters
(@code{C:}, @code{C^}) in two flavours: a value-flavoured local (defined
with @code{W:}, @code{D:} etc.) produces its value and can be changed
with @code{TO}. A variable-flavoured local (defined with @code{W^} etc.)
produces its address (which becomes invalid when the variable's scope is
left). E.g., the standard word @code{emit} can be defined in therms of
@code{type} like this:

@example
: emit @{ C^ char* -- @}
    char* 1 type ;
@end example

A local without type specifier is a @code{W:} local. Both flavours of
locals are initialized with values from the data or FP stack.

Currently there is no way to define locals with user-defined data
structures, but we are working on it.

Gforth allows defining locals everywhere in a colon definition. This
poses the following questions:

@menu
* Where are locals visible by name?::  
* How long do locals live?::    
* Programming Style::           
* Implementation::              
@end menu

@node Where are locals visible by name?, How long do locals live?, Gforth locals, Gforth locals
@subsubsection Where are locals visible by name?

Basically, the answer is that locals are visible where you would expect
it in block-structured languages, and sometimes a little longer. If you
want to restrict the scope of a local, enclose its definition in
@code{SCOPE}...@code{ENDSCOPE}.

doc-scope
doc-endscope

These words behave like control structure words, so you can use them
with @code{CS-PICK} and @code{CS-ROLL} to restrict the scope in
arbitrary ways.

If you want a more exact answer to the visibility question, here's the
basic principle: A local is visible in all places that can only be
reached through the definition of the local@footnote{In compiler
construction terminology, all places dominated by the definition of the
local.}. In other words, it is not visible in places that can be reached
without going through the definition of the local. E.g., locals defined
in @code{IF}...@code{ENDIF} are visible until the @code{ENDIF}, locals
defined in @code{BEGIN}...@code{UNTIL} are visible after the
@code{UNTIL} (until, e.g., a subsequent @code{ENDSCOPE}).

The reasoning behind this solution is: We want to have the locals
visible as long as it is meaningful. The user can always make the
visibility shorter by using explicit scoping. In a place that can
only be reached through the definition of a local, the meaning of a
local name is clear. In other places it is not: How is the local
initialized at the control flow path that does not contain the
definition? Which local is meant, if the same name is defined twice in
two independent control flow paths?

This should be enough detail for nearly all users, so you can skip the
rest of this section. If you relly must know all the gory details and
options, read on.

In order to implement this rule, the compiler has to know which places
are unreachable. It knows this automatically after @code{AHEAD},
@code{AGAIN}, @code{EXIT} and @code{LEAVE}; in other cases (e.g., after
most @code{THROW}s), you can use the word @code{UNREACHABLE} to tell the
compiler that the control flow never reaches that place. If
@code{UNREACHABLE} is not used where it could, the only consequence is
that the visibility of some locals is more limited than the rule above
says. If @code{UNREACHABLE} is used where it should not (i.e., if you
lie to the compiler), buggy code will be produced.

Another problem with this rule is that at @code{BEGIN}, the compiler
does not know which locals will be visible on the incoming
back-edge. All problems discussed in the following are due to this
ignorance of the compiler (we discuss the problems using @code{BEGIN}
loops as examples; the discussion also applies to @code{?DO} and other
loops). Perhaps the most insidious example is:
@example
AHEAD
BEGIN
  x
[ 1 CS-ROLL ] THEN
  @{ x @}
  ...
UNTIL
@end example

This should be legal according to the visibility rule. The use of
@code{x} can only be reached through the definition; but that appears
textually below the use.

From this example it is clear that the visibility rules cannot be fully
implemented without major headaches. Our implementation treats common
cases as advertised and the exceptions are treated in a safe way: The
compiler makes a reasonable guess about the locals visible after a
@code{BEGIN}; if it is too pessimistic, the
user will get a spurious error about the local not being defined; if the
compiler is too optimistic, it will notice this later and issue a
warning. In the case above the compiler would complain about @code{x}
being undefined at its use. You can see from the obscure examples in
this section that it takes quite unusual control structures to get the
compiler into trouble, and even then it will often do fine.

If the @code{BEGIN} is reachable from above, the most optimistic guess
is that all locals visible before the @code{BEGIN} will also be
visible after the @code{BEGIN}. This guess is valid for all loops that
are entered only through the @code{BEGIN}, in particular, for normal
@code{BEGIN}...@code{WHILE}...@code{REPEAT} and
@code{BEGIN}...@code{UNTIL} loops and it is implemented in our
compiler. When the branch to the @code{BEGIN} is finally generated by
@code{AGAIN} or @code{UNTIL}, the compiler checks the guess and
warns the user if it was too optimisitic:
@example
IF
  @{ x @}
BEGIN
  \ x ? 
[ 1 cs-roll ] THEN
  ...
UNTIL
@end example

Here, @code{x} lives only until the @code{BEGIN}, but the compiler
optimistically assumes that it lives until the @code{THEN}. It notices
this difference when it compiles the @code{UNTIL} and issues a
warning. The user can avoid the warning, and make sure that @code{x}
is not used in the wrong area by using explicit scoping:
@example
IF
  SCOPE
  @{ x @}
  ENDSCOPE
BEGIN
[ 1 cs-roll ] THEN
  ...
UNTIL
@end example

Since the guess is optimistic, there will be no spurious error messages
about undefined locals.

If the @code{BEGIN} is not reachable from above (e.g., after
@code{AHEAD} or @code{EXIT}), the compiler cannot even make an
optimistic guess, as the locals visible after the @code{BEGIN} may be
defined later. Therefore, the compiler assumes that no locals are
visible after the @code{BEGIN}. However, the user can use
@code{ASSUME-LIVE} to make the compiler assume that the same locals are
visible at the BEGIN as at the point where the top control-flow stack
item was created.

doc-assume-live

E.g.,
@example
@{ x @}
AHEAD
ASSUME-LIVE
BEGIN
  x
[ 1 CS-ROLL ] THEN
  ...
UNTIL
@end example

Other cases where the locals are defined before the @code{BEGIN} can be
handled by inserting an appropriate @code{CS-ROLL} before the
@code{ASSUME-LIVE} (and changing the control-flow stack manipulation
behind the @code{ASSUME-LIVE}).

Cases where locals are defined after the @code{BEGIN} (but should be
visible immediately after the @code{BEGIN}) can only be handled by
rearranging the loop. E.g., the ``most insidious'' example above can be
arranged into:
@example
BEGIN
  @{ x @}
  ... 0=
WHILE
  x
REPEAT
@end example

@node How long do locals live?, Programming Style, Where are locals visible by name?, Gforth locals
@subsubsection How long do locals live?

The right answer for the lifetime question would be: A local lives at
least as long as it can be accessed. For a value-flavoured local this
means: until the end of its visibility. However, a variable-flavoured
local could be accessed through its address far beyond its visibility
scope. Ultimately, this would mean that such locals would have to be
garbage collected. Since this entails un-Forth-like implementation
complexities, I adopted the same cowardly solution as some other
languages (e.g., C): The local lives only as long as it is visible;
afterwards its address is invalid (and programs that access it
afterwards are erroneous).

@node Programming Style, Implementation, How long do locals live?, Gforth locals
@subsubsection Programming Style

The freedom to define locals anywhere has the potential to change
programming styles dramatically. In particular, the need to use the
return stack for intermediate storage vanishes. Moreover, all stack
manipulations (except @code{PICK}s and @code{ROLL}s with run-time
determined arguments) can be eliminated: If the stack items are in the
wrong order, just write a locals definition for all of them; then
write the items in the order you want.

This seems a little far-fetched and eliminating stack manipulations is
unlikely to become a conscious programming objective. Still, the number
of stack manipulations will be reduced dramatically if local variables
are used liberally (e.g., compare @code{max} in @ref{Gforth locals} with
a traditional implementation of @code{max}).

This shows one potential benefit of locals: making Forth programs more
readable. Of course, this benefit will only be realized if the
programmers continue to honour the principle of factoring instead of
using the added latitude to make the words longer.

Using @code{TO} can and should be avoided.  Without @code{TO},
every value-flavoured local has only a single assignment and many
advantages of functional languages apply to Forth. I.e., programs are
easier to analyse, to optimize and to read: It is clear from the
definition what the local stands for, it does not turn into something
different later.

E.g., a definition using @code{TO} might look like this:
@example
: strcmp @{ addr1 u1 addr2 u2 -- n @}
 u1 u2 min 0
 ?do
   addr1 c@ addr2 c@ - ?dup
   if
     unloop exit
   then
   addr1 char+ TO addr1
   addr2 char+ TO addr2
 loop
 u1 u2 - ;
@end example
Here, @code{TO} is used to update @code{addr1} and @code{addr2} at
every loop iteration. @code{strcmp} is a typical example of the
readability problems of using @code{TO}. When you start reading
@code{strcmp}, you think that @code{addr1} refers to the start of the
string. Only near the end of the loop you realize that it is something
else.

This can be avoided by defining two locals at the start of the loop that
are initialized with the right value for the current iteration.
@example
: strcmp @{ addr1 u1 addr2 u2 -- n @}
 addr1 addr2
 u1 u2 min 0 
 ?do @{ s1 s2 @}
   s1 c@ s2 c@ - ?dup 
   if
     unloop exit
   then
   s1 char+ s2 char+
 loop
 2drop
 u1 u2 - ;
@end example
Here it is clear from the start that @code{s1} has a different value
in every loop iteration.

@node Implementation,  , Programming Style, Gforth locals
@subsubsection Implementation

Gforth uses an extra locals stack. The most compelling reason for
this is that the return stack is not float-aligned; using an extra stack
also eliminates the problems and restrictions of using the return stack
as locals stack. Like the other stacks, the locals stack grows toward
lower addresses. A few primitives allow an efficient implementation:

doc-@local#
doc-f@local#
doc-laddr#
doc-lp+!#
doc-lp!
doc->l
doc-f>l

In addition to these primitives, some specializations of these
primitives for commonly occurring inline arguments are provided for
efficiency reasons, e.g., @code{@@local0} as specialization of
@code{@@local#} for the inline argument 0. The following compiling words
compile the right specialized version, or the general version, as
appropriate:

doc-compile-@local
doc-compile-f@local
doc-compile-lp+!

Combinations of conditional branches and @code{lp+!#} like
@code{?branch-lp+!#} (the locals pointer is only changed if the branch
is taken) are provided for efficiency and correctness in loops.

A special area in the dictionary space is reserved for keeping the
local variable names. @code{@{} switches the dictionary pointer to this
area and @code{@}} switches it back and generates the locals
initializing code. @code{W:} etc.@ are normal defining words. This
special area is cleared at the start of every colon definition.

A special feature of Gforth's dictionary is used to implement the
definition of locals without type specifiers: every wordlist (aka
vocabulary) has its own methods for searching
etc. (@pxref{Wordlists}). For the present purpose we defined a wordlist
with a special search method: When it is searched for a word, it
actually creates that word using @code{W:}. @code{@{} changes the search
order to first search the wordlist containing @code{@}}, @code{W:} etc.,
and then the wordlist for defining locals without type specifiers.

The lifetime rules support a stack discipline within a colon
definition: The lifetime of a local is either nested with other locals
lifetimes or it does not overlap them.

At @code{BEGIN}, @code{IF}, and @code{AHEAD} no code for locals stack
pointer manipulation is generated. Between control structure words
locals definitions can push locals onto the locals stack. @code{AGAIN}
is the simplest of the other three control flow words. It has to
restore the locals stack depth of the corresponding @code{BEGIN}
before branching. The code looks like this:
@format
@code{lp+!#} current-locals-size @minus{} dest-locals-size
@code{branch} <begin>
@end format

@code{UNTIL} is a little more complicated: If it branches back, it
must adjust the stack just like @code{AGAIN}. But if it falls through,
the locals stack must not be changed. The compiler generates the
following code:
@format
@code{?branch-lp+!#} <begin> current-locals-size @minus{} dest-locals-size
@end format
The locals stack pointer is only adjusted if the branch is taken.

@code{THEN} can produce somewhat inefficient code:
@format
@code{lp+!#} current-locals-size @minus{} orig-locals-size
<orig target>:
@code{lp+!#} orig-locals-size @minus{} new-locals-size
@end format
The second @code{lp+!#} adjusts the locals stack pointer from the
level at the @var{orig} point to the level after the @code{THEN}. The
first @code{lp+!#} adjusts the locals stack pointer from the current
level to the level at the orig point, so the complete effect is an
adjustment from the current level to the right level after the
@code{THEN}.

In a conventional Forth implementation a dest control-flow stack entry
is just the target address and an orig entry is just the address to be
patched. Our locals implementation adds a wordlist to every orig or dest
item. It is the list of locals visible (or assumed visible) at the point
described by the entry. Our implementation also adds a tag to identify
the kind of entry, in particular to differentiate between live and dead
(reachable and unreachable) orig entries.

A few unusual operations have to be performed on locals wordlists:

doc-common-list
doc-sub-list?
doc-list-size

Several features of our locals wordlist implementation make these
operations easy to implement: The locals wordlists are organised as
linked lists; the tails of these lists are shared, if the lists
contain some of the same locals; and the address of a name is greater
than the address of the names behind it in the list.

Another important implementation detail is the variable
@code{dead-code}. It is used by @code{BEGIN} and @code{THEN} to
determine if they can be reached directly or only through the branch
that they resolve. @code{dead-code} is set by @code{UNREACHABLE},
@code{AHEAD}, @code{EXIT} etc., and cleared at the start of a colon
definition, by @code{BEGIN} and usually by @code{THEN}.

Counted loops are similar to other loops in most respects, but
@code{LEAVE} requires special attention: It performs basically the same
service as @code{AHEAD}, but it does not create a control-flow stack
entry. Therefore the information has to be stored elsewhere;
traditionally, the information was stored in the target fields of the
branches created by the @code{LEAVE}s, by organizing these fields into a
linked list. Unfortunately, this clever trick does not provide enough
space for storing our extended control flow information. Therefore, we
introduce another stack, the leave stack. It contains the control-flow
stack entries for all unresolved @code{LEAVE}s.

Local names are kept until the end of the colon definition, even if
they are no longer visible in any control-flow path. In a few cases
this may lead to increased space needs for the locals name area, but
usually less than reclaiming this space would cost in code size.


@node ANS Forth locals,  , Gforth locals, Locals
@subsection ANS Forth locals

The ANS Forth locals wordset does not define a syntax for locals, but
words that make it possible to define various syntaxes. One of the
possible syntaxes is a subset of the syntax we used in the Gforth locals
wordset, i.e.:

@example
@{ local1 local2 ... -- comment @}
@end example
or
@example
@{ local1 local2 ... @}
@end example

The order of the locals corresponds to the order in a stack comment. The
restrictions are:

@itemize @bullet
@item
Locals can only be cell-sized values (no type specifiers are allowed).
@item
Locals can be defined only outside control structures.
@item
Locals can interfere with explicit usage of the return stack. For the
exact (and long) rules, see the standard. If you don't use return stack
accessing words in a definition using locals, you will be all right. The
purpose of this rule is to make locals implementation on the return
stack easier.
@item
The whole definition must be in one line.
@end itemize

Locals defined in this way behave like @code{VALUE}s
(@xref{Values}). I.e., they are initialized from the stack. Using their
name produces their value. Their value can be changed using @code{TO}.

Since this syntax is supported by Gforth directly, you need not do
anything to use it. If you want to port a program using this syntax to
another ANS Forth system, use @file{compat/anslocal.fs} to implement the
syntax on the other system.

Note that a syntax shown in the standard, section A.13 looks
similar, but is quite different in having the order of locals
reversed. Beware!

The ANS Forth locals wordset itself consists of the following word

doc-(local)

The ANS Forth locals extension wordset defines a syntax, but it is so
awful that we strongly recommend not to use it. We have implemented this
syntax to make porting to Gforth easy, but do not document it here. The
problem with this syntax is that the locals are defined in an order
reversed with respect to the standard stack comment notation, making
programs harder to read, and easier to misread and miswrite. The only
merit of this syntax is that it is easy to implement using the ANS Forth
locals wordset.

@node Defining Words, Wordlists, Locals, Words
@section Defining Words

@menu
* Values::                      
@end menu

@node Values,  , Defining Words, Defining Words
@subsection Values

@node Wordlists, Files, Defining Words, Words
@section Wordlists

@node Files, Blocks, Wordlists, Words
@section Files

@node Blocks, Other I/O, Files, Words
@section Blocks

@node Other I/O, Programming Tools, Blocks, Words
@section Other I/O

@node Programming Tools, Assembler and Code words, Other I/O, Words
@section Programming Tools

@menu
* Debugging::                   Simple and quick.
* Assertions::                  Making your programs self-checking.
@end menu

@node Debugging, Assertions, Programming Tools, Programming Tools
@subsection Debugging

The simple debugging aids provided in @file{debugging.fs}
are meant to support a different style of debugging than the
tracing/stepping debuggers used in languages with long turn-around
times.

A much better (faster) way in fast-compilig languages is to add
printing code at well-selected places, let the program run, look at
the output, see where things went wrong, add more printing code, etc.,
until the bug is found.

The word @code{~~} is easy to insert. It just prints debugging
information (by default the source location and the stack contents). It
is also easy to remove (@kbd{C-x ~} in the Emacs Forth mode to
query-replace them with nothing). The deferred words
@code{printdebugdata} and @code{printdebugline} control the output of
@code{~~}. The default source location output format works well with
Emacs' compilation mode, so you can step through the program at the
source level using @kbd{C-x `} (the advantage over a stepping debugger
is that you can step in any direction and you know where the crash has
happened or where the strange data has occurred).

Note that the default actions clobber the contents of the pictured
numeric output string, so you should not use @code{~~}, e.g., between
@code{<#} and @code{#>}.

doc-~~
doc-printdebugdata
doc-printdebugline

@node Assertions,  , Debugging, Programming Tools
@subsection Assertions

It is a good idea to make your programs self-checking, in particular, if
you use an assumption (e.g., that a certain field of a data structure is
never zero) that may become wrong during maintenance. Gforth supports
assertions for this purpose. They are used like this:

@example
assert( @var{flag} )
@end example

The code between @code{assert(} and @code{)} should compute a flag, that
should be true if everything is alright and false otherwise. It should
not change anything else on the stack. The overall stack effect of the
assertion is @code{( -- )}. E.g.

@example
assert( 1 1 + 2 = ) \ what we learn in school
assert( dup 0<> ) \ assert that the top of stack is not zero
assert( false ) \ this code should not be reached
@end example

The need for assertions is different at different times. During
debugging, we want more checking, in production we sometimes care more
for speed. Therefore, assertions can be turned off, i.e., the assertion
becomes a comment. Depending on the importance of an assertion and the
time it takes to check it, you may want to turn off some assertions and
keep others turned on. Gforth provides several levels of assertions for
this purpose:

doc-assert0(
doc-assert1(
doc-assert2(
doc-assert3(
doc-assert(
doc-)

@code{Assert(} is the same as @code{assert1(}. The variable
@code{assert-level} specifies the highest assertions that are turned
on. I.e., at the default @code{assert-level} of one, @code{assert0(} and
@code{assert1(} assertions perform checking, while @code{assert2(} and
@code{assert3(} assertions are treated as comments.

Note that the @code{assert-level} is evaluated at compile-time, not at
run-time. I.e., you cannot turn assertions on or off at run-time, you
have to set the @code{assert-level} appropriately before compiling a
piece of code. You can compile several pieces of code at several
@code{assert-level}s (e.g., a trusted library at level 1 and newly
written code at level 3).

doc-assert-level

If an assertion fails, a message compatible with Emacs' compilation mode
is produced and the execution is aborted (currently with @code{ABORT"}.
If there is interest, we will introduce a special throw code. But if you
intend to @code{catch} a specific condition, using @code{throw} is
probably more appropriate than an assertion).

@node Assembler and Code words, Threading Words, Programming Tools, Words
@section Assembler and Code words

Gforth provides some words for defining primitives (words written in
machine code), and for defining the the machine-code equivalent of
@code{DOES>}-based defining words. However, the machine-independent
nature of Gforth poses a few problems: First of all. Gforth runs on
several architectures, so it can provide no standard assembler. What's
worse is that the register allocation not only depends on the processor,
but also on the @code{gcc} version and options used.

The words that Gforth offers encapsulate some system dependences (e.g., the
header structure), so a system-independent assembler may be used in
Gforth. If you do not have an assembler, you can compile machine code
directly with @code{,} and @code{c,}.

doc-assembler
doc-code
doc-end-code
doc-;code
doc-flush-icache

If @code{flush-icache} does not work correctly, @code{code} words
etc. will not work (reliably), either.

These words are rarely used. Therefore they reside in @code{code.fs},
which is usually not loaded (except @code{flush-icache}, which is always
present). You can load them with @code{require code.fs}.

In the assembly code you will want to refer to the inner interpreter's
registers (e.g., the data stack pointer) and you may want to use other
registers for temporary storage. Unfortunately, the register allocation
is installation-dependent.

The easiest solution is to use explicit register declarations
(@pxref{Explicit Reg Vars, , Variables in Specified Registers, gcc.info,
GNU C Manual}) for all of the inner interpreter's registers: You have to
compile Gforth with @code{-DFORCE_REG} (configure option
@code{--enable-force-reg}) and the appropriate declarations must be
present in the @code{machine.h} file (see @code{mips.h} for an example;
you can find a full list of all declarable register symbols with
@code{grep register engine.c}). If you give explicit registers to all
variables that are declared at the beginning of @code{engine()}, you
should be able to use the other caller-saved registers for temporary
storage. Alternatively, you can use the @code{gcc} option
@code{-ffixed-REG} (@pxref{Code Gen Options, , Options for Code
Generation Conventions, gcc.info, GNU C Manual}) to reserve a register
(however, this restriction on register allocation may slow Gforth
significantly).

If this solution is not viable (e.g., because @code{gcc} does not allow
you to explicitly declare all the registers you need), you have to find
out by looking at the code where the inner interpreter's registers
reside and which registers can be used for temporary storage. You can
get an assembly listing of the engine's code with @code{make engine.s}.

In any case, it is good practice to abstract your assembly code from the
actual register allocation. E.g., if the data stack pointer resides in
register @code{$17}, create an alias for this register called @code{sp},
and use that in your assembly code.

Another option for implementing normal and defining words efficiently
is: adding the wanted functionality to the source of Gforth. For normal
words you just have to edit @file{primitives}, defining words (for fast
defined words) may require changes in @file{engine.c},
@file{kernal.fs}, @file{prims2x.fs}, and possibly @file{cross.fs}.


@node Threading Words,  , Assembler and Code words, Words
@section Threading Words

These words provide access to code addresses and other threading stuff
in Gforth (and, possibly, other interpretive Forths). It more or less
abstracts away the differences between direct and indirect threading
(and, for direct threading, the machine dependences). However, at
present this wordset is still inclomplete. It is also pretty low-level;
some day it will hopefully be made unnecessary by an internals words set
that abstracts implementation details away completely.

doc->code-address
doc->does-code
doc-code-address!
doc-does-code!
doc-does-handler!
doc-/does-handler

The code addresses produced by various defining words are produced by
the following words:

doc-docol:
doc-docon:
doc-dovar:
doc-douser:
doc-dodefer:
doc-dofield:

Currently there is no installation-independent way for recogizing words
defined by a @code{CREATE}...@code{DOES>} word; however, once you know
that a word is defined by a @code{CREATE}...@code{DOES>} word, you can
use @code{>DOES-CODE}.

@node ANS conformance, Model, Words, Top
@chapter ANS conformance

To the best of our knowledge, Gforth is an

ANS Forth System
@itemize
@item providing the Core Extensions word set
@item providing the Block word set
@item providing the Block Extensions word set
@item providing the Double-Number word set
@item providing the Double-Number Extensions word set
@item providing the Exception word set
@item providing the Exception Extensions word set
@item providing the Facility word set
@item providing @code{MS} and @code{TIME&DATE} from the Facility Extensions word set
@item providing the File Access word set
@item providing the File Access Extensions word set
@item providing the Floating-Point word set
@item providing the Floating-Point Extensions word set
@item providing the Locals word set
@item providing the Locals Extensions word set
@item providing the Memory-Allocation word set
@item providing the Memory-Allocation Extensions word set (that one's easy)
@item providing the Programming-Tools word set
@item providing @code{;code}, @code{AHEAD}, @code{ASSEMBLER}, @code{BYE}, @code{CODE}, @code{CS-PICK}, @code{CS-ROLL}, @code{STATE}, @code{[ELSE]}, @code{[IF]}, @code{[THEN]} from the Programming-Tools Extensions word set
@item providing the Search-Order word set
@item providing the Search-Order Extensions word set
@item providing the String word set
@item providing the String Extensions word set (another easy one)
@end itemize

In addition, ANS Forth systems are required to document certain
implementation choices. This chapter tries to meet these
requirements. In many cases it gives a way to ask the system for the
information instead of providing the information directly, in
particular, if the information depends on the processor, the operating
system or the installation options chosen, or if they are likely to
change during the maintenance of Gforth.

@comment The framework for the rest has been taken from pfe.

@menu
* The Core Words::              
* The optional Block word set::  
* The optional Double Number word set::  
* The optional Exception word set::  
* The optional Facility word set::  
* The optional File-Access word set::  
* The optional Floating-Point word set::  
* The optional Locals word set::  
* The optional Memory-Allocation word set::  
* The optional Programming-Tools word set::  
* The optional Search-Order word set::  
@end menu


@c =====================================================================
@node The Core Words, The optional Block word set, ANS conformance, ANS conformance
@comment  node-name,  next,  previous,  up
@section The Core Words
@c =====================================================================

@menu
* core-idef::                   Implementation Defined Options                   
* core-ambcond::                Ambiguous Conditions                
* core-other::                  Other System Documentation                  
@end menu

@c ---------------------------------------------------------------------
@node core-idef, core-ambcond, The Core Words, The Core Words
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item (Cell) aligned addresses:
processor-dependent. Gforth's alignment words perform natural alignment
(e.g., an address aligned for a datum of size 8 is divisible by
8). Unaligned accesses usually result in a @code{-23 THROW}.

@item @code{EMIT} and non-graphic characters:
The character is output using the C library function (actually, macro)
@code{putchar}.

@item character editing of @code{ACCEPT} and @code{EXPECT}:
This is modeled on the GNU readline library (@pxref{Readline
Interaction, , Command Line Editing, readline, The GNU Readline
Library}) with Emacs-like key bindings. @kbd{Tab} deviates a little by
producing a full word completion every time you type it (instead of
producing the common prefix of all completions).

@item character set:
The character set of your computer and display device. Gforth is
8-bit-clean (but some other component in your system may make trouble).

@item Character-aligned address requirements:
installation-dependent. Currently a character is represented by a C
@code{unsigned char}; in the future we might switch to @code{wchar_t}
(Comments on that requested).

@item character-set extensions and matching of names:
Any character except the ASCII NUL charcter can be used in a
name. Matching is case-insensitive. The matching is performed using the
C function @code{strncasecmp}, whose function is probably influenced by
the locale. E.g., the @code{C} locale does not know about accents and
umlauts, so they are matched case-sensitively in that locale. For
portability reasons it is best to write programs such that they work in
the @code{C} locale. Then one can use libraries written by a Polish
programmer (who might use words containing ISO Latin-2 encoded
characters) and by a French programmer (ISO Latin-1) in the same program
(of course, @code{WORDS} will produce funny results for some of the
words (which ones, depends on the font you are using)). Also, the locale
you prefer may not be available in other operating systems. Hopefully,
Unicode will solve these problems one day.

@item conditions under which control characters match a space delimiter:
If @code{WORD} is called with the space character as a delimiter, all
white-space characters (as identified by the C macro @code{isspace()})
are delimiters. @code{PARSE}, on the other hand, treats space like other
delimiters. @code{PARSE-WORD} treats space like @code{WORD}, but behaves
like @code{PARSE} otherwise. @code{(NAME)}, which is used by the outer
interpreter (aka text interpreter) by default, treats all white-space
characters as delimiters.

@item format of the control flow stack:
The data stack is used as control flow stack. The size of a control flow
stack item in cells is given by the constant @code{cs-item-size}. At the
time of this writing, an item consists of a (pointer to a) locals list
(third), an address in the code (second), and a tag for identifying the
item (TOS). The following tags are used: @code{defstart},
@code{live-orig}, @code{dead-orig}, @code{dest}, @code{do-dest},
@code{scopestart}.

@item conversion of digits > 35
The characters @code{[\]^_'} are the digits with the decimal value
36@minus{}41. There is no way to input many of the larger digits.

@item display after input terminates in @code{ACCEPT} and @code{EXPECT}:
The cursor is moved to the end of the entered string. If the input is
terminated using the @kbd{Return} key, a space is typed.

@item exception abort sequence of @code{ABORT"}:
The error string is stored into the variable @code{"error} and a
@code{-2 throw} is performed.

@item input line terminator:
For interactive input, @kbd{C-m} and @kbd{C-j} terminate lines. One of
these characters is typically produced when you type the @kbd{Enter} or
@kbd{Return} key.

@item maximum size of a counted string:
@code{s" /counted-string" environment? drop .}. Currently 255 characters
on all ports, but this may change.

@item maximum size of a parsed string:
Given by the constant @code{/line}. Currently 255 characters.

@item maximum size of a definition name, in characters:
31

@item maximum string length for @code{ENVIRONMENT?}, in characters:
31

@item method of selecting the user input device:
The user input device is the standard input. There is currently no way to
change it from within Gforth. However, the input can typically be
redirected in the command line that starts Gforth.

@item method of selecting the user output device:
The user output device is the standard output. It cannot be redirected
from within Gforth, but typically from the command line that starts
Gforth. Gforth uses buffered output, so output on a terminal does not
become visible before the next newline or buffer overflow. Output on
non-terminals is invisible until the buffer overflows.

@item methods of dictionary compilation:
What are we expected to document here?

@item number of bits in one address unit:
@code{s" address-units-bits" environment? drop .}. 8 in all current
ports.

@item number representation and arithmetic:
Processor-dependent. Binary two's complement on all current ports.

@item ranges for integer types:
Installation-dependent. Make environmental queries for @code{MAX-N},
@code{MAX-U}, @code{MAX-D} and @code{MAX-UD}. The lower bounds for
unsigned (and positive) types is 0. The lower bound for signed types on
two's complement and one's complement machines machines can be computed
by adding 1 to the upper bound.

@item read-only data space regions:
The whole Forth data space is writable.

@item size of buffer at @code{WORD}:
@code{PAD HERE - .}. 104 characters on 32-bit machines. The buffer is
shared with the pictured numeric output string. If overwriting
@code{PAD} is acceptable, it is as large as the remaining dictionary
space, although only as much can be sensibly used as fits in a counted
string.

@item size of one cell in address units:
@code{1 cells .}.

@item size of one character in address units:
@code{1 chars .}. 1 on all current ports.

@item size of the keyboard terminal buffer:
Varies. You can determine the size at a specific time using @code{lp@
tib - .}. It is shared with the locals stack and TIBs of files that
include the current file. You can change the amount of space for TIBs
and locals stack at Gforth startup with the command line option
@code{-l}.

@item size of the pictured numeric output buffer:
@code{PAD HERE - .}. 104 characters on 32-bit machines. The buffer is
shared with @code{WORD}.

@item size of the scratch area returned by @code{PAD}:
The remainder of dictionary space. You can even use the unused part of
the data stack space. The current size can be computed with @code{sp@
pad - .}.

@item system case-sensitivity characteristics:
Dictionary searches are case insensitive. However, as explained above
under @i{character-set extensions}, the matching for non-ASCII
characters is determined by the locale you are using. In the default
@code{C} locale all non-ASCII characters are matched case-sensitively.

@item system prompt:
@code{ ok} in interpret state, @code{ compiled} in compile state.

@item division rounding:
installation dependent. @code{s" floored" environment? drop .}. We leave
the choice to @code{gcc} (what to use for @code{/}) and to you (whether to use
@code{fm/mod}, @code{sm/rem} or simply @code{/}).

@item values of @code{STATE} when true:
-1.

@item values returned after arithmetic overflow:
On two's complement machines, arithmetic is performed modulo
2**bits-per-cell for single arithmetic and 4**bits-per-cell for double
arithmetic (with appropriate mapping for signed types). Division by zero
typically results in a @code{-55 throw} (floatingpoint unidentified
fault), although a @code{-10 throw} (divide by zero) would be more
appropriate.

@item whether the current definition can be found after @t{DOES>}:
No.

@end table

@c ---------------------------------------------------------------------
@node core-ambcond, core-other, core-idef, The Core Words
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item a name is neither a word nor a number:
@code{-13 throw} (Undefined word)

@item a definition name exceeds the maximum length allowed:
@code{-19 throw} (Word name too long)

@item addressing a region not inside the various data spaces of the forth system:
The stacks, code space and name space are accessible. Machine code space is
typically readable. Accessing other addresses gives results dependent on
the operating system. On decent systems: @code{-9 throw} (Invalid memory
address).

@item argument type incompatible with parameter:
This is usually not caught. Some words perform checks, e.g., the control
flow words, and issue a @code{ABORT"} or @code{-12 THROW} (Argument type
mismatch).

@item attempting to obtain the execution token of a word with undefined execution semantics:
You get an execution token representing the compilation semantics
instead.

@item dividing by zero:
typically results in a @code{-55 throw} (floating point unidentified
fault), although a @code{-10 throw} (divide by zero) would be more
appropriate.

@item insufficient data stack or return stack space:
Not checked. This typically results in mysterious illegal memory
accesses, producing @code{-9 throw} (Invalid memory address) or
@code{-23 throw} (Address alignment exception).

@item insufficient space for loop control parameters:
like other return stack overflows.

@item insufficient space in the dictionary:
Not checked. Similar results as stack overflows. However, typically the
error appears at a different place when one inserts or removes code.

@item interpreting a word with undefined interpretation semantics:
For some words, we defined interpretation semantics. For the others:
@code{-14 throw} (Interpreting a compile-only word). Note that this is
checked only by the outer (aka text) interpreter; if the word is
@code{execute}d in some other way, it will typically perform it's
compilation semantics even in interpret state. (We could change @code{'}
and relatives not to give the xt of such words, but we think that would
be too restrictive).

@item modifying the contents of the input buffer or a string literal:
These are located in writable memory and can be modified.

@item overflow of the pictured numeric output string:
Not checked.

@item parsed string overflow:
@code{PARSE} cannot overflow. @code{WORD} does not check for overflow.

@item producing a result out of range:
On two's complement machines, arithmetic is performed modulo
2**bits-per-cell for single arithmetic and 4**bits-per-cell for double
arithmetic (with appropriate mapping for signed types). Division by zero
typically results in a @code{-55 throw} (floatingpoint unidentified
fault), although a @code{-10 throw} (divide by zero) would be more
appropriate. @code{convert} and @code{>number} currently overflow
silently.

@item reading from an empty data or return stack:
The data stack is checked by the outer (aka text) interpreter after
every word executed. If it has underflowed, a @code{-4 throw} (Stack
underflow) is performed. Apart from that, the stacks are not checked and
underflows can result in similar behaviour as overflows (of adjacent
stacks).

@item unexepected end of the input buffer, resulting in an attempt to use a zero-length string as a name:
@code{Create} and its descendants perform a @code{-16 throw} (Attempt to
use zero-length string as a name). Words like @code{'} probably will not
find what they search. Note that it is possible to create zero-length
names with @code{nextname} (should it not?).

@item @code{>IN} greater than input buffer:
The next invocation of a parsing word returns a string wih length 0.

@item @code{RECURSE} appears after @code{DOES>}:
Compiles a recursive call to the defining word not to the defined word.

@item argument input source different than current input source for @code{RESTORE-INPUT}:
@code{-12 THROW}. Note that, once an input file is closed (e.g., because
the end of the file was reached), its source-id may be
reused. Therefore, restoring an input source specification referencing a
closed file may lead to unpredictable results instead of a @code{-12
THROW}.

In the future, Gforth may be able to retore input source specifications
from other than the current input soruce.

@item data space containing definitions gets de-allocated:
Deallocation with @code{allot} is not checked. This typically resuls in
memory access faults or execution of illegal instructions.

@item data space read/write with incorrect alignment:
Processor-dependent. Typically results in a @code{-23 throw} (Address
alignment exception). Under Linux on a 486 or later processor with
alignment turned on, incorrect alignment results in a @code{-9 throw}
(Invalid memory address). There are reportedly some processors with
alignment restrictions that do not report them.

@item data space pointer not properly aligned, @code{,}, @code{C,}:
Like other alignment errors.

@item less than u+2 stack items (@code{PICK} and @code{ROLL}):
Not checked. May cause an illegal memory access.

@item loop control parameters not available:
Not checked. The counted loop words simply assume that the top of return
stack items are loop control parameters and behave accordingly.

@item most recent definition does not have a name (@code{IMMEDIATE}):
@code{abort" last word was headerless"}.

@item name not defined by @code{VALUE} used by @code{TO}:
@code{-32 throw} (Invalid name argument)

@item name not found (@code{'}, @code{POSTPONE}, @code{[']}, @code{[COMPILE]}):
@code{-13 throw} (Undefined word)

@item parameters are not of the same type (@code{DO}, @code{?DO}, @code{WITHIN}):
Gforth behaves as if they were of the same type. I.e., you can predict
the behaviour by interpreting all parameters as, e.g., signed.

@item @code{POSTPONE} or @code{[COMPILE]} applied to @code{TO}:
Assume @code{: X POSTPONE TO ; IMMEDIATE}. @code{X} is equivalent to
@code{TO}.

@item String longer than a counted string returned by @code{WORD}:
Not checked. The string will be ok, but the count will, of course,
contain only the least significant bits of the length.

@item u greater than or equal to the number of bits in a cell (@code{LSHIFT}, @code{RSHIFT}):
Processor-dependent. Typical behaviours are returning 0 and using only
the low bits of the shift count.

@item word not defined via @code{CREATE}:
@code{>BODY} produces the PFA of the word no matter how it was defined.

@code{DOES>} changes the execution semantics of the last defined word no
matter how it was defined. E.g., @code{CONSTANT DOES>} is equivalent to
@code{CREATE , DOES>}.

@item words improperly used outside @code{<#} and @code{#>}:
Not checked. As usual, you can expect memory faults.

@end table


@c ---------------------------------------------------------------------
@node core-other,  , core-ambcond, The Core Words
@subsection Other system documentation
@c ---------------------------------------------------------------------

@table @i

@item nonstandard words using @code{PAD}:
None.

@item operator's terminal facilities available:
After processing the command line, Gforth goes into interactive mode,
and you can give commands to Gforth interactively. The actual facilities
available depend on how you invoke Gforth.

@item program data space available:
@code{sp@ here - .} gives the space remaining for dictionary and data
stack together.

@item return stack space available:
By default 16 KBytes. The default can be overridden with the @code{-r}
switch (@pxref{Invocation}) when Gforth starts up.

@item stack space available:
@code{sp@ here - .} gives the space remaining for dictionary and data
stack together.

@item system dictionary space required, in address units:
Type @code{here forthstart - .} after startup. At the time of this
writing, this gives 70108 (bytes) on a 32-bit system.
@end table


@c =====================================================================
@node The optional Block word set, The optional Double Number word set, The Core Words, ANS conformance
@section The optional Block word set
@c =====================================================================

@menu
* block-idef::                  Implementation Defined Options                  
* block-ambcond::               Ambiguous Conditions               
* block-other::                 Other System Documentation                 
@end menu


@c ---------------------------------------------------------------------
@node block-idef, block-ambcond, The optional Block word set, The optional Block word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item the format for display by @code{LIST}:
First the screen number is displayed, then 16 lines of 64 characters,
each line preceded by the line number.

@item the length of a line affected by @code{\}:
64 characters.
@end table


@c ---------------------------------------------------------------------
@node block-ambcond, block-other, block-idef, The optional Block word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item correct block read was not possible:
Typically results in a @code{throw} of some OS-derived value (between
-512 and -2048). If the blocks file was just not long enough, blanks are
supplied for the missing portion.

@item I/O exception in block transfer:
Typically results in a @code{throw} of some OS-derived value (between
-512 and -2048).

@item invalid block number:
@code{-35 throw} (Invalid block number)

@item a program directly alters the contents of @code{BLK}:
The input stream is switched to that other block, at the same
position. If the storing to @code{BLK} happens when interpreting
non-block input, the system will get quite confused when the block ends.

@item no current block buffer for @code{UPDATE}:
@code{UPDATE} has no effect.

@end table


@c ---------------------------------------------------------------------
@node block-other,  , block-ambcond, The optional Block word set
@subsection Other system documentation
@c ---------------------------------------------------------------------

@table @i

@item any restrictions a multiprogramming system places on the use of buffer addresses:
No restrictions (yet).

@item the number of blocks available for source and data:
depends on your disk space.

@end table


@c =====================================================================
@node The optional Double Number word set, The optional Exception word set, The optional Block word set, ANS conformance
@section The optional Double Number word set
@c =====================================================================

@menu
* double-ambcond::              Ambiguous Conditions              
@end menu


@c ---------------------------------------------------------------------
@node double-ambcond,  , The optional Double Number word set, The optional Double Number word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item @var{d} outside of range of @var{n} in @code{D>S}:
The least significant cell of @var{d} is produced.

@end table


@c =====================================================================
@node The optional Exception word set, The optional Facility word set, The optional Double Number word set, ANS conformance
@section The optional Exception word set
@c =====================================================================

@menu
* exception-idef::              Implementation Defined Options              
@end menu


@c ---------------------------------------------------------------------
@node exception-idef,  , The optional Exception word set, The optional Exception word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i
@item @code{THROW}-codes used in the system:
The codes -256@minus{}-511 are used for reporting signals (see
@file{errore.fs}). The codes -512@minus{}-2047 are used for OS errors
(for file and memory allocation operations). The mapping from OS error
numbers to throw code is -512@minus{}@var{errno}. One side effect of
this mapping is that undefined OS errors produce a message with a
strange number; e.g., @code{-1000 THROW} results in @code{Unknown error
488} on my system.
@end table

@c =====================================================================
@node The optional Facility word set, The optional File-Access word set, The optional Exception word set, ANS conformance
@section The optional Facility word set
@c =====================================================================

@menu
* facility-idef::               Implementation Defined Options               
* facility-ambcond::            Ambiguous Conditions            
@end menu


@c ---------------------------------------------------------------------
@node facility-idef, facility-ambcond, The optional Facility word set, The optional Facility word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item encoding of keyboard events (@code{EKEY}):
Not yet implemeted.

@item duration of a system clock tick
System dependent. With respect to @code{MS}, the time is specified in
microseconds. How well the OS and the hardware implement this, is
another question.

@item repeatability to be expected from the execution of @code{MS}:
System dependent. On Unix, a lot depends on load. If the system is
lightly loaded, and the delay is short enough that Gforth does not get
swapped out, the performance should be acceptable. Under MS-DOS and
other single-tasking systems, it should be good.

@end table


@c ---------------------------------------------------------------------
@node facility-ambcond,  , facility-idef, The optional Facility word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item @code{AT-XY} can't be performed on user output device:
Largely terminal dependant. No range checks are done on the arguments.
No errors are reported. You may see some garbage appearing, you may see
simply nothing happen.

@end table


@c =====================================================================
@node The optional File-Access word set, The optional Floating-Point word set, The optional Facility word set, ANS conformance
@section The optional File-Access word set
@c =====================================================================

@menu
* file-idef::                   Implementation Defined Options                   
* file-ambcond::                Ambiguous Conditions                
@end menu


@c ---------------------------------------------------------------------
@node file-idef, file-ambcond, The optional File-Access word set, The optional File-Access word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item File access methods used:
@code{R/O}, @code{R/W} and @code{BIN} work as you would
expect. @code{W/O} translates into the C file opening mode @code{w} (or
@code{wb}): The file is cleared, if it exists, and created, if it does
not (both with @code{open-file} and @code{create-file}).  Under Unix
@code{create-file} creates a file with 666 permissions modified by your
umask.

@item file exceptions:
The file words do not raise exceptions (except, perhaps, memory access
faults when you pass illegal addresses or file-ids).

@item file line terminator:
System-dependent. Gforth uses C's newline character as line
terminator. What the actual character code(s) of this are is
system-dependent.

@item file name format
System dependent. Gforth just uses the file name format of your OS.

@item information returned by @code{FILE-STATUS}:
@code{FILE-STATUS} returns the most powerful file access mode allowed
for the file: Either @code{R/O}, @code{W/O} or @code{R/W}. If the file
cannot be accessed, @code{R/O BIN} is returned. @code{BIN} is applicable
along with the retured mode.

@item input file state after an exception when including source:
All files that are left via the exception are closed.

@item @var{ior} values and meaning:
The @var{ior}s returned by the file and memory allocation words are
intended as throw codes. They typically are in the range
-512@minus{}-2047 of OS errors.  The mapping from OS error numbers to
@var{ior}s is -512@minus{}@var{errno}.

@item maximum depth of file input nesting:
limited by the amount of return stack, locals/TIB stack, and the number
of open files available. This should not give you troubles.

@item maximum size of input line:
@code{/line}. Currently 255.

@item methods of mapping block ranges to files:
Currently, the block words automatically access the file
@file{blocks.fb} in the currend working directory. More sophisticated
methods could be implemented if there is demand (and a volunteer).

@item number of string buffers provided by @code{S"}:
1

@item size of string buffer used by @code{S"}:
@code{/line}. currently 255.

@end table

@c ---------------------------------------------------------------------
@node file-ambcond,  , file-idef, The optional File-Access word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item attempting to position a file outside it's boundaries:
@code{REPOSITION-FILE} is performed as usual: Afterwards,
@code{FILE-POSITION} returns the value given to @code{REPOSITION-FILE}.

@item attempting to read from file positions not yet written:
End-of-file, i.e., zero characters are read and no error is reported.

@item @var{file-id} is invalid (@code{INCLUDE-FILE}):
An appropriate exception may be thrown, but a memory fault or other
problem is more probable.

@item I/O exception reading or closing @var{file-id} (@code{include-file}, @code{included}):
The @var{ior} produced by the operation, that discovered the problem, is
thrown.

@item named file cannot be opened (@code{included}):
The @var{ior} produced by @code{open-file} is thrown.

@item requesting an unmapped block number:
There are no unmapped legal block numbers. On some operating systems,
writing a block with a large number may overflow the file system and
have an error message as consequence.

@item using @code{source-id} when @code{blk} is non-zero:
@code{source-id} performs its function. Typically it will give the id of
the source which loaded the block. (Better ideas?)

@end table


@c =====================================================================
@node  The optional Floating-Point word set, The optional Locals word set, The optional File-Access word set, ANS conformance
@section The optional Floating-Point word set
@c =====================================================================

@menu
* floating-idef::               Implementation Defined Options
* floating-ambcond::            Ambiguous Conditions            
@end menu


@c ---------------------------------------------------------------------
@node floating-idef, floating-ambcond, The optional Floating-Point word set, The optional Floating-Point word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item format and range of floating point numbers:
System-dependent; the @code{double} type of C.

@item results of @code{REPRESENT} when @var{float} is out of range:
System dependent; @code{REPRESENT} is implemented using the C library
function @code{ecvt()} and inherits its behaviour in this respect.

@item rounding or truncation of floating-point numbers:
System dependent; the rounding behaviour is inherited from the hosting C
compiler. IEEE-FP-based (i.e., most) systems by default round to
nearest, and break ties by rounding to even (i.e., such that the last
bit of the mantissa is 0).

@item size of floating-point stack:
@code{s" FLOATING-STACK" environment? drop .}. Can be changed at startup
with the command-line option @code{-f}.

@item width of floating-point stack:
@code{1 floats}.

@end table


@c ---------------------------------------------------------------------
@node floating-ambcond,  , floating-idef, The optional Floating-Point word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item @code{df@@} or @code{df!} used with an address that is not double-float  aligned:
System-dependent. Typically results in an alignment fault like other
alignment violations.

@item @code{f@@} or @code{f!} used with an address that is not float  aligned:
System-dependent. Typically results in an alignment fault like other
alignment violations.

@item Floating-point result out of range:
System-dependent. Can result in a @code{-55 THROW} (Floating-point
unidentified fault), or can produce a special value representing, e.g.,
Infinity.

@item @code{sf@@} or @code{sf!} used with an address that is not single-float  aligned:
System-dependent. Typically results in an alignment fault like other
alignment violations.

@item BASE is not decimal (@code{REPRESENT}, @code{F.}, @code{FE.}, @code{FS.}):
The floating-point number is converted into decimal nonetheless.

@item Both arguments are equal to zero (@code{FATAN2}):
System-dependent. @code{FATAN2} is implemented using the C library
function @code{atan2()}.

@item Using ftan on an argument @var{r1} where cos(@var{r1}) is zero:
System-dependent. Anyway, typically the cos of @var{r1} will not be zero
because of small errors and the tan will be a very large (or very small)
but finite number.

@item @var{d} cannot be presented precisely as a float in @code{D>F}:
The result is rounded to the nearest float.

@item dividing by zero:
@code{-55 throw} (Floating-point unidentified fault)

@item exponent too big for conversion (@code{DF!}, @code{DF@@}, @code{SF!}, @code{SF@@}):
System dependent. On IEEE-FP based systems the number is converted into
an infinity.

@item @var{float}<1 (@code{facosh}):
@code{-55 throw} (Floating-point unidentified fault)

@item @var{float}=<-1 (@code{flnp1}):
@code{-55 throw} (Floating-point unidentified fault). On IEEE-FP systems
negative infinity is typically produced for @var{float}=-1.

@item @var{float}=<0 (@code{fln}, @code{flog}):
@code{-55 throw} (Floating-point unidentified fault). On IEEE-FP systems
negative infinity is typically produced for @var{float}=0.

@item @var{float}<0 (@code{fasinh}, @code{fsqrt}):
@code{-55 throw} (Floating-point unidentified fault). @code{fasinh}
produces values for these inputs on my Linux box (Bug in the C library?)

@item |@var{float}|>1 (@code{facos}, @code{fasin}, @code{fatanh}):
@code{-55 throw} (Floating-point unidentified fault).

@item integer part of float cannot be represented by @var{d} in @code{f>d}:
@code{-55 throw} (Floating-point unidentified fault).

@item string larger than pictured numeric output area (@code{f.}, @code{fe.}, @code{fs.}):
This does not happen.
@end table



@c =====================================================================
@node  The optional Locals word set, The optional Memory-Allocation word set, The optional Floating-Point word set, ANS conformance
@section The optional Locals word set
@c =====================================================================

@menu
* locals-idef::                 Implementation Defined Options                 
* locals-ambcond::              Ambiguous Conditions              
@end menu


@c ---------------------------------------------------------------------
@node locals-idef, locals-ambcond, The optional Locals word set, The optional Locals word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item maximum number of locals in a definition:
@code{s" #locals" environment? drop .}. Currently 15. This is a lower
bound, e.g., on a 32-bit machine there can be 41 locals of up to 8
characters. The number of locals in a definition is bounded by the size
of locals-buffer, which contains the names of the locals.

@end table


@c ---------------------------------------------------------------------
@node locals-ambcond,  , locals-idef, The optional Locals word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item executing a named local in interpretation state:
@code{-14 throw} (Interpreting a compile-only word).

@item @var{name} not defined by @code{VALUE} or @code{(LOCAL)} (@code{TO}):
@code{-32 throw} (Invalid name argument)

@end table


@c =====================================================================
@node  The optional Memory-Allocation word set, The optional Programming-Tools word set, The optional Locals word set, ANS conformance
@section The optional Memory-Allocation word set
@c =====================================================================

@menu
* memory-idef::                 Implementation Defined Options                 
@end menu


@c ---------------------------------------------------------------------
@node memory-idef,  , The optional Memory-Allocation word set, The optional Memory-Allocation word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item values and meaning of @var{ior}:
The @var{ior}s returned by the file and memory allocation words are
intended as throw codes. They typically are in the range
-512@minus{}-2047 of OS errors.  The mapping from OS error numbers to
@var{ior}s is -512@minus{}@var{errno}.

@end table

@c =====================================================================
@node  The optional Programming-Tools word set, The optional Search-Order word set, The optional Memory-Allocation word set, ANS conformance
@section The optional Programming-Tools word set
@c =====================================================================

@menu
* programming-idef::            Implementation Defined Options            
* programming-ambcond::         Ambiguous Conditions         
@end menu


@c ---------------------------------------------------------------------
@node programming-idef, programming-ambcond, The optional Programming-Tools word set, The optional Programming-Tools word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item ending sequence for input following @code{;code} and @code{code}:
Not implemented (yet).

@item manner of processing input following @code{;code} and @code{code}:
Not implemented (yet).

@item search order capability for @code{EDITOR} and @code{ASSEMBLER}:
Not implemented (yet). If they were implemented, they would use the
search order wordset.

@item source and format of display by @code{SEE}:
The source for @code{see} is the intermediate code used by the inner
interpreter.  The current @code{see} tries to output Forth source code
as well as possible.

@end table

@c ---------------------------------------------------------------------
@node programming-ambcond,  , programming-idef, The optional Programming-Tools word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item deleting the compilation wordlist (@code{FORGET}):
Not implemented (yet).

@item fewer than @var{u}+1 items on the control flow stack (@code{CS-PICK}, @code{CS-ROLL}):
This typically results in an @code{abort"} with a descriptive error
message (may change into a @code{-22 throw} (Control structure mismatch)
in the future). You may also get a memory access error. If you are
unlucky, this ambiguous condition is not caught.

@item @var{name} can't be found (@code{forget}):
Not implemented (yet).

@item @var{name} not defined via @code{CREATE}:
@code{;code} is not implemented (yet). If it were, it would behave like
@code{DOES>} in this respect, i.e., change the execution semantics of
the last defined word no matter how it was defined.

@item @code{POSTPONE} applied to @code{[IF]}:
After defining @code{: X POSTPONE [IF] ; IMMEDIATE}. @code{X} is
equivalent to @code{[IF]}.

@item reaching the end of the input source before matching @code{[ELSE]} or @code{[THEN]}:
Continue in the same state of conditional compilation in the next outer
input source. Currently there is no warning to the user about this.

@item removing a needed definition (@code{FORGET}):
Not implemented (yet).

@end table


@c =====================================================================
@node  The optional Search-Order word set,  , The optional Programming-Tools word set, ANS conformance
@section The optional Search-Order word set
@c =====================================================================

@menu
* search-idef::                 Implementation Defined Options                 
* search-ambcond::              Ambiguous Conditions              
@end menu


@c ---------------------------------------------------------------------
@node search-idef, search-ambcond, The optional Search-Order word set, The optional Search-Order word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------

@table @i

@item maximum number of word lists in search order:
@code{s" wordlists" environment? drop .}. Currently 16.

@item minimum search order:
@code{root root}.

@end table

@c ---------------------------------------------------------------------
@node search-ambcond,  , search-idef, The optional Search-Order word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------

@table @i

@item changing the compilation wordlist (during compilation):
The definition is put into the wordlist that is the compilation wordlist
when @code{REVEAL} is executed (by @code{;}, @code{DOES>},
@code{RECURSIVE}, etc.).

@item search order empty (@code{previous}):
@code{abort" Vocstack empty"}.

@item too many word lists in search order (@code{also}):
@code{abort" Vocstack full"}.

@end table


@node Model, Emacs and Gforth, ANS conformance, Top
@chapter Model

@node Emacs and Gforth, Internals, Model, Top
@chapter Emacs and Gforth

Gforth comes with @file{gforth.el}, an improved version of
@file{forth.el} by Goran Rydqvist (icluded in the TILE package). The
improvements are a better (but still not perfect) handling of
indentation. I have also added comment paragraph filling (@kbd{M-q}),
commenting (@kbd{C-x \}) and uncommenting (@kbd{C-u C-x \}) regions and
removing debugging tracers (@kbd{C-x ~}, @pxref{Debugging}). I left the
stuff I do not use alone, even though some of it only makes sense for
TILE. To get a description of these features, enter Forth mode and type
@kbd{C-h m}.

In addition, Gforth supports Emacs quite well: The source code locations
given in error messages, debugging output (from @code{~~}) and failed
assertion messages are in the right format for Emacs' compilation mode
(@pxref{Compilation, , Running Compilations under Emacs, emacs, Emacs
Manual}) so the source location corresponding to an error or other
message is only a few keystrokes away (@kbd{C-x `} for the next error,
@kbd{C-c C-c} for the error under the cursor).

Also, if you @code{include} @file{etags.fs}, a new @file{TAGS} file
(@pxref{Tags, , Tags Tables, emacs, Emacs Manual}) will be produced that
contains the definitions of all words defined afterwards. You can then
find the source for a word using @kbd{M-.}. Note that emacs can use
several tags files at the same time (e.g., one for the Gforth sources
and one for your program, @pxref{Select Tags Table,,Selecting a Tags
Table,emacs, Emacs Manual}). The TAGS file for the preloaded words is
@file{$(datadir)/gforth/$(VERSION)/TAGS} (e.g.,
@file{/usr/local/share/gforth/0.2/TAGS}).

To get all these benefits, add the following lines to your @file{.emacs}
file:

@example
(autoload 'forth-mode "gforth.el")
(setq auto-mode-alist (cons '("\\.fs\\'" . forth-mode) auto-mode-alist))
@end example

@node Internals, Bugs, Emacs and Gforth, Top
@chapter Internals

Reading this section is not necessary for programming with Gforth. It
should be helpful for finding your way in the Gforth sources.

The ideas in this section have also been published in the papers
@cite{ANS fig/GNU/??? Forth} (in German) by Bernd Paysan, presented at
the Forth-Tagung '93 and @cite{A Portable Forth Engine} by M. Anton
Ertl, presented at EuroForth '93; the latter is available at
@*@file{http://www.complang.tuwien.ac.at/papers/ertl93.ps.Z}.

@menu
* Portability::                 
* Threading::                   
* Primitives::                  
* System Architecture::         
* Performance::                 
@end menu

@node Portability, Threading, Internals, Internals
@section Portability

One of the main goals of the effort is availability across a wide range
of personal machines. fig-Forth, and, to a lesser extent, F83, achieved
this goal by manually coding the engine in assembly language for several
then-popular processors. This approach is very labor-intensive and the
results are short-lived due to progress in computer architecture.

Others have avoided this problem by coding in C, e.g., Mitch Bradley
(cforth), Mikael Patel (TILE) and Dirk Zoller (pfe). This approach is
particularly popular for UNIX-based Forths due to the large variety of
architectures of UNIX machines. Unfortunately an implementation in C
does not mix well with the goals of efficiency and with using
traditional techniques: Indirect or direct threading cannot be expressed
in C, and switch threading, the fastest technique available in C, is
significantly slower. Another problem with C is that it's very
cumbersome to express double integer arithmetic.

Fortunately, there is a portable language that does not have these
limitations: GNU C, the version of C processed by the GNU C compiler
(@pxref{C Extensions, , Extensions to the C Language Family, gcc.info,
GNU C Manual}). Its labels as values feature (@pxref{Labels as Values, ,
Labels as Values, gcc.info, GNU C Manual}) makes direct and indirect
threading possible, its @code{long long} type (@pxref{Long Long, ,
Double-Word Integers, gcc.info, GNU C Manual}) corresponds to Forths
double numbers. GNU C is available for free on all important (and many
unimportant) UNIX machines, VMS, 80386s running MS-DOS, the Amiga, and
the Atari ST, so a Forth written in GNU C can run on all these
machines.

Writing in a portable language has the reputation of producing code that
is slower than assembly. For our Forth engine we repeatedly looked at
the code produced by the compiler and eliminated most compiler-induced
inefficiencies by appropriate changes in the source-code.

However, register allocation cannot be portably influenced by the
programmer, leading to some inefficiencies on register-starved
machines. We use explicit register declarations (@pxref{Explicit Reg
Vars, , Variables in Specified Registers, gcc.info, GNU C Manual}) to
improve the speed on some machines. They are turned on by using the
@code{gcc} switch @code{-DFORCE_REG}. Unfortunately, this feature not
only depends on the machine, but also on the compiler version: On some
machines some compiler versions produce incorrect code when certain
explicit register declarations are used. So by default
@code{-DFORCE_REG} is not used.

@node Threading, Primitives, Portability, Internals
@section Threading

GNU C's labels as values extension (available since @code{gcc-2.0},
@pxref{Labels as Values, , Labels as Values, gcc.info, GNU C Manual})
makes it possible to take the address of @var{label} by writing
@code{&&@var{label}}.  This address can then be used in a statement like
@code{goto *@var{address}}. I.e., @code{goto *&&x} is the same as
@code{goto x}.

With this feature an indirect threaded NEXT looks like:
@example
cfa = *ip++;
ca = *cfa;
goto *ca;
@end example
For those unfamiliar with the names: @code{ip} is the Forth instruction
pointer; the @code{cfa} (code-field address) corresponds to ANS Forths
execution token and points to the code field of the next word to be
executed; The @code{ca} (code address) fetched from there points to some
executable code, e.g., a primitive or the colon definition handler
@code{docol}.

Direct threading is even simpler:
@example
ca = *ip++;
goto *ca;
@end example

Of course we have packaged the whole thing neatly in macros called
@code{NEXT} and @code{NEXT1} (the part of NEXT after fetching the cfa).

@menu
* Scheduling::                  
* Direct or Indirect Threaded?::  
* DOES>::                       
@end menu

@node Scheduling, Direct or Indirect Threaded?, Threading, Threading
@subsection Scheduling

There is a little complication: Pipelined and superscalar processors,
i.e., RISC and some modern CISC machines can process independent
instructions while waiting for the results of an instruction. The
compiler usually reorders (schedules) the instructions in a way that
achieves good usage of these delay slots. However, on our first tries
the compiler did not do well on scheduling primitives. E.g., for
@code{+} implemented as
@example
n=sp[0]+sp[1];
sp++;
sp[0]=n;
NEXT;
@end example
the NEXT comes strictly after the other code, i.e., there is nearly no
scheduling. After a little thought the problem becomes clear: The
compiler cannot know that sp and ip point to different addresses (and
the version of @code{gcc} we used would not know it even if it was
possible), so it could not move the load of the cfa above the store to
the TOS. Indeed the pointers could be the same, if code on or very near
the top of stack were executed. In the interest of speed we chose to
forbid this probably unused ``feature'' and helped the compiler in
scheduling: NEXT is divided into the loading part (@code{NEXT_P1}) and
the goto part (@code{NEXT_P2}). @code{+} now looks like:
@example
n=sp[0]+sp[1];
sp++;
NEXT_P1;
sp[0]=n;
NEXT_P2;
@end example
This can be scheduled optimally by the compiler.

This division can be turned off with the switch @code{-DCISC_NEXT}. This
switch is on by default on machines that do not profit from scheduling
(e.g., the 80386), in order to preserve registers.

@node Direct or Indirect Threaded?, DOES>, Scheduling, Threading
@subsection Direct or Indirect Threaded?

Both! After packaging the nasty details in macro definitions we
realized that we could switch between direct and indirect threading by
simply setting a compilation flag (@code{-DDIRECT_THREADED}) and
defining a few machine-specific macros for the direct-threading case.
On the Forth level we also offer access words that hide the
differences between the threading methods (@pxref{Threading Words}).

Indirect threading is implemented completely
machine-independently. Direct threading needs routines for creating
jumps to the executable code (e.g. to docol or dodoes). These routines
are inherently machine-dependent, but they do not amount to many source
lines. I.e., even porting direct threading to a new machine is a small
effort.

@node DOES>,  , Direct or Indirect Threaded?, Threading
@subsection DOES>
One of the most complex parts of a Forth engine is @code{dodoes}, i.e.,
the chunk of code executed by every word defined by a
@code{CREATE}...@code{DOES>} pair. The main problem here is: How to find
the Forth code to be executed, i.e. the code after the @code{DOES>} (the
DOES-code)? There are two solutions:

In fig-Forth the code field points directly to the dodoes and the
DOES-code address is stored in the cell after the code address
(i.e. at cfa cell+). It may seem that this solution is illegal in the
Forth-79 and all later standards, because in fig-Forth this address
lies in the body (which is illegal in these standards). However, by
making the code field larger for all words this solution becomes legal
again. We use this approach for the indirect threaded version. Leaving
a cell unused in most words is a bit wasteful, but on the machines we
are targetting this is hardly a problem. The other reason for having a
code field size of two cells is to avoid having different image files
for direct and indirect threaded systems (@pxref{System Architecture}).

The other approach is that the code field points or jumps to the cell
after @code{DOES}. In this variant there is a jump to @code{dodoes} at
this address. @code{dodoes} can then get the DOES-code address by
computing the code address, i.e., the address of the jump to dodoes,
and add the length of that jump field. A variant of this is to have a
call to @code{dodoes} after the @code{DOES>}; then the return address
(which can be found in the return register on RISCs) is the DOES-code
address. Since the two cells available in the code field are usually
used up by the jump to the code address in direct threading, we use
this approach for direct threading. We did not want to add another
cell to the code field.

@node Primitives, System Architecture, Threading, Internals
@section Primitives

@menu
* Automatic Generation::        
* TOS Optimization::            
* Produced code::               
@end menu

@node Automatic Generation, TOS Optimization, Primitives, Primitives
@subsection Automatic Generation

Since the primitives are implemented in a portable language, there is no
longer any need to minimize the number of primitives. On the contrary,
having many primitives is an advantage: speed. In order to reduce the
number of errors in primitives and to make programming them easier, we
provide a tool, the primitive generator (@file{prims2x.fs}), that
automatically generates most (and sometimes all) of the C code for a
primitive from the stack effect notation.  The source for a primitive
has the following form:

@format
@var{Forth-name}	@var{stack-effect}	@var{category}	[@var{pronounc.}]
[@code{""}@var{glossary entry}@code{""}]
@var{C code}
[@code{:}
@var{Forth code}]
@end format

The items in brackets are optional. The category and glossary fields
are there for generating the documentation, the Forth code is there
for manual implementations on machines without GNU C. E.g., the source
for the primitive @code{+} is:
@example
+    n1 n2 -- n    core    plus
n = n1+n2;
@end example

This looks like a specification, but in fact @code{n = n1+n2} is C
code. Our primitive generation tool extracts a lot of information from
the stack effect notations@footnote{We use a one-stack notation, even
though we have separate data and floating-point stacks; The separate
notation can be generated easily from the unified notation.}: The number
of items popped from and pushed on the stack, their type, and by what
name they are referred to in the C code. It then generates a C code
prelude and postlude for each primitive. The final C code for @code{+}
looks like this:

@example
I_plus:	/* + ( n1 n2 -- n ) */  /* label, stack effect */
/*  */                          /* documentation */
@{
DEF_CA                          /* definition of variable ca (indirect threading) */
Cell n1;                        /* definitions of variables */
Cell n2;
Cell n;
n1 = (Cell) sp[1];              /* input */
n2 = (Cell) TOS;
sp += 1;                        /* stack adjustment */
NAME("+")                       /* debugging output (with -DDEBUG) */
@{
n = n1+n2;                      /* C code taken from the source */
@}
NEXT_P1;                        /* NEXT part 1 */
TOS = (Cell)n;                  /* output */
NEXT_P2;                        /* NEXT part 2 */
@}
@end example

This looks long and inefficient, but the GNU C compiler optimizes quite
well and produces optimal code for @code{+} on, e.g., the R3000 and the
HP RISC machines: Defining the @code{n}s does not produce any code, and
using them as intermediate storage also adds no cost.

There are also other optimizations, that are not illustrated by this
example: Assignments between simple variables are usually for free (copy
propagation). If one of the stack items is not used by the primitive
(e.g.  in @code{drop}), the compiler eliminates the load from the stack
(dead code elimination). On the other hand, there are some things that
the compiler does not do, therefore they are performed by
@file{prims2x.fs}: The compiler does not optimize code away that stores
a stack item to the place where it just came from (e.g., @code{over}).

While programming a primitive is usually easy, there are a few cases
where the programmer has to take the actions of the generator into
account, most notably @code{?dup}, but also words that do not (always)
fall through to NEXT.

@node TOS Optimization, Produced code, Automatic Generation, Primitives
@subsection TOS Optimization

An important optimization for stack machine emulators, e.g., Forth
engines, is keeping  one or more of the top stack items in
registers.  If a word has the stack effect @var{in1}...@var{inx} @code{--}
@var{out1}...@var{outy}, keeping the top @var{n} items in registers
@itemize
@item
is better than keeping @var{n-1} items, if @var{x>=n} and @var{y>=n},
due to fewer loads from and stores to the stack.
@item is slower than keeping @var{n-1} items, if @var{x<>y} and @var{x<n} and
@var{y<n}, due to additional moves between registers.
@end itemize

In particular, keeping one item in a register is never a disadvantage,
if there are enough registers. Keeping two items in registers is a
disadvantage for frequent words like @code{?branch}, constants,
variables, literals and @code{i}. Therefore our generator only produces
code that keeps zero or one items in registers. The generated C code
covers both cases; the selection between these alternatives is made at
C-compile time using the switch @code{-DUSE_TOS}. @code{TOS} in the C
code for @code{+} is just a simple variable name in the one-item case,
otherwise it is a macro that expands into @code{sp[0]}. Note that the
GNU C compiler tries to keep simple variables like @code{TOS} in
registers, and it usually succeeds, if there are enough registers.

The primitive generator performs the TOS optimization for the
floating-point stack, too (@code{-DUSE_FTOS}). For floating-point
operations the benefit of this optimization is even larger:
floating-point operations take quite long on most processors, but can be
performed in parallel with other operations as long as their results are
not used. If the FP-TOS is kept in a register, this works. If
it is kept on the stack, i.e., in memory, the store into memory has to
wait for the result of the floating-point operation, lengthening the
execution time of the primitive considerably.

The TOS optimization makes the automatic generation of primitives a
bit more complicated. Just replacing all occurrences of @code{sp[0]} by
@code{TOS} is not sufficient. There are some special cases to
consider:
@itemize
@item In the case of @code{dup ( w -- w w )} the generator must not
eliminate the store to the original location of the item on the stack,
if the TOS optimization is turned on.
@item Primitives with stack effects of the form @code{--}
@var{out1}...@var{outy} must store the TOS to the stack at the start.
Likewise, primitives with the stack effect @var{in1}...@var{inx} @code{--}
must load the TOS from the stack at the end. But for the null stack
effect @code{--} no stores or loads should be generated.
@end itemize

@node Produced code,  , TOS Optimization, Primitives
@subsection Produced code

To see what assembly code is produced for the primitives on your machine
with your compiler and your flag settings, type @code{make engine.s} and
look at the resulting file @file{engine.s}.

@node System Architecture, Performance, Primitives, Internals
@section System Architecture

Our Forth system consists not only of primitives, but also of
definitions written in Forth. Since the Forth compiler itself belongs
to those definitions, it is not possible to start the system with the
primitives and the Forth source alone. Therefore we provide the Forth
code as an image file in nearly executable form. At the start of the
system a C routine loads the image file into memory, sets up the
memory (stacks etc.) according to information in the image file, and
starts executing Forth code.

The image file format is a compromise between the goals of making it
easy to generate image files and making them portable. The easiest way
to generate an image file is to just generate a memory dump. However,
this kind of image file cannot be used on a different machine, or on
the next version of the engine on the same machine, it even might not
work with the same engine compiled by a different version of the C
compiler. We would like to have as few versions of the image file as
possible, because we do not want to distribute many versions of the
same image file, and to make it easy for the users to use their image
files on many machines. We currently need to create a different image
file for machines with different cell sizes and different byte order
(little- or big-endian)@footnote{We are considering adding information to the
image file that enables the loader to change the byte order.}.

Forth code that is going to end up in a portable image file has to
comply to some restrictions: addresses have to be stored in memory with
special words (@code{A!}, @code{A,}, etc.) in order to make the code
relocatable. Cells, floats, etc., have to be stored at the natural
alignment boundaries@footnote{E.g., store floats (8 bytes) at an address
dividable by~8. This happens automatically in our system when you use
the ANS Forth alignment words.}, in order to avoid alignment faults on
machines with stricter alignment. The image file is produced by a
metacompiler (@file{cross.fs}).

So, unlike the image file of Mitch Bradleys @code{cforth}, our image
file is not directly executable, but has to undergo some manipulations
during loading. Address relocation is performed at image load-time, not
at run-time. The loader also has to replace tokens standing for
primitive calls with the appropriate code-field addresses (or code
addresses in the case of direct threading).

@node  Performance,  , System Architecture, Internals
@section Performance

On RISCs the Gforth engine is very close to optimal; i.e., it is usually
impossible to write a significantly faster engine.

On register-starved machines like the 386 architecture processors
improvements are possible, because @code{gcc} does not utilize the
registers as well as a human, even with explicit register declarations;
e.g., Bernd Beuster wrote a Forth system fragment in assembly language
and hand-tuned it for the 486; this system is 1.19 times faster on the
Sieve benchmark on a 486DX2/66 than Gforth compiled with
@code{gcc-2.6.3} with @code{-DFORCE_REG}.

However, this potential advantage of assembly language implementations
is not necessarily realized in complete Forth systems: We compared
Gforth (direct threaded, compiled with @code{gcc-2.6.3} and
@code{-DFORCE_REG}) with Win32Forth 1.2093, LMI's NT Forth (Beta, May
1994) and Eforth (with and without peephole (aka pinhole) optimization
of the threaded code); all these systems were written in assembly
language. We also compared Gforth with three systems written in C:
PFE-0.9.11 (compiled with @code{gcc-2.6.3} with the default
configuration for Linux: @code{-O2 -fomit-frame-pointer -DUSE_REGS}),
ThisForth Beta (compiled with gcc-2.6.3 -O3 -fomit-frame-pointer;
ThisForth employs peephole optimization of the threaded code) and TILE
(compiled with @code{make opt}). We benchmarked Gforth, PFE, ThisForth
and TILE on a 486DX2/66 under Linux. Kenneth O'Heskin kindly provided
the results for Win32Forth and NT Forth on a 486DX2/66 with similar
memory performance under Windows NT. Marcel Hendrix ported Eforth to
Linux, then extended it to run the benchmarks, added the peephole
optimizer, ran the benchmarks and reported the results.
 
We used four small benchmarks: the ubiquitous Sieve; bubble-sorting and
matrix multiplication come from the Stanford integer benchmarks and have
been translated into Forth by Martin Fraeman; we used the versions
included in the TILE Forth package, but with bigger data set sizes; and
a recursive Fibonacci number computation for benchmarking calling
performance. The following table shows the time taken for the benchmarks
scaled by the time taken by Gforth (in other words, it shows the speedup
factor that Gforth achieved over the other systems).

@example
relative      Win32-    NT       eforth       This-
  time  Gforth Forth Forth eforth  +opt   PFE Forth  TILE
sieve     1.00  1.39  1.14   1.39  0.85  1.78  3.18  8.58
bubble    1.00  1.31  1.41   1.48  0.88  1.67        3.88
matmul    1.00  1.47  1.35   1.46  1.16  2.36        4.09
fib       1.00  1.52  1.34   1.22  1.13  1.93  2.99  4.30
@end example

You may find the good performance of Gforth compared with the systems
written in assembly language quite surprising. One important reason for
the disappointing performance of these systems is probably that they are
not written optimally for the 486 (e.g., they use the @code{lods}
instruction). In addition, Win32Forth uses a comfortable, but costly
method for relocating the Forth image: like @code{cforth}, it computes
the actual addresses at run time, resulting in two address computations
per NEXT (@pxref{System Architecture}).

Only Eforth with the peephole optimizer performs comparable to
Gforth. The speedups achieved with peephole optimization of threaded
code are quite remarkable. Adding a peephole optimizer to Gforth should
cause similar speedups.

The speedup of Gforth over PFE, ThisForth and TILE can be easily
explained with the self-imposed restriction to standard C, which makes
efficient threading impossible (however, the measured implementation of
PFE uses a GNU C extension: @ref{Global Reg Vars, , Defining Global
Register Variables, gcc.info, GNU C Manual}).  Moreover, current C
compilers have a hard time optimizing other aspects of the ThisForth
and the TILE source.

Note that the performance of Gforth on 386 architecture processors
varies widely with the version of @code{gcc} used. E.g., @code{gcc-2.5.8}
failed to allocate any of the virtual machine registers into real
machine registers by itself and would not work correctly with explicit
register declarations, giving a 1.3 times slower engine (on a 486DX2/66
running the Sieve) than the one measured above.

In @cite{Translating Forth to Efficient C} by M. Anton Ertl and Martin
Maierhofer (presented at EuroForth '95), an indirect threaded version of
Gforth is compared with Win32Forth, NT Forth, PFE, and ThisForth; that
version of Gforth is 2\%@minus{}8\% slower on a 486 than the version
used here. The paper available at
@*@file{http://www.complang.tuwien.ac.at/papers/ertl&maierhofer95.ps.gz};
it also contains numbers for some native code systems. You can find
numbers for Gforth on various machines in @file{Benchres}.

@node Bugs, Origin, Internals, Top
@chapter Bugs

Known bugs are described in the file BUGS in the Gforth distribution.

If you find a bug, please send a bug report to
@code{gforth-bugs@@mips.complang.tuwien.ac.at}. A bug report should
describe the Gforth version used (it is announced at the start of an
interactive Gforth session), the machine and operating system (on Unix
systems you can use @code{uname -a} to produce this information), the
installation options (send the @code{config.status} file), and a
complete list of changes you (or your installer) have made to the Gforth
sources (if any); it should contain a program (or a sequence of keyboard
commands) that reproduces the bug and a description of what you think
constitutes the buggy behaviour.

For a thorough guide on reporting bugs read @ref{Bug Reporting, , How
to Report Bugs, gcc.info, GNU C Manual}.


@node Origin, Word Index, Bugs, Top
@chapter Authors and Ancestors of Gforth

@section Authors and Contributors

The Gforth project was started in mid-1992 by Bernd Paysan and Anton
Ertl. The third major author was Jens Wilke.  Lennart Benschop (who was
one of Gforth's first users, in mid-1993) and Stuart Ramsden inspired us
with their continuous feedback. Lennart Benshop contributed
@file{glosgen.fs}, while Stuart Ramsden has been working on automatic
support for calling C libraries. Helpful comments also came from Paul
Kleinrubatscher, Christian Pirker, Dirk Zoller and Marcel Hendrix.

Gforth also owes a lot to the authors of the tools we used (GCC, CVS,
and autoconf, among others), and to the creators of the Internet: Gforth
was developed across the Internet, and its authors have not met
physically yet.

@section Pedigree

Gforth descends from BigForth (1993) and fig-Forth. Gforth and PFE (by
Dirk Zoller) will cross-fertilize each other. Of course, a significant
part of the design of Gforth was prescribed by ANS Forth.

Bernd Paysan wrote BigForth, a descendent from TurboForth, an unreleased
32 bit native code version of VolksForth for the Atari ST, written
mostly by Dietrich Weineck.

VolksForth descends from F83. It was written by Klaus Schleisiek, Bernd
Pennemann, Georg Rehfeld and Dietrich Weineck for the C64 (called
UltraForth there) in the mid-80s and ported to the Atari ST in 1986.

Hennry Laxen and Mike Perry wrote F83 as a model implementation of the
Forth-83 standard. !! Pedigree? When?

A team led by Bill Ragsdale implemented fig-Forth on many processors in
1979. Robert Selzer and Bill Ragsdale developed the original
implementation of fig-Forth for the 6502 based on microForth.

The principal architect of microForth was Dean Sanderson. microForth was
FORTH, Inc.'s first off-the-shelf product. It was developped in 1976 for
the 1802, and subsequently implemented on the 8080, the 6800 and the
Z80.

All earlier Forth systems were custom-made, usually by Charles Moore,
who discovered (as he puts it) Forth during the late 60s. The first full
Forth existed in 1971.

A part of the information in this section comes from @cite{The Evolution
of Forth} by Elizabeth D. Rather, Donald R. Colburn and Charles
H. Moore, presented at the HOPL-II conference and preprinted in SIGPLAN
Notices 28(3), 1993.  You can find more historical and genealogical
information about Forth there.

@node Word Index, Node Index, Origin, Top
@chapter Word Index

This index is as incomplete as the manual. Each word is listed with
stack effect and wordset.

@printindex fn

@node Node Index,  , Word Index, Top
@chapter Node Index

This index is even less complete than the manual.

@contents
@bye

