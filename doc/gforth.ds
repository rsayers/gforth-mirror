\input texinfo   @c -*-texinfo-*-
@comment The source is gforth.ds, from which gforth.texi is generated
@comment %**start of header (This is for running Texinfo on a region.)
@setfilename gforth.info
@settitle Gforth Manual
@dircategory GNU programming tools
@direntry
* Gforth: (gforth).             A fast interpreter for the Forth language.
@end direntry
@comment @setchapternewpage odd
@macro progstyle {}
Programming style note:
@end macro
@comment %**end of header (This is for running Texinfo on a region.)

@include version.texi

@ifinfo
This file documents Gforth @value{VERSION}

Copyright @copyright{} 1995-1998 Free Software Foundation, Inc.

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission notice
     are preserved on all copies.
     
@ignore
     Permission is granted to process this file through TeX and print the
     results, provided the printed document carries a copying permission
     notice identical to this one except for the removal of this paragraph
     (this paragraph not being relevant to the printed manual).
     
@end ignore
     Permission is granted to copy and distribute modified versions of this
     manual under the conditions for verbatim copying, provided also that the
     sections entitled "Distribution" and "General Public License" are
     included exactly as in the original, and provided that the entire
     resulting derived work is distributed under the terms of a permission
     notice identical to this one.
     
     Permission is granted to copy and distribute translations of this manual
     into another language, under the above conditions for modified versions,
     except that the sections entitled "Distribution" and "General Public
     License" may be included in a translation approved by the author instead
     of in the original English.
@end ifinfo

@finalout
@titlepage
@sp 10
@center @titlefont{Gforth Manual}
@sp 2
@center for version @value{VERSION}
@sp 2
@center Anton Ertl
@center Bernd Paysan
@center Jens Wilke
@sp 3
@center This manual is permanently under construction

@comment  The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995--1998 Free Software Foundation, Inc.

@comment !! Published by ... or You can get a copy of this manual ...

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission notice
     are preserved on all copies.
     
     Permission is granted to copy and distribute modified versions of this
     manual under the conditions for verbatim copying, provided also that the
     sections entitled "Distribution" and "General Public License" are
     included exactly as in the original, and provided that the entire
     resulting derived work is distributed under the terms of a permission
     notice identical to this one.
     
     Permission is granted to copy and distribute translations of this manual
     into another language, under the above conditions for modified versions,
     except that the sections entitled "Distribution" and "General Public
     License" may be included in a translation approved by the author instead
     of in the original English.
@end titlepage


@node Top, License, (dir), (dir)
@ifinfo
Gforth is a free implementation of ANS Forth available on many
personal machines. This manual corresponds to version @value{VERSION}.
@end ifinfo

@menu
* License::                     
* Goals::                       About the Gforth Project
* Other Books::                 Things you might want to read
* Invoking Gforth::             Starting Gforth
* Words::                       Forth words available in Gforth
* Tools::                       Programming tools
* ANS conformance::             Implementation-defined options etc.
* Model::                       The abstract machine of Gforth
* Integrating Gforth::          Forth as scripting language for applications
* Emacs and Gforth::            The Gforth Mode
* Image Files::                 @code{.fi} files contain compiled code
* Engine::                      The inner interpreter and the primitives
* Cross Compiler::              The Cross Compiler
* Bugs::                        How to report them
* Origin::                      Authors and ancestors of Gforth
* Word Index::                  An item for each Forth word
* Concept Index::               A menu covering many topics

 --- The Detailed Node Listing ---

Forth Words

* Notation::                    
* Arithmetic::                  
* Stack Manipulation::          
* Memory::                      
* Control Structures::          
* Locals::                      
* Defining Words::              
* Structures::                  
* Object-oriented Forth::       
* Tokens for Words::            
* Wordlists::                   
* Files::                       
* Including Files::             
* Blocks::                      
* Other I/O::                   
* Programming Tools::           
* Assembler and Code Words::    
* Threading Words::             

Arithmetic

* Single precision::            
* Bitwise operations::          
* Mixed precision::             operations with single and double-cell integers
* Double precision::            Double-cell integer arithmetic
* Floating Point::              

Stack Manipulation

* Data stack::                  
* Floating point stack::        
* Return stack::                
* Locals stack::                
* Stack pointer manipulation::  

Memory

* Memory Access::      
* Address arithmetic::          
* Memory Blocks::         

Control Structures

* Selection::                   
* Simple Loops::                
* Counted Loops::               
* Arbitrary control structures::  
* Calls and returns::           
* Exception Handling::          

Locals

* Gforth locals::               
* ANS Forth locals::            

Gforth locals

* Where are locals visible by name?::  
* How long do locals live?::    
* Programming Style::           
* Implementation::              

Defining Words

* Simple Defining Words::       
* Colon Definitions::           
* User-defined Defining Words::  
* Supplying names::             
* Interpretation and Compilation Semantics::  

Structures

* Why explicit structure support?::  
* Structure Usage::             
* Structure Naming Convention::  
* Structure Implementation::    
* Structure Glossary::          

Object-oriented Forth

* Objects::                     
* OOF::                         
* Mini-OOF::                    

Objects

* Properties of the Objects model::  
* Why object-oriented programming?::  
* Object-Oriented Terminology::  
* Basic Objects Usage::         
* The class Object::            
* Creating objects::            
* Object-Oriented Programming Style::  
* Class Binding::               
* Method conveniences::         
* Classes and Scoping::         
* Object Interfaces::           
* Objects Implementation::      
* Comparison with other object models::  
* Objects Glossary::            

OOF

* Properties of the OOF model::
* Basic OOF Usage::
* The base class object::
* Class Declaration::
* Class Implementation::

Including Files

* Words for Including::         
* Search Path::                 
* Changing the Search Path::    
* General Search Paths::        

Programming Tools

* Debugging::                   Simple and quick.
* Assertions::                  Making your programs self-checking.
* Singlestep Debugger::		Executing your program word by word.

Tools

* ANS Report::                  Report the words used, sorted by wordset.

ANS conformance

* The Core Words::              
* The optional Block word set::  
* The optional Double Number word set::  
* The optional Exception word set::  
* The optional Facility word set::  
* The optional File-Access word set::  
* The optional Floating-Point word set::  
* The optional Locals word set::  
* The optional Memory-Allocation word set::  
* The optional Programming-Tools word set::  
* The optional Search-Order word set::  

The Core Words

* core-idef::                   Implementation Defined Options                   
* core-ambcond::                Ambiguous Conditions                
* core-other::                  Other System Documentation                  

The optional Block word set

* block-idef::                  Implementation Defined Options
* block-ambcond::               Ambiguous Conditions               
* block-other::                 Other System Documentation                 

The optional Double Number word set

* double-ambcond::              Ambiguous Conditions              

The optional Exception word set

* exception-idef::              Implementation Defined Options              

The optional Facility word set

* facility-idef::               Implementation Defined Options               
* facility-ambcond::            Ambiguous Conditions            

The optional File-Access word set

* file-idef::                   Implementation Defined Options
* file-ambcond::                Ambiguous Conditions                

The optional Floating-Point word set

* floating-idef::               Implementation Defined Options
* floating-ambcond::            Ambiguous Conditions            

The optional Locals word set

* locals-idef::                 Implementation Defined Options                 
* locals-ambcond::              Ambiguous Conditions              

The optional Memory-Allocation word set

* memory-idef::                 Implementation Defined Options                 

The optional Programming-Tools word set

* programming-idef::            Implementation Defined Options            
* programming-ambcond::         Ambiguous Conditions         

The optional Search-Order word set

* search-idef::                 Implementation Defined Options                 
* search-ambcond::              Ambiguous Conditions              

Image Files

* Image File Background::          Why have image files?
* Non-Relocatable Image Files::    don't always work.
* Data-Relocatable Image Files::   are better.
* Fully Relocatable Image Files::  better yet.
* Stack and Dictionary Sizes::     Setting the default sizes for an image.
* Running Image Files::            @code{gforth -i @var{file}} or @var{file}.
* Modifying the Startup Sequence:: and turnkey applications.

Fully Relocatable Image Files

* gforthmi::            The normal way
* cross.fs::                    The hard way

Engine

* Portability::                 
* Threading::                   
* Primitives::                  
* Performance::                 

Threading

* Scheduling::                  
* Direct or Indirect Threaded?::  
* DOES>::                       

Primitives

* Automatic Generation::        
* TOS Optimization::            
* Produced code::               

System Libraries

* Binding to System Library::

Cross Compiler

* Using the Cross Compiler::
* How the Cross Compiler Works::

@end menu

@node License, Goals, Top, Top
@unnumbered GNU GENERAL PUBLIC LICENSE
@center Version 2, June 1991

@display
Copyright @copyright{} 1989, 1991 Free Software Foundation, Inc.
675 Mass Ave, Cambridge, MA 02139, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@unnumberedsec Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software---to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

@iftex
@unnumberedsec TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end iftex
@ifinfo
@center TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end ifinfo

@enumerate 0
@item
This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The ``Program'', below,
refers to any such program or work, and a ``work based on the Program''
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term ``modification''.)  Each licensee is addressed as ``you''.

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

@item
You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

@item
You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

@enumerate a
@item
You must cause the modified files to carry prominent notices
stating that you changed the files and the date of any change.

@item
You must cause any work that you distribute or publish, that in
whole or in part contains or is derived from the Program or any
part thereof, to be licensed as a whole at no charge to all third
parties under the terms of this License.

@item
If the modified program normally reads commands interactively
when run, you must cause it, when started running for such
interactive use in the most ordinary way, to print or display an
announcement including an appropriate copyright notice and a
notice that there is no warranty (or else, saying that you provide
a warranty) and that users may redistribute the program under
these conditions, and telling the user how to view a copy of this
License.  (Exception: if the Program itself is interactive but
does not normally print such an announcement, your work based on
the Program is not required to print an announcement.)
@end enumerate

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

@item
You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

@enumerate a
@item
Accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms of Sections
1 and 2 above on a medium customarily used for software interchange; or,

@item
Accompany it with a written offer, valid for at least three
years, to give any third party, for a charge no more than your
cost of physically performing source distribution, a complete
machine-readable copy of the corresponding source code, to be
distributed under the terms of Sections 1 and 2 above on a medium
customarily used for software interchange; or,

@item
Accompany it with the information you received as to the offer
to distribute corresponding source code.  (This alternative is
allowed only for noncommercial distribution and only if you
received the program in object code or executable form with such
an offer, in accord with Subsection b above.)
@end enumerate

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

@item
You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

@item
Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

@item
If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

@item
If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

@item
The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and ``any
later version'', you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

@item
If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

@iftex
@heading NO WARRANTY
@end iftex
@ifinfo
@center NO WARRANTY
@end ifinfo

@item
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

@item
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
@end enumerate

@iftex
@heading END OF TERMS AND CONDITIONS
@end iftex
@ifinfo
@center END OF TERMS AND CONDITIONS
@end ifinfo

@page
@unnumberedsec How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and a brief idea of what it does.}
Copyright (C) 19@var{yy}  @var{name of author}

This program is free software; you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by 
the Free Software Foundation; either version 2 of the License, or 
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

@smallexample
Gnomovision version 69, Copyright (C) 19@var{yy} @var{name of author}
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
type `show w'.  
This is free software, and you are welcome to redistribute it 
under certain conditions; type `show c' for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than @samp{show w} and
@samp{show c}; they could even be mouse-clicks or menu items---whatever
suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a ``copyright disclaimer'' for the program, if
necessary.  Here is a sample; alter the names:

@smallexample
Yoyodyne, Inc., hereby disclaims all copyright interest in the program
`Gnomovision' (which makes passes at compilers) written by James Hacker.

@var{signature of Ty Coon}, 1 April 1989
Ty Coon, President of Vice
@end smallexample

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.

@iftex
@unnumbered Preface
@cindex Preface
This manual documents Gforth. The reader is expected to know
Forth. This manual is primarily a reference manual. @xref{Other Books}
for introductory material.
@end iftex

@node    Goals, Other Books, License, Top
@comment node-name,     next,           previous, up
@chapter Goals of Gforth
@cindex Goals
The goal of the Gforth Project is to develop a standard model for
ANS Forth. This can be split into several subgoals:

@itemize @bullet
@item
Gforth should conform to the Forth standard (ANS Forth).
@item
It should be a model, i.e. it should define all the
implementation-dependent things.
@item
It should become standard, i.e. widely accepted and used. This goal
is the most difficult one.
@end itemize

To achieve these goals Gforth should be
@itemize @bullet
@item
Similar to previous models (fig-Forth, F83)
@item
Powerful. It should provide for all the things that are considered
necessary today and even some that are not yet considered necessary.
@item
Efficient. It should not get the reputation of being exceptionally
slow.
@item
Free.
@item
Available on many machines/easy to port.
@end itemize

Have we achieved these goals? Gforth conforms to the ANS Forth
standard. It may be considered a model, but we have not yet documented
which parts of the model are stable and which parts we are likely to
change. It certainly has not yet become a de facto standard, but it
appears to be quite popular. It has some similarities to and some
differences from previous models. It has some powerful features, but not
yet everything that we envisioned. We certainly have achieved our
execution speed goals (@pxref{Performance}).  It is free and available
on many machines.

@node Other Books, Invoking Gforth, Goals, Top
@chapter Other books on ANS Forth
@cindex books on Forth

As the standard is relatively new, there are not many books out yet. It
is not recommended to learn Forth by using Gforth and a book that is not
written for ANS Forth, as you will not know your mistakes from the
deviations of the book. However, books based on the Forth-83 standard
should be ok, because ANS Forth is primarily an extension of Forth-83.

@cindex standard document for ANS Forth
@cindex ANS Forth document
There is, of course, the standard, the definite reference if you want to
write ANS Forth programs. It is available in printed form from the
National Standards Institute Sales Department (Tel.: USA (212) 642-4900;
Fax.: USA (212) 302-1286) as document @cite{X3.215-1994} for about $200. You
can also get it from Global Engineering Documents (Tel.: USA (800)
854-7179; Fax.: (303) 843-9880) for about $300.

@cite{dpANS6}, the last draft of the standard, which was then submitted
to ANSI for publication is available electronically and for free in some
MS Word format, and it has been converted to HTML
(@url{http://www.taygeta.com/forth/dpans.html}; this is my favourite
format); this HTML version also includes the answers to Requests for
Interpretation (RFIs). Some pointers to these versions can be found
through @*@url{http://www.complang.tuwien.ac.at/projects/forth.html}.

@cindex introductory book
@cindex book, introductory
@cindex Woehr, Jack: @cite{Forth: The New Model}
@cindex @cite{Forth: The new model} (book)
@cite{Forth: The New Model} by Jack Woehr (Prentice-Hall, 1993) is an
introductory book based on a draft version of the standard. It does not
cover the whole standard. It also contains interesting background
information (Jack Woehr was in the ANS Forth Technical Committee). It is
not appropriate for complete newbies, but programmers experienced in
other languages should find it ok.

@cindex Conklin, Edward K., and Elizabeth Rather: @cite{Forth Programmer's Handbook}
@cindex Rather, Elizabeth and Edward K. Conklin: @cite{Forth Programmer's Handbook}
@cindex @cite{Forth Programmer's Handbook} (book)
@cite{Forth Programmer's Handbook} by Edward K. Conklin, Elizabeth
D. Rather and the technical staff of Forth, Inc. (Forth, Inc., 1997;
ISBN 0-9662156-0-5) contains little introductory material. The majority
of the book is similar to @ref{Words}, but the book covers most of the
standard words and some non-standard words (whereas this manual is
quite incomplete). In addition, the book contains a chapter on
programming style. The major drawback of this book is that it usually
does not identify what is standard and what is specific to the Forth
system described in the book (probably one of Forth, Inc.'s systems).
Fortunately, many of the non-standard programming practices described in
the book work in Gforth, too.  Still, this drawback makes the book
hardly more useful than a pre-ANS book.

@node Invoking Gforth, Words, Other Books, Top
@chapter Invoking Gforth
@cindex invoking Gforth
@cindex running Gforth
@cindex command-line options
@cindex options on the command line
@cindex flags on the command line

You will usually just say @code{gforth}. In many other cases the default
Gforth image will be invoked like this:
@example
gforth [files] [-e forth-code]
@end example
This interprets the contents of the files and the Forth code in the order they
are given.

In general, the command line looks like this:

@example
gforth [initialization options] [image-specific options]
@end example

The initialization options must come before the rest of the command
line. They are:

@table @code
@cindex -i, command-line option
@cindex --image-file, command-line option
@item --image-file @var{file}
@itemx -i @var{file}
Loads the Forth image @var{file} instead of the default
@file{gforth.fi} (@pxref{Image Files}).

@cindex --path, command-line option
@cindex -p, command-line option
@item --path @var{path}
@itemx -p @var{path}
Uses @var{path} for searching the image file and Forth source code files
instead of the default in the environment variable @code{GFORTHPATH} or
the path specified at installation time (e.g.,
@file{/usr/local/share/gforth/0.2.0:.}). A path is given as a list of
directories, separated by @samp{:} (on Unix) or @samp{;} (on other OSs).

@cindex --dictionary-size, command-line option
@cindex -m, command-line option
@cindex @var{size} parameters for command-line options
@cindex size of the dictionary and the stacks
@item --dictionary-size @var{size}
@itemx -m @var{size}
Allocate @var{size} space for the Forth dictionary space instead of
using the default specified in the image (typically 256K). The
@var{size} specification consists of an integer and a unit (e.g.,
@code{4M}). The unit can be one of @code{b} (bytes), @code{e} (element
size, in this case Cells), @code{k} (kilobytes), @code{M} (Megabytes),
@code{G} (Gigabytes), and @code{T} (Terabytes). If no unit is specified,
@code{e} is used.

@cindex --data-stack-size, command-line option
@cindex -d, command-line option
@item --data-stack-size @var{size}
@itemx -d @var{size}
Allocate @var{size} space for the data stack instead of using the
default specified in the image (typically 16K).

@cindex --return-stack-size, command-line option
@cindex -r, command-line option
@item --return-stack-size @var{size}
@itemx -r @var{size}
Allocate @var{size} space for the return stack instead of using the
default specified in the image (typically 15K).

@cindex --fp-stack-size, command-line option
@cindex -f, command-line option
@item --fp-stack-size @var{size}
@itemx -f @var{size}
Allocate @var{size} space for the floating point stack instead of
using the default specified in the image (typically 15.5K). In this case
the unit specifier @code{e} refers to floating point numbers.

@cindex --locals-stack-size, command-line option
@cindex -l, command-line option
@item --locals-stack-size @var{size}
@itemx -l @var{size}
Allocate @var{size} space for the locals stack instead of using the
default specified in the image (typically 14.5K).

@cindex -h, command-line option
@cindex --help, command-line option
@item --help
@itemx -h
Print a message about the command-line options

@cindex -v, command-line option
@cindex --version, command-line option
@item --version
@itemx -v
Print version and exit

@cindex --debug, command-line option
@item --debug
Print some information useful for debugging on startup.

@cindex --offset-image, command-line option
@item --offset-image
Start the dictionary at a slightly different position than would be used
otherwise (useful for creating data-relocatable images,
@pxref{Data-Relocatable Image Files}).

@cindex --no-offset-im, command-line option
@item --no-offset-im
Start the dictionary at the normal position.

@cindex --clear-dictionary, command-line option
@item --clear-dictionary
Initialize all bytes in the dictionary to 0 before loading the image
(@pxref{Data-Relocatable Image Files}).

@cindex --die-on-signal, command-line-option
@item --die-on-signal
Normally Gforth handles most signals (e.g., the user interrupt SIGINT,
or the segmentation violation SIGSEGV) by translating it into a Forth
@code{THROW}. With this option, Gforth exits if it receives such a
signal. This option is useful when the engine and/or the image might be
severely broken (such that it causes another signal before recovering
from the first); this option avoids endless loops in such cases.
@end table

@cindex loading files at startup
@cindex executing code on startup
@cindex batch processing with Gforth
As explained above, the image-specific command-line arguments for the
default image @file{gforth.fi} consist of a sequence of filenames and
@code{-e @var{forth-code}} options that are interpreted in the sequence
in which they are given. The @code{-e @var{forth-code}} or
@code{--evaluate @var{forth-code}} option evaluates the forth
code. This option takes only one argument; if you want to evaluate more
Forth words, you have to quote them or use several @code{-e}s. To exit
after processing the command line (instead of entering interactive mode)
append @code{-e bye} to the command line.

@cindex versions, invoking other versions of Gforth
If you have several versions of Gforth installed, @code{gforth} will
invoke the version that was installed last. @code{gforth-@var{version}}
invokes a specific version. You may want to use the option
@code{--path}, if your environment contains the variable
@code{GFORTHPATH}.

Not yet implemented:
On startup the system first executes the system initialization file
(unless the option @code{--no-init-file} is given; note that the system
resulting from using this option may not be ANS Forth conformant). Then
the user initialization file @file{.gforth.fs} is executed, unless the
option @code{--no-rc} is given; this file is first searched in @file{.},
then in @file{~}, then in the normal path (see above).

@node Words, Tools, Invoking Gforth, Top
@chapter Forth Words
@cindex Words

@menu
* Notation::                    
* Arithmetic::                  
* Stack Manipulation::          
* Memory::                      
* Control Structures::          
* Locals::                      
* Defining Words::              
* Structures::                  
* Object-oriented Forth::       
* Tokens for Words::            
* Wordlists::                   
* Files::                       
* Including Files::             
* Blocks::                      
* Other I/O::                   
* Programming Tools::           
* Assembler and Code Words::    
* Threading Words::             
@end menu

@node Notation, Arithmetic, Words, Words
@section Notation
@cindex notation of glossary entries
@cindex format of glossary entries
@cindex glossary notation format
@cindex word glossary entry format

The Forth words are described in this section in the glossary notation
that has become a de-facto standard for Forth texts, i.e.,

@format
@var{word}     @var{Stack effect}   @var{wordset}   @var{pronunciation}
@end format
@var{Description}

@table @var
@item word
@cindex case insensitivity
The name of the word. BTW, Gforth is case insensitive, so you can
type the words in in lower case (However, @pxref{core-idef}).

@item Stack effect
@cindex stack effect
The stack effect is written in the notation @code{@var{before} --
@var{after}}, where @var{before} and @var{after} describe the top of
stack entries before and after the execution of the word. The rest of
the stack is not touched by the word. The top of stack is rightmost,
i.e., a stack sequence is written as it is typed in. Note that Gforth
uses a separate floating point stack, but a unified stack
notation. Also, return stack effects are not shown in @var{stack
effect}, but in @var{Description}. The name of a stack item describes
the type and/or the function of the item. See below for a discussion of
the types.

All words have two stack effects: A compile-time stack effect and a
run-time stack effect. The compile-time stack-effect of most words is
@var{ -- }. If the compile-time stack-effect of a word deviates from
this standard behaviour, or the word does other unusual things at
compile time, both stack effects are shown; otherwise only the run-time
stack effect is shown.

@cindex pronounciation of words
@item pronunciation
How the word is pronounced.

@cindex wordset
@item wordset
The ANS Forth standard is divided into several wordsets. A standard
system need not support all of them. So, the fewer wordsets your program
uses the more portable it will be in theory. However, we suspect that
most ANS Forth systems on personal machines will feature all
wordsets. Words that are not defined in the ANS standard have
@code{gforth} or @code{gforth-internal} as wordset. @code{gforth}
describes words that will work in future releases of Gforth;
@code{gforth-internal} words are more volatile. Environmental query
strings are also displayed like words; you can recognize them by the
@code{environment} in the wordset field.

@item Description
A description of the behaviour of the word.
@end table

@cindex types of stack items
@cindex stack item types
The type of a stack item is specified by the character(s) the name
starts with:

@table @code
@item f
@cindex @code{f}, stack item type
Boolean flags, i.e. @code{false} or @code{true}.
@item c
@cindex @code{c}, stack item type
Char
@item w
@cindex @code{w}, stack item type
Cell, can contain an integer or an address
@item n
@cindex @code{n}, stack item type
signed integer
@item u
@cindex @code{u}, stack item type
unsigned integer
@item d
@cindex @code{d}, stack item type
double sized signed integer
@item ud
@cindex @code{ud}, stack item type
double sized unsigned integer
@item r
@cindex @code{r}, stack item type
Float (on the FP stack)
@item a_
@cindex @code{a_}, stack item type
Cell-aligned address
@item c_
@cindex @code{c_}, stack item type
Char-aligned address (note that a Char may have two bytes in Windows NT)
@item f_
@cindex @code{f_}, stack item type
Float-aligned address
@item df_
@cindex @code{df_}, stack item type
Address aligned for IEEE double precision float
@item sf_
@cindex @code{sf_}, stack item type
Address aligned for IEEE single precision float
@item xt
@cindex @code{xt}, stack item type
Execution token, same size as Cell
@item wid
@cindex @code{wid}, stack item type
Wordlist ID, same size as Cell
@item f83name
@cindex @code{f83name}, stack item type
Pointer to a name structure
@item "
@cindex @code{"}, stack item type
string in the input stream (not on the stack). The terminating character
is a blank by default. If it is not a blank, it is shown in @code{<>}
quotes.
@end table

@node Arithmetic, Stack Manipulation, Notation, Words
@section Arithmetic
@cindex arithmetic words

@cindex division with potentially negative operands
Forth arithmetic is not checked, i.e., you will not hear about integer
overflow on addition or multiplication, you may hear about division by
zero if you are lucky. The operator is written after the operands, but
the operands are still in the original order. I.e., the infix @code{2-1}
corresponds to @code{2 1 -}. Forth offers a variety of division
operators. If you perform division with potentially negative operands,
you do not want to use @code{/} or @code{/mod} with its undefined
behaviour, but rather @code{fm/mod} or @code{sm/mod} (probably the
former, @pxref{Mixed precision}).

@menu
* Single precision::            
* Bitwise operations::          
* Mixed precision::             operations with single and double-cell integers
* Double precision::            Double-cell integer arithmetic
* Floating Point::              
@end menu

@node Single precision, Bitwise operations, Arithmetic, Arithmetic
@subsection Single precision
@cindex single precision arithmetic words

doc-+
doc--
doc-*
doc-/
doc-mod
doc-/mod
doc-negate
doc-abs
doc-min
doc-max

@node Bitwise operations, Mixed precision, Single precision, Arithmetic
@subsection Bitwise operations
@cindex bitwise operation words

doc-and
doc-or
doc-xor
doc-invert
doc-2*
doc-2/

@node Mixed precision, Double precision, Bitwise operations, Arithmetic
@subsection Mixed precision
@cindex mixed precision arithmetic words

doc-m+
doc-*/
doc-*/mod
doc-m*
doc-um*
doc-m*/
doc-um/mod
doc-fm/mod
doc-sm/rem

@node Double precision, Floating Point, Mixed precision, Arithmetic
@subsection Double precision
@cindex double precision arithmetic words

@cindex double-cell numbers, input format
@cindex input format for double-cell numbers
The outer (aka text) interpreter converts numbers containing a dot into
a double precision number. Note that only numbers with the dot as last
character are standard-conforming.

doc-d+
doc-d-
doc-dnegate
doc-dabs
doc-dmin
doc-dmax

@node Floating Point,  , Double precision, Arithmetic
@subsection Floating Point
@cindex floating point arithmetic words

@cindex floating-point numbers, input format
@cindex input format for floating-point numbers
The format of floating point numbers recognized by the outer (aka text)
interpreter is: a signed decimal number, possibly containing a decimal
point (@code{.}), followed by @code{E} or @code{e}, optionally followed
by a signed integer (the exponent). E.g., @code{1e} is the same as
@code{+1.0e+0}. Note that a number without @code{e} is not interpreted
as floating-point number, but as double (if the number contains a
@code{.}) or single precision integer. Also, conversions between string
and floating point numbers always use base 10, irrespective of the value
of @code{BASE} (in Gforth; for the standard this is an ambiguous
condition). If @code{BASE} contains a value greater then 14, the
@code{E} may be interpreted as digit and the number will be interpreted
as integer, unless it has a signed exponent (both @code{+} and @code{-}
are allowed as signs).

@cindex angles in trigonometric operations
@cindex trigonometric operations
Angles in floating point operations are given in radians (a full circle
has 2 pi radians). Note, that Gforth has a separate floating point
stack, but we use the unified notation.

@cindex floating-point arithmetic, pitfalls
Floating point numbers have a number of unpleasant surprises for the
unwary (e.g., floating point addition is not associative) and even a few
for the wary. You should not use them unless you know what you are doing
or you don't care that the results you get are totally bogus. If you
want to learn about the problems of floating point numbers (and how to
avoid them), you might start with @cite{David Goldberg, What Every
Computer Scientist Should Know About Floating-Point Arithmetic, ACM
Computing Surveys 23(1):5@minus{}48, March 1991}
(@url{http://www.validgh.com/goldberg/paper.ps}).

doc-f+
doc-f-
doc-f*
doc-f/
doc-fnegate
doc-fabs
doc-fmax
doc-fmin
doc-floor
doc-fround
doc-f**
doc-fsqrt
doc-fexp
doc-fexpm1
doc-fln
doc-flnp1
doc-flog
doc-falog
doc-fsin
doc-fcos
doc-fsincos
doc-ftan
doc-fasin
doc-facos
doc-fatan
doc-fatan2
doc-fsinh
doc-fcosh
doc-ftanh
doc-fasinh
doc-facosh
doc-fatanh

@node Stack Manipulation, Memory, Arithmetic, Words
@section Stack Manipulation
@cindex stack manipulation words

@cindex floating-point stack in the standard
Gforth has a data stack (aka parameter stack) for characters, cells,
addresses, and double cells, a floating point stack for floating point
numbers, a return stack for storing the return addresses of colon
definitions and other data, and a locals stack for storing local
variables. Note that while every sane Forth has a separate floating
point stack, this is not strictly required; an ANS Forth system could
theoretically keep floating point numbers on the data stack. As an
additional difficulty, you don't know how many cells a floating point
number takes. It is reportedly possible to write words in a way that
they work also for a unified stack model, but we do not recommend trying
it. Instead, just say that your program has an environmental dependency
on a separate FP stack.

@cindex return stack and locals
@cindex locals and return stack
Also, a Forth system is allowed to keep the local variables on the
return stack. This is reasonable, as local variables usually eliminate
the need to use the return stack explicitly. So, if you want to produce
a standard complying program and if you are using local variables in a
word, forget about return stack manipulations in that word (see the
standard document for the exact rules).

@menu
* Data stack::                  
* Floating point stack::        
* Return stack::                
* Locals stack::                
* Stack pointer manipulation::  
@end menu

@node Data stack, Floating point stack, Stack Manipulation, Stack Manipulation
@subsection Data stack
@cindex data stack manipulation words
@cindex stack manipulations words, data stack

doc-drop
doc-nip
doc-dup
doc-over
doc-tuck
doc-swap
doc-rot
doc--rot
doc-?dup
doc-pick
doc-roll
doc-2drop
doc-2nip
doc-2dup
doc-2over
doc-2tuck
doc-2swap
doc-2rot

@node Floating point stack, Return stack, Data stack, Stack Manipulation
@subsection Floating point stack
@cindex floating-point stack manipulation words
@cindex stack manipulation words, floating-point stack

doc-fdrop
doc-fnip
doc-fdup
doc-fover
doc-ftuck
doc-fswap
doc-frot

@node Return stack, Locals stack, Floating point stack, Stack Manipulation
@subsection Return stack
@cindex return stack manipulation words
@cindex stack manipulation words, return stack

doc->r
doc-r>
doc-r@
doc-rdrop
doc-2>r
doc-2r>
doc-2r@
doc-2rdrop

@node Locals stack, Stack pointer manipulation, Return stack, Stack Manipulation
@subsection Locals stack

@node Stack pointer manipulation,  , Locals stack, Stack Manipulation
@subsection Stack pointer manipulation
@cindex stack pointer manipulation words

doc-sp@
doc-sp!
doc-fp@
doc-fp!
doc-rp@
doc-rp!
doc-lp@
doc-lp!

@node Memory, Control Structures, Stack Manipulation, Words
@section Memory
@cindex Memory words

@menu
* Memory Access::      
* Address arithmetic::          
* Memory Blocks::         
@end menu

@node Memory Access, Address arithmetic, Memory, Memory
@subsection Memory Access
@cindex memory access words

doc-@
doc-!
doc-+!
doc-c@
doc-c!
doc-2@
doc-2!
doc-f@
doc-f!
doc-sf@
doc-sf!
doc-df@
doc-df!

@node Address arithmetic, Memory Blocks, Memory Access, Memory
@subsection Address arithmetic
@cindex address arithmetic words

ANS Forth does not specify the sizes of the data types. Instead, it
offers a number of words for computing sizes and doing address
arithmetic. Basically, address arithmetic is performed in terms of
address units (aus); on most systems the address unit is one byte. Note
that a character may have more than one au, so @code{chars} is no noop
(on systems where it is a noop, it compiles to nothing).

@cindex alignment of addresses for types
ANS Forth also defines words for aligning addresses for specific
types. Many computers require that accesses to specific data types
must only occur at specific addresses; e.g., that cells may only be
accessed at addresses divisible by 4. Even if a machine allows unaligned
accesses, it can usually perform aligned accesses faster. 

For the performance-conscious: alignment operations are usually only
necessary during the definition of a data structure, not during the
(more frequent) accesses to it.

ANS Forth defines no words for character-aligning addresses. This is not
an oversight, but reflects the fact that addresses that are not
char-aligned have no use in the standard and therefore will not be
created.

@cindex @code{CREATE} and alignment
The standard guarantees that addresses returned by @code{CREATE}d words
are cell-aligned; in addition, Gforth guarantees that these addresses
are aligned for all purposes.

Note that the standard defines a word @code{char}, which has nothing to
do with address arithmetic.

doc-chars
doc-char+
doc-cells
doc-cell+
doc-cell
doc-align
doc-aligned
doc-floats
doc-float+
doc-float
doc-falign
doc-faligned
doc-sfloats
doc-sfloat+
doc-sfalign
doc-sfaligned
doc-dfloats
doc-dfloat+
doc-dfalign
doc-dfaligned
doc-maxalign
doc-maxaligned
doc-cfalign
doc-cfaligned
doc-address-unit-bits

@node Memory Blocks,  , Address arithmetic, Memory
@subsection Memory Blocks
@cindex memory block words

doc-move
doc-erase

While the previous words work on address units, the rest works on
characters.

doc-cmove
doc-cmove>
doc-fill
doc-blank

@node Control Structures, Locals, Memory, Words
@section Control Structures
@cindex control structures

Control structures in Forth cannot be used in interpret state, only in
compile state@footnote{More precisely, they have no interpretation
semantics (@pxref{Interpretation and Compilation Semantics})}, i.e., in
a colon definition. We do not like this limitation, but have not seen a
satisfying way around it yet, although many schemes have been proposed.

@menu
* Selection::                   
* Simple Loops::                
* Counted Loops::               
* Arbitrary control structures::  
* Calls and returns::           
* Exception Handling::          
@end menu

@node Selection, Simple Loops, Control Structures, Control Structures
@subsection Selection
@cindex selection control structures
@cindex control structures for selection

@cindex @code{IF} control structure
@example
@var{flag}
IF
  @var{code}
ENDIF
@end example
or
@example
@var{flag}
IF
  @var{code1}
ELSE
  @var{code2}
ENDIF
@end example

You can use @code{THEN} instead of @code{ENDIF}. Indeed, @code{THEN} is
standard, and @code{ENDIF} is not, although it is quite popular. We
recommend using @code{ENDIF}, because it is less confusing for people
who also know other languages (and is not prone to reinforcing negative
prejudices against Forth in these people). Adding @code{ENDIF} to a
system that only supplies @code{THEN} is simple:
@example
: endif   POSTPONE then ; immediate
@end example

[According to @cite{Webster's New Encyclopedic Dictionary}, @dfn{then
(adv.)}  has the following meanings:
@quotation
... 2b: following next after in order ... 3d: as a necessary consequence
(if you were there, then you saw them).
@end quotation
Forth's @code{THEN} has the meaning 2b, whereas @code{THEN} in Pascal
and many other programming languages has the meaning 3d.]

Gforth also provides the words @code{?dup-if} and @code{?dup-0=-if}, so
you can avoid using @code{?dup}. Using these alternatives is also more
efficient than using @code{?dup}. Definitions in plain standard Forth
for @code{ENDIF}, @code{?DUP-IF} and @code{?DUP-0=-IF} are provided in
@file{compat/control.fs}.

@cindex @code{CASE} control structure
@example
@var{n}
CASE
  @var{n1} OF @var{code1} ENDOF
  @var{n2} OF @var{code2} ENDOF
  @dots{}
ENDCASE
@end example

Executes the first @var{codei}, where the @var{ni} is equal to
@var{n}. A default case can be added by simply writing the code after
the last @code{ENDOF}. It may use @var{n}, which is on top of the stack,
but must not consume it.

@node Simple Loops, Counted Loops, Selection, Control Structures
@subsection Simple Loops
@cindex simple loops
@cindex loops without count 

@cindex @code{WHILE} loop
@example
BEGIN
  @var{code1}
  @var{flag}
WHILE
  @var{code2}
REPEAT
@end example

@var{code1} is executed and @var{flag} is computed. If it is true,
@var{code2} is executed and the loop is restarted; If @var{flag} is
false, execution continues after the @code{REPEAT}.

@cindex @code{UNTIL} loop
@example
BEGIN
  @var{code}
  @var{flag}
UNTIL
@end example

@var{code} is executed. The loop is restarted if @code{flag} is false.

@cindex endless loop
@cindex loops, endless
@example
BEGIN
  @var{code}
AGAIN
@end example

This is an endless loop.

@node Counted Loops, Arbitrary control structures, Simple Loops, Control Structures
@subsection Counted Loops
@cindex counted loops
@cindex loops, counted
@cindex @code{DO} loops

The basic counted loop is:
@example
@var{limit} @var{start}
?DO
  @var{body}
LOOP
@end example

This performs one iteration for every integer, starting from @var{start}
and up to, but excluding @var{limit}. The counter, aka index, can be
accessed with @code{i}. E.g., the loop
@example
10 0 ?DO
  i .
LOOP
@end example
prints
@example
0 1 2 3 4 5 6 7 8 9
@end example
The index of the innermost loop can be accessed with @code{i}, the index
of the next loop with @code{j}, and the index of the third loop with
@code{k}.

doc-i
doc-j
doc-k

The loop control data are kept on the return stack, so there are some
restrictions on mixing return stack accesses and counted loop
words. E.g., if you put values on the return stack outside the loop, you
cannot read them inside the loop. If you put values on the return stack
within a loop, you have to remove them before the end of the loop and
before accessing the index of the loop.

There are several variations on the counted loop:

@code{LEAVE} leaves the innermost counted loop immediately.

If @var{start} is greater than @var{limit}, a @code{?DO} loop is entered
(and @code{LOOP} iterates until they become equal by wrap-around
arithmetic). This behaviour is usually not what you want. Therefore,
Gforth offers @code{+DO} and @code{U+DO} (as replacements for
@code{?DO}), which do not enter the loop if @var{start} is greater than
@var{limit}; @code{+DO} is for signed loop parameters, @code{U+DO} for
unsigned loop parameters.

@code{LOOP} can be replaced with @code{@var{n} +LOOP}; this updates the
index by @var{n} instead of by 1. The loop is terminated when the border
between @var{limit-1} and @var{limit} is crossed. E.g.:

@code{4 0 +DO  i .  2 +LOOP}   prints @code{0 2}

@code{4 1 +DO  i .  2 +LOOP}   prints @code{1 3}

@cindex negative increment for counted loops
@cindex counted loops with negative increment
The behaviour of @code{@var{n} +LOOP} is peculiar when @var{n} is negative:

@code{-1 0 ?DO  i .  -1 +LOOP}  prints @code{0 -1}

@code{ 0 0 ?DO  i .  -1 +LOOP}  prints nothing

Therefore we recommend avoiding @code{@var{n} +LOOP} with negative
@var{n}. One alternative is @code{@var{u} -LOOP}, which reduces the
index by @var{u} each iteration. The loop is terminated when the border
between @var{limit+1} and @var{limit} is crossed. Gforth also provides
@code{-DO} and @code{U-DO} for down-counting loops. E.g.:

@code{-2 0 -DO  i .  1 -LOOP}  prints @code{0 -1}

@code{-1 0 -DO  i .  1 -LOOP}  prints @code{0}

@code{ 0 0 -DO  i .  1 -LOOP}  prints nothing

Unfortunately, @code{+DO}, @code{U+DO}, @code{-DO}, @code{U-DO} and
@code{-LOOP} are not in the ANS Forth standard. However, an
implementation for these words that uses only standard words is provided
in @file{compat/loops.fs}.

@code{?DO} can also be replaced by @code{DO}. @code{DO} always enters
the loop, independent of the loop parameters. Do not use @code{DO}, even
if you know that the loop is entered in any case. Such knowledge tends
to become invalid during maintenance of a program, and then the
@code{DO} will make trouble.

@code{UNLOOP} is used to prepare for an abnormal loop exit, e.g., via
@code{EXIT}. @code{UNLOOP} removes the loop control parameters from the
return stack so @code{EXIT} can get to its return address.

@cindex @code{FOR} loops
Another counted loop is
@example
@var{n}
FOR
  @var{body}
NEXT
@end example
This is the preferred loop of native code compiler writers who are too
lazy to optimize @code{?DO} loops properly. In Gforth, this loop
iterates @var{n+1} times; @code{i} produces values starting with @var{n}
and ending with 0. Other Forth systems may behave differently, even if
they support @code{FOR} loops. To avoid problems, don't use @code{FOR}
loops.

@node Arbitrary control structures, Calls and returns, Counted Loops, Control Structures
@subsection Arbitrary control structures
@cindex control structures, user-defined

@cindex control-flow stack
ANS Forth permits and supports using control structures in a non-nested
way. Information about incomplete control structures is stored on the
control-flow stack. This stack may be implemented on the Forth data
stack, and this is what we have done in Gforth.

@cindex @code{orig}, control-flow stack item
@cindex @code{dest}, control-flow stack item
An @i{orig} entry represents an unresolved forward branch, a @i{dest}
entry represents a backward branch target. A few words are the basis for
building any control structure possible (except control structures that
need storage, like calls, coroutines, and backtracking).

doc-if
doc-ahead
doc-then
doc-begin
doc-until
doc-again
doc-cs-pick
doc-cs-roll

On many systems control-flow stack items take one word, in Gforth they
currently take three (this may change in the future). Therefore it is a
really good idea to manipulate the control flow stack with
@code{cs-pick} and @code{cs-roll}, not with data stack manipulation
words.

Some standard control structure words are built from these words:

doc-else
doc-while
doc-repeat

Gforth adds some more control-structure words:

doc-endif
doc-?dup-if
doc-?dup-0=-if

Counted loop words constitute a separate group of words:

doc-?do
doc-+do
doc-u+do
doc--do
doc-u-do
doc-do
doc-for
doc-loop
doc-+loop
doc--loop
doc-next
doc-leave
doc-?leave
doc-unloop
doc-done

The standard does not allow using @code{cs-pick} and @code{cs-roll} on
@i{do-sys}. Our system allows it, but it's your job to ensure that for
every @code{?DO} etc. there is exactly one @code{UNLOOP} on any path
through the definition (@code{LOOP} etc. compile an @code{UNLOOP} on the
fall-through path). Also, you have to ensure that all @code{LEAVE}s are
resolved (by using one of the loop-ending words or @code{DONE}).

Another group of control structure words are

doc-case
doc-endcase
doc-of
doc-endof

@i{case-sys} and @i{of-sys} cannot be processed using @code{cs-pick} and
@code{cs-roll}.

@subsubsection Programming Style

In order to ensure readability we recommend that you do not create
arbitrary control structures directly, but define new control structure
words for the control structure you want and use these words in your
program.

E.g., instead of writing

@example
begin
  ...
if [ 1 cs-roll ]
  ...
again then
@end example

we recommend defining control structure words, e.g.,

@example
: while ( dest -- orig dest )
 POSTPONE if
 1 cs-roll ; immediate

: repeat ( orig dest -- )
 POSTPONE again
 POSTPONE then ; immediate
@end example

and then using these to create the control structure:

@example
begin
  ...
while
  ...
repeat
@end example

That's much easier to read, isn't it? Of course, @code{REPEAT} and
@code{WHILE} are predefined, so in this example it would not be
necessary to define them.

@node Calls and returns, Exception Handling, Arbitrary control structures, Control Structures
@subsection Calls and returns
@cindex calling a definition
@cindex returning from a definition

@cindex recursive definitions
A definition can be called simply be writing the name of the definition
to be called. Note that normally a definition is invisible during its
definition. If you want to write a directly recursive definition, you
can use @code{recursive} to make the current definition visible.

doc-recursive

Another way to perform a recursive call is

doc-recurse

@quotation
@progstyle
I prefer using @code{recursive} to @code{recurse}, because calling the
definition by name is more descriptive (if the name is well-chosen) than
the somewhat cryptic @code{recurse}.  E.g., in a quicksort
implementation, it is much better to read (and think) ``now sort the
partitions'' than to read ``now do a recursive call''.
@end quotation

For mutual recursion, use @code{defer}red words, like this:

@example
defer foo

: bar ( ... -- ... )
 ... foo ... ;

:noname ( ... -- ... )
 ... bar ... ;
IS foo
@end example

When the end of the definition is reached, it returns. An earlier return
can be forced using

doc-exit

Don't forget to clean up the return stack and @code{UNLOOP} any
outstanding @code{?DO}...@code{LOOP}s before @code{EXIT}ing. The
primitive compiled by @code{EXIT} is

doc-;s

@node Exception Handling,  , Calls and returns, Control Structures
@subsection Exception Handling
@cindex Exceptions

doc-catch
doc-throw

@node Locals, Defining Words, Control Structures, Words
@section Locals
@cindex locals

Local variables can make Forth programming more enjoyable and Forth
programs easier to read. Unfortunately, the locals of ANS Forth are
laden with restrictions. Therefore, we provide not only the ANS Forth
locals wordset, but also our own, more powerful locals wordset (we
implemented the ANS Forth locals wordset through our locals wordset).

The ideas in this section have also been published in the paper
@cite{Automatic Scoping of Local Variables} by M. Anton Ertl, presented
at EuroForth '94; it is available at
@*@url{http://www.complang.tuwien.ac.at/papers/ertl94l.ps.gz}.

@menu
* Gforth locals::               
* ANS Forth locals::            
@end menu

@node Gforth locals, ANS Forth locals, Locals, Locals
@subsection Gforth locals
@cindex Gforth locals
@cindex locals, Gforth style

Locals can be defined with

@example
@{ local1 local2 ... -- comment @}
@end example
or
@example
@{ local1 local2 ... @}
@end example

E.g.,
@example
: max @{ n1 n2 -- n3 @}
 n1 n2 > if
   n1
 else
   n2
 endif ;
@end example

The similarity of locals definitions with stack comments is intended. A
locals definition often replaces the stack comment of a word. The order
of the locals corresponds to the order in a stack comment and everything
after the @code{--} is really a comment.

This similarity has one disadvantage: It is too easy to confuse locals
declarations with stack comments, causing bugs and making them hard to
find. However, this problem can be avoided by appropriate coding
conventions: Do not use both notations in the same program. If you do,
they should be distinguished using additional means, e.g. by position.

@cindex types of locals
@cindex locals types
The name of the local may be preceded by a type specifier, e.g.,
@code{F:} for a floating point value:

@example
: CX* @{ F: Ar F: Ai F: Br F: Bi -- Cr Ci @}
\ complex multiplication
 Ar Br f* Ai Bi f* f-
 Ar Bi f* Ai Br f* f+ ;
@end example

@cindex flavours of locals
@cindex locals flavours
@cindex value-flavoured locals
@cindex variable-flavoured locals
Gforth currently supports cells (@code{W:}, @code{W^}), doubles
(@code{D:}, @code{D^}), floats (@code{F:}, @code{F^}) and characters
(@code{C:}, @code{C^}) in two flavours: a value-flavoured local (defined
with @code{W:}, @code{D:} etc.) produces its value and can be changed
with @code{TO}. A variable-flavoured local (defined with @code{W^} etc.)
produces its address (which becomes invalid when the variable's scope is
left). E.g., the standard word @code{emit} can be defined in terms of
@code{type} like this:

@example
: emit @{ C^ char* -- @}
    char* 1 type ;
@end example

@cindex default type of locals
@cindex locals, default type
A local without type specifier is a @code{W:} local. Both flavours of
locals are initialized with values from the data or FP stack.

Currently there is no way to define locals with user-defined data
structures, but we are working on it.

Gforth allows defining locals everywhere in a colon definition. This
poses the following questions:

@menu
* Where are locals visible by name?::  
* How long do locals live?::    
* Programming Style::           
* Implementation::              
@end menu

@node Where are locals visible by name?, How long do locals live?, Gforth locals, Gforth locals
@subsubsection Where are locals visible by name?
@cindex locals visibility
@cindex visibility of locals
@cindex scope of locals

Basically, the answer is that locals are visible where you would expect
it in block-structured languages, and sometimes a little longer. If you
want to restrict the scope of a local, enclose its definition in
@code{SCOPE}...@code{ENDSCOPE}.

doc-scope
doc-endscope

These words behave like control structure words, so you can use them
with @code{CS-PICK} and @code{CS-ROLL} to restrict the scope in
arbitrary ways.

If you want a more exact answer to the visibility question, here's the
basic principle: A local is visible in all places that can only be
reached through the definition of the local@footnote{In compiler
construction terminology, all places dominated by the definition of the
local.}. In other words, it is not visible in places that can be reached
without going through the definition of the local. E.g., locals defined
in @code{IF}...@code{ENDIF} are visible until the @code{ENDIF}, locals
defined in @code{BEGIN}...@code{UNTIL} are visible after the
@code{UNTIL} (until, e.g., a subsequent @code{ENDSCOPE}).

The reasoning behind this solution is: We want to have the locals
visible as long as it is meaningful. The user can always make the
visibility shorter by using explicit scoping. In a place that can
only be reached through the definition of a local, the meaning of a
local name is clear. In other places it is not: How is the local
initialized at the control flow path that does not contain the
definition? Which local is meant, if the same name is defined twice in
two independent control flow paths?

This should be enough detail for nearly all users, so you can skip the
rest of this section. If you really must know all the gory details and
options, read on.

In order to implement this rule, the compiler has to know which places
are unreachable. It knows this automatically after @code{AHEAD},
@code{AGAIN}, @code{EXIT} and @code{LEAVE}; in other cases (e.g., after
most @code{THROW}s), you can use the word @code{UNREACHABLE} to tell the
compiler that the control flow never reaches that place. If
@code{UNREACHABLE} is not used where it could, the only consequence is
that the visibility of some locals is more limited than the rule above
says. If @code{UNREACHABLE} is used where it should not (i.e., if you
lie to the compiler), buggy code will be produced.

doc-unreachable

Another problem with this rule is that at @code{BEGIN}, the compiler
does not know which locals will be visible on the incoming
back-edge. All problems discussed in the following are due to this
ignorance of the compiler (we discuss the problems using @code{BEGIN}
loops as examples; the discussion also applies to @code{?DO} and other
loops). Perhaps the most insidious example is:
@example
AHEAD
BEGIN
  x
[ 1 CS-ROLL ] THEN
  @{ x @}
  ...
UNTIL
@end example

This should be legal according to the visibility rule. The use of
@code{x} can only be reached through the definition; but that appears
textually below the use.

From this example it is clear that the visibility rules cannot be fully
implemented without major headaches. Our implementation treats common
cases as advertised and the exceptions are treated in a safe way: The
compiler makes a reasonable guess about the locals visible after a
@code{BEGIN}; if it is too pessimistic, the
user will get a spurious error about the local not being defined; if the
compiler is too optimistic, it will notice this later and issue a
warning. In the case above the compiler would complain about @code{x}
being undefined at its use. You can see from the obscure examples in
this section that it takes quite unusual control structures to get the
compiler into trouble, and even then it will often do fine.

If the @code{BEGIN} is reachable from above, the most optimistic guess
is that all locals visible before the @code{BEGIN} will also be
visible after the @code{BEGIN}. This guess is valid for all loops that
are entered only through the @code{BEGIN}, in particular, for normal
@code{BEGIN}...@code{WHILE}...@code{REPEAT} and
@code{BEGIN}...@code{UNTIL} loops and it is implemented in our
compiler. When the branch to the @code{BEGIN} is finally generated by
@code{AGAIN} or @code{UNTIL}, the compiler checks the guess and
warns the user if it was too optimistic:
@example
IF
  @{ x @}
BEGIN
  \ x ? 
[ 1 cs-roll ] THEN
  ...
UNTIL
@end example

Here, @code{x} lives only until the @code{BEGIN}, but the compiler
optimistically assumes that it lives until the @code{THEN}. It notices
this difference when it compiles the @code{UNTIL} and issues a
warning. The user can avoid the warning, and make sure that @code{x}
is not used in the wrong area by using explicit scoping:
@example
IF
  SCOPE
  @{ x @}
  ENDSCOPE
BEGIN
[ 1 cs-roll ] THEN
  ...
UNTIL
@end example

Since the guess is optimistic, there will be no spurious error messages
about undefined locals.

If the @code{BEGIN} is not reachable from above (e.g., after
@code{AHEAD} or @code{EXIT}), the compiler cannot even make an
optimistic guess, as the locals visible after the @code{BEGIN} may be
defined later. Therefore, the compiler assumes that no locals are
visible after the @code{BEGIN}. However, the user can use
@code{ASSUME-LIVE} to make the compiler assume that the same locals are
visible at the BEGIN as at the point where the top control-flow stack
item was created.

doc-assume-live

E.g.,
@example
@{ x @}
AHEAD
ASSUME-LIVE
BEGIN
  x
[ 1 CS-ROLL ] THEN
  ...
UNTIL
@end example

Other cases where the locals are defined before the @code{BEGIN} can be
handled by inserting an appropriate @code{CS-ROLL} before the
@code{ASSUME-LIVE} (and changing the control-flow stack manipulation
behind the @code{ASSUME-LIVE}).

Cases where locals are defined after the @code{BEGIN} (but should be
visible immediately after the @code{BEGIN}) can only be handled by
rearranging the loop. E.g., the ``most insidious'' example above can be
arranged into:
@example
BEGIN
  @{ x @}
  ... 0=
WHILE
  x
REPEAT
@end example

@node How long do locals live?, Programming Style, Where are locals visible by name?, Gforth locals
@subsubsection How long do locals live?
@cindex locals lifetime
@cindex lifetime of locals

The right answer for the lifetime question would be: A local lives at
least as long as it can be accessed. For a value-flavoured local this
means: until the end of its visibility. However, a variable-flavoured
local could be accessed through its address far beyond its visibility
scope. Ultimately, this would mean that such locals would have to be
garbage collected. Since this entails un-Forth-like implementation
complexities, I adopted the same cowardly solution as some other
languages (e.g., C): The local lives only as long as it is visible;
afterwards its address is invalid (and programs that access it
afterwards are erroneous).

@node Programming Style, Implementation, How long do locals live?, Gforth locals
@subsubsection Programming Style
@cindex locals programming style
@cindex programming style, locals

The freedom to define locals anywhere has the potential to change
programming styles dramatically. In particular, the need to use the
return stack for intermediate storage vanishes. Moreover, all stack
manipulations (except @code{PICK}s and @code{ROLL}s with run-time
determined arguments) can be eliminated: If the stack items are in the
wrong order, just write a locals definition for all of them; then
write the items in the order you want.

This seems a little far-fetched and eliminating stack manipulations is
unlikely to become a conscious programming objective. Still, the number
of stack manipulations will be reduced dramatically if local variables
are used liberally (e.g., compare @code{max} in @ref{Gforth locals} with
a traditional implementation of @code{max}).

This shows one potential benefit of locals: making Forth programs more
readable. Of course, this benefit will only be realized if the
programmers continue to honour the principle of factoring instead of
using the added latitude to make the words longer.

@cindex single-assignment style for locals
Using @code{TO} can and should be avoided.  Without @code{TO},
every value-flavoured local has only a single assignment and many
advantages of functional languages apply to Forth. I.e., programs are
easier to analyse, to optimize and to read: It is clear from the
definition what the local stands for, it does not turn into something
different later.

E.g., a definition using @code{TO} might look like this:
@example
: strcmp @{ addr1 u1 addr2 u2 -- n @}
 u1 u2 min 0
 ?do
   addr1 c@@ addr2 c@@ -
   ?dup-if
     unloop exit
   then
   addr1 char+ TO addr1
   addr2 char+ TO addr2
 loop
 u1 u2 - ;
@end example
Here, @code{TO} is used to update @code{addr1} and @code{addr2} at
every loop iteration. @code{strcmp} is a typical example of the
readability problems of using @code{TO}. When you start reading
@code{strcmp}, you think that @code{addr1} refers to the start of the
string. Only near the end of the loop you realize that it is something
else.

This can be avoided by defining two locals at the start of the loop that
are initialized with the right value for the current iteration.
@example
: strcmp @{ addr1 u1 addr2 u2 -- n @}
 addr1 addr2
 u1 u2 min 0 
 ?do @{ s1 s2 @}
   s1 c@@ s2 c@@ -
   ?dup-if
     unloop exit
   then
   s1 char+ s2 char+
 loop
 2drop
 u1 u2 - ;
@end example
Here it is clear from the start that @code{s1} has a different value
in every loop iteration.

@node Implementation,  , Programming Style, Gforth locals
@subsubsection Implementation
@cindex locals implementation
@cindex implementation of locals

@cindex locals stack
Gforth uses an extra locals stack. The most compelling reason for
this is that the return stack is not float-aligned; using an extra stack
also eliminates the problems and restrictions of using the return stack
as locals stack. Like the other stacks, the locals stack grows toward
lower addresses. A few primitives allow an efficient implementation:

doc-@local#
doc-f@local#
doc-laddr#
doc-lp+!#
doc-lp!
doc->l
doc-f>l

In addition to these primitives, some specializations of these
primitives for commonly occurring inline arguments are provided for
efficiency reasons, e.g., @code{@@local0} as specialization of
@code{@@local#} for the inline argument 0. The following compiling words
compile the right specialized version, or the general version, as
appropriate:

doc-compile-@local
doc-compile-f@local
doc-compile-lp+!

Combinations of conditional branches and @code{lp+!#} like
@code{?branch-lp+!#} (the locals pointer is only changed if the branch
is taken) are provided for efficiency and correctness in loops.

A special area in the dictionary space is reserved for keeping the
local variable names. @code{@{} switches the dictionary pointer to this
area and @code{@}} switches it back and generates the locals
initializing code. @code{W:} etc.@ are normal defining words. This
special area is cleared at the start of every colon definition.

@cindex wordlist for defining locals
A special feature of Gforth's dictionary is used to implement the
definition of locals without type specifiers: every wordlist (aka
vocabulary) has its own methods for searching
etc. (@pxref{Wordlists}). For the present purpose we defined a wordlist
with a special search method: When it is searched for a word, it
actually creates that word using @code{W:}. @code{@{} changes the search
order to first search the wordlist containing @code{@}}, @code{W:} etc.,
and then the wordlist for defining locals without type specifiers.

The lifetime rules support a stack discipline within a colon
definition: The lifetime of a local is either nested with other locals
lifetimes or it does not overlap them.

At @code{BEGIN}, @code{IF}, and @code{AHEAD} no code for locals stack
pointer manipulation is generated. Between control structure words
locals definitions can push locals onto the locals stack. @code{AGAIN}
is the simplest of the other three control flow words. It has to
restore the locals stack depth of the corresponding @code{BEGIN}
before branching. The code looks like this:
@format
@code{lp+!#} current-locals-size @minus{} dest-locals-size
@code{branch} <begin>
@end format

@code{UNTIL} is a little more complicated: If it branches back, it
must adjust the stack just like @code{AGAIN}. But if it falls through,
the locals stack must not be changed. The compiler generates the
following code:
@format
@code{?branch-lp+!#} <begin> current-locals-size @minus{} dest-locals-size
@end format
The locals stack pointer is only adjusted if the branch is taken.

@code{THEN} can produce somewhat inefficient code:
@format
@code{lp+!#} current-locals-size @minus{} orig-locals-size
<orig target>:
@code{lp+!#} orig-locals-size @minus{} new-locals-size
@end format
The second @code{lp+!#} adjusts the locals stack pointer from the
level at the @var{orig} point to the level after the @code{THEN}. The
first @code{lp+!#} adjusts the locals stack pointer from the current
level to the level at the orig point, so the complete effect is an
adjustment from the current level to the right level after the
@code{THEN}.

@cindex locals information on the control-flow stack
@cindex control-flow stack items, locals information
In a conventional Forth implementation a dest control-flow stack entry
is just the target address and an orig entry is just the address to be
patched. Our locals implementation adds a wordlist to every orig or dest
item. It is the list of locals visible (or assumed visible) at the point
described by the entry. Our implementation also adds a tag to identify
the kind of entry, in particular to differentiate between live and dead
(reachable and unreachable) orig entries.

A few unusual operations have to be performed on locals wordlists:

doc-common-list
doc-sub-list?
doc-list-size

Several features of our locals wordlist implementation make these
operations easy to implement: The locals wordlists are organised as
linked lists; the tails of these lists are shared, if the lists
contain some of the same locals; and the address of a name is greater
than the address of the names behind it in the list.

Another important implementation detail is the variable
@code{dead-code}. It is used by @code{BEGIN} and @code{THEN} to
determine if they can be reached directly or only through the branch
that they resolve. @code{dead-code} is set by @code{UNREACHABLE},
@code{AHEAD}, @code{EXIT} etc., and cleared at the start of a colon
definition, by @code{BEGIN} and usually by @code{THEN}.

Counted loops are similar to other loops in most respects, but
@code{LEAVE} requires special attention: It performs basically the same
service as @code{AHEAD}, but it does not create a control-flow stack
entry. Therefore the information has to be stored elsewhere;
traditionally, the information was stored in the target fields of the
branches created by the @code{LEAVE}s, by organizing these fields into a
linked list. Unfortunately, this clever trick does not provide enough
space for storing our extended control flow information. Therefore, we
introduce another stack, the leave stack. It contains the control-flow
stack entries for all unresolved @code{LEAVE}s.

Local names are kept until the end of the colon definition, even if
they are no longer visible in any control-flow path. In a few cases
this may lead to increased space needs for the locals name area, but
usually less than reclaiming this space would cost in code size.


@node ANS Forth locals,  , Gforth locals, Locals
@subsection ANS Forth locals
@cindex locals, ANS Forth style

The ANS Forth locals wordset does not define a syntax for locals, but
words that make it possible to define various syntaxes. One of the
possible syntaxes is a subset of the syntax we used in the Gforth locals
wordset, i.e.:

@example
@{ local1 local2 ... -- comment @}
@end example
or
@example
@{ local1 local2 ... @}
@end example

The order of the locals corresponds to the order in a stack comment. The
restrictions are:

@itemize @bullet
@item
Locals can only be cell-sized values (no type specifiers are allowed).
@item
Locals can be defined only outside control structures.
@item
Locals can interfere with explicit usage of the return stack. For the
exact (and long) rules, see the standard. If you don't use return stack
accessing words in a definition using locals, you will be all right. The
purpose of this rule is to make locals implementation on the return
stack easier.
@item
The whole definition must be in one line.
@end itemize

Locals defined in this way behave like @code{VALUE}s (@xref{Simple
Defining Words}). I.e., they are initialized from the stack. Using their
name produces their value. Their value can be changed using @code{TO}.

Since this syntax is supported by Gforth directly, you need not do
anything to use it. If you want to port a program using this syntax to
another ANS Forth system, use @file{compat/anslocal.fs} to implement the
syntax on the other system.

Note that a syntax shown in the standard, section A.13 looks
similar, but is quite different in having the order of locals
reversed. Beware!

The ANS Forth locals wordset itself consists of the following word

doc-(local)

The ANS Forth locals extension wordset defines a syntax, but it is so
awful that we strongly recommend not to use it. We have implemented this
syntax to make porting to Gforth easy, but do not document it here. The
problem with this syntax is that the locals are defined in an order
reversed with respect to the standard stack comment notation, making
programs harder to read, and easier to misread and miswrite. The only
merit of this syntax is that it is easy to implement using the ANS Forth
locals wordset.

@node Defining Words, Structures, Locals, Words
@section Defining Words
@cindex defining words

@menu
* Simple Defining Words::       
* Colon Definitions::           
* User-defined Defining Words::  
* Supplying names::             
* Interpretation and Compilation Semantics::  
@end menu

@node Simple Defining Words, Colon Definitions, Defining Words, Defining Words
@subsection Simple Defining Words
@cindex simple defining words
@cindex defining words, simple

doc-constant
doc-2constant
doc-fconstant
doc-variable
doc-2variable
doc-fvariable
doc-create
doc-user
doc-value
doc-to
doc-defer
doc-is

@node Colon Definitions, User-defined Defining Words, Simple Defining Words, Defining Words
@subsection Colon Definitions
@cindex colon definitions

@example
: name ( ... -- ... )
    word1 word2 word3 ;
@end example

creates a word called @code{name}, that, upon execution, executes
@code{word1 word2 word3}. @code{name} is a @dfn{(colon) definition}.

The explanation above is somewhat superficial. @xref{Interpretation and
Compilation Semantics} for an in-depth discussion of some of the issues
involved.

doc-:
doc-;

@node User-defined Defining Words, Supplying names, Colon Definitions, Defining Words
@subsection User-defined Defining Words
@cindex user-defined defining words
@cindex defining words, user-defined

You can create new defining words simply by wrapping defining-time code
around existing defining words and putting the sequence in a colon
definition.

@cindex @code{CREATE} ... @code{DOES>}
If you want the words defined with your defining words to behave
differently from words defined with standard defining words, you can
write your defining word like this:

@example
: def-word ( "name" -- )
    Create @var{code1}
DOES> ( ... -- ... )
    @var{code2} ;

def-word name
@end example

Technically, this fragment defines a defining word @code{def-word}, and
a word @code{name}; when you execute @code{name}, the address of the
body of @code{name} is put on the data stack and @var{code2} is executed
(the address of the body of @code{name} is the address @code{HERE}
returns immediately after the @code{CREATE}).

In other words, if you make the following definitions:

@example
: def-word1 ( "name" -- )
    Create @var{code1} ;

: action1 ( ... -- ... )
    @var{code2} ;

def-word name1
@end example

Using @code{name1 action1} is equivalent to using @code{name}.

E.g., you can implement @code{Constant} in this way:

@example
: constant ( w "name" -- )
    create ,
DOES> ( -- w )
    @@ ;
@end example

When you create a constant with @code{5 constant five}, first a new word
@code{five} is created, then the value 5 is laid down in the body of
@code{five} with @code{,}. When @code{five} is invoked, the address of
the body is put on the stack, and @code{@@} retrieves the value 5.

@cindex stack effect of @code{DOES>}-parts
@cindex @code{DOES>}-parts, stack effect
In the example above the stack comment after the @code{DOES>} specifies
the stack effect of the defined words, not the stack effect of the
following code (the following code expects the address of the body on
the top of stack, which is not reflected in the stack comment). This is
the convention that I use and recommend (it clashes a bit with using
locals declarations for stack effect specification, though).

@subsubsection Applications of @code{CREATE..DOES>}
@cindex @code{CREATE} ... @code{DOES>}, applications

You may wonder how to use this feature. Here are some usage patterns:

@cindex factoring similar colon definitions
When you see a sequence of code occurring several times, and you can
identify a meaning, you will factor it out as a colon definition. When
you see similar colon definitions, you can factor them using
@code{CREATE..DOES>}. E.g., an assembler usually defines several words
that look very similar:
@example
: ori, ( reg-target reg-source n -- )
    0 asm-reg-reg-imm ;
: andi, ( reg-target reg-source n -- )
    1 asm-reg-reg-imm ;
@end example

This could be factored with:
@example
: reg-reg-imm ( op-code -- )
    create ,
DOES> ( reg-target reg-source n -- )
    @@ asm-reg-reg-imm ;

0 reg-reg-imm ori,
1 reg-reg-imm andi,
@end example

@cindex currying
Another view of @code{CREATE..DOES>} is to consider it as a crude way to
supply a part of the parameters for a word (known as @dfn{currying} in
the functional language community). E.g., @code{+} needs two
parameters. Creating versions of @code{+} with one parameter fixed can
be done like this:
@example
: curry+ ( n1 -- )
    create ,
DOES> ( n2 -- n1+n2 )
    @@ + ;

 3 curry+ 3+
-2 curry+ 2-
@end example

@subsubsection The gory details of @code{CREATE..DOES>}
@cindex @code{CREATE} ... @code{DOES>}, details

doc-does>

@cindex @code{DOES>} in a separate definition
This means that you need not use @code{CREATE} and @code{DOES>} in the
same definition; E.g., you can put the @code{DOES>}-part in a separate
definition. This allows us to, e.g., select among different DOES>-parts:
@example
: does1 
DOES> ( ... -- ... )
    ... ;

: does2
DOES> ( ... -- ... )
    ... ;

: def-word ( ... -- ... )
    create ...
    IF
       does1
    ELSE
       does2
    ENDIF ;
@end example

@cindex @code{DOES>} in interpretation state
In a standard program you can apply a @code{DOES>}-part only if the last
word was defined with @code{CREATE}. In Gforth, the @code{DOES>}-part
will override the behaviour of the last word defined in any case. In a
standard program, you can use @code{DOES>} only in a colon
definition. In Gforth, you can also use it in interpretation state, in a
kind of one-shot mode:
@example
CREATE name ( ... -- ... )
  @var{initialization}
DOES>
  @var{code} ;
@end example
This is equivalent to the standard
@example
:noname
DOES>
    @var{code} ;
CREATE name EXECUTE ( ... -- ... )
    @var{initialization}
@end example

You can get the address of the body of a word with

doc->body

@node Supplying names, Interpretation and Compilation Semantics, User-defined Defining Words, Defining Words
@subsection Supplying names for the defined words
@cindex names for defined words
@cindex defining words, name parameter

@cindex defining words, name given in a string
By default, defining words take the names for the defined words from the
input stream. Sometimes you want to supply the name from a string. You
can do this with

doc-nextname

E.g.,

@example
s" foo" nextname create
@end example
is equivalent to
@example
create foo
@end example

@cindex defining words without name
Sometimes you want to define a word without a name. You can do this with

doc-noname

@cindex execution token of last defined word
To make any use of the newly defined word, you need its execution
token. You can get it with

doc-lastxt

E.g., you can initialize a deferred word with an anonymous colon
definition:
@example
Defer deferred
noname : ( ... -- ... )
  ... ;
lastxt IS deferred
@end example

@code{lastxt} also works when the last word was not defined as
@code{noname}. 

The standard has also recognized the need for anonymous words and
provides

doc-:noname

This leaves the execution token for the word on the stack after the
closing @code{;}. You can rewrite the last example with @code{:noname}:
@example
Defer deferred
:noname ( ... -- ... )
  ... ;
IS deferred
@end example

@node Interpretation and Compilation Semantics,  , Supplying names, Defining Words
@subsection Interpretation and Compilation Semantics
@cindex semantics, interpretation and compilation

@cindex interpretation semantics
The @dfn{interpretation semantics} of a word are what the text
interpreter does when it encounters the word in interpret state. It also
appears in some other contexts, e.g., the execution token returned by
@code{' @var{word}} identifies the interpretation semantics of
@var{word} (in other words, @code{' @var{word} execute} is equivalent to
interpret-state text interpretation of @code{@var{word}}).

@cindex compilation semantics
The @dfn{compilation semantics} of a word are what the text interpreter
does when it encounters the word in compile state. It also appears in
other contexts, e.g, @code{POSTPONE @var{word}} compiles@footnote{In
standard terminology, ``appends to the current definition''.} the
compilation semantics of @var{word}.

@cindex execution semantics
The standard also talks about @dfn{execution semantics}. They are used
only for defining the interpretation and compilation semantics of many
words. By default, the interpretation semantics of a word are to
@code{execute} its execution semantics, and the compilation semantics of
a word are to @code{compile,} its execution semantics.@footnote{In
standard terminology: The default interpretation semantics are its
execution semantics; the default compilation semantics are to append its
execution semantics to the execution semantics of the current
definition.}

@cindex immediate words
You can change the compilation semantics into @code{execute}ing the
execution semantics with

doc-immediate

@cindex compile-only words
You can remove the interpretation semantics of a word with

doc-compile-only
doc-restrict

Note that ticking (@code{'}) compile-only words gives an error
(``Interpreting a compile-only word'').

Gforth also allows you to define words with arbitrary combinations of
interpretation and compilation semantics.

doc-interpret/compile:

This feature was introduced for implementing @code{TO} and @code{S"}. I
recommend that you do not define such words, as cute as they may be:
they make it hard to get at both parts of the word in some contexts.
E.g., assume you want to get an execution token for the compilation
part. Instead, define two words, one that embodies the interpretation
part, and one that embodies the compilation part.  Once you have done
that, you can define a combined word with @code{interpret/compile:} for
the convenience of your users.

You also might try to provide an optimizing implementation of the
default compilation semantics with this feature, like this:

@example
:noname
   foo bar ;
:noname
   POSTPONE foo POSTPONE bar ;
interpret/compile: foobar
@end example

as an optimizing version of

@example
: foobar
    foo bar ;
@end example

Unfortunately, this does not work correctly with @code{[compile]},
because @code{[compile]} assumes that the compilation semantics of all
@code{interpret/compile:} words are non-default. I.e., @code{[compile]
foobar} would compile the compilation semantics for the optimizing
@code{foobar}, whereas it would compile the interpretation semantics for
the non-optimizing @code{foobar}.

@cindex state-smart words are a bad idea
Some people try to use state-smart words to emulate the feature provided
by @code{interpret/compile:} (words are state-smart if they check
@code{STATE} during execution). E.g., they would try to code
@code{foobar} like this:

@example
: foobar
  STATE @@
  IF ( compilation state )
    POSTPONE foo POSTPONE bar
  ELSE
    foo bar
  ENDIF ; immediate
@end example

While this works if @code{foobar} is processed only by the text
interpreter, it does not work in other contexts (like @code{'} or
@code{POSTPONE}). E.g., @code{' foobar} will produce an execution token
for a state-smart word, not for the interpretation semantics of the
original @code{foobar}; when you execute this execution token (directly
with @code{EXECUTE} or indirectly through @code{COMPILE,}) in compile
state, the result will not be what you expected (i.e., it will not
perform @code{foo bar}). State-smart words are a bad idea. Simply don't
write them!

@cindex defining words with arbitrary semantics combinations
It is also possible to write defining words that define words with
arbitrary combinations of interpretation and compilation semantics. In
general, this looks like:

@example
: def-word
    create-interpret/compile
    @var{code1}
interpretation>
    @var{code2}
<interpretation
compilation>
    @var{code3}
<compilation ;
@end example

For a @var{word} defined with @code{def-word}, the interpretation
semantics are to push the address of the body of @var{word} and perform
@var{code2}, and the compilation semantics are to push the address of
the body of @var{word} and perform @var{code3}. E.g., @code{constant}
can also be defined like this (except that the defined constants don't
behave correctly when @code{[compile]}d):

@example
: constant ( n "name" -- )
    create-interpret/compile
    ,
interpretation> ( -- n )
    @@
<interpretation
compilation> ( compilation. -- ; run-time. -- n )
    @@ postpone literal
<compilation ;
@end example

doc-create-interpret/compile
doc-interpretation>
doc-<interpretation
doc-compilation>
doc-<compilation

Note that words defined with @code{interpret/compile:} and
@code{create-interpret/compile} have an extended header structure that
differs from other words; however, unless you try to access them with
plain address arithmetic, you should not notice this. Words for
accessing the header structure usually know how to deal with this; e.g.,
@code{' word >body} also gives you the body of a word created with
@code{create-interpret/compile}.

@c ----------------------------------------------------------
@node Structures, Object-oriented Forth, Defining Words, Words
@section  Structures
@cindex structures
@cindex records

This section presents the structure package that comes with Gforth. A
version of the package implemented in plain ANS Forth is available in
@file{compat/struct.fs}. This package was inspired by a posting on
comp.lang.forth in 1989 (unfortunately I don't remember, by whom;
possibly John Hayes). A version of this section has been published in
???. Marcel Hendrix provided helpful comments.

@menu
* Why explicit structure support?::  
* Structure Usage::             
* Structure Naming Convention::  
* Structure Implementation::    
* Structure Glossary::          
@end menu

@node Why explicit structure support?, Structure Usage, Structures, Structures
@subsection Why explicit structure support?

@cindex address arithmetic for structures
@cindex structures using address arithmetic
If we want to use a structure containing several fields, we could simply
reserve memory for it, and access the fields using address arithmetic
(@pxref{Address arithmetic}). As an example, consider a structure with
the following fields

@table @code
@item a
is a float
@item b
is a cell
@item c
is a float
@end table

Given the (float-aligned) base address of the structure we get the
address of the field

@table @code
@item a
without doing anything further.
@item b
with @code{float+}
@item c
with @code{float+ cell+ faligned}
@end table

It is easy to see that this can become quite tiring. 

Moreover, it is not very readable, because seeing a
@code{cell+} tells us neither which kind of structure is
accessed nor what field is accessed; we have to somehow infer the kind
of structure, and then look up in the documentation, which field of
that structure corresponds to that offset.

Finally, this kind of address arithmetic also causes maintenance
troubles: If you add or delete a field somewhere in the middle of the
structure, you have to find and change all computations for the fields
afterwards.

So, instead of using @code{cell+} and friends directly, how
about storing the offsets in constants:

@example
0 constant a-offset
0 float+ constant b-offset
0 float+ cell+ faligned c-offset
@end example

Now we can get the address of field @code{x} with @code{x-offset
+}. This is much better in all respects. Of course, you still
have to change all later offset definitions if you add a field. You can
fix this by declaring the offsets in the following way:

@example
0 constant a-offset
a-offset float+ constant b-offset
b-offset cell+ faligned constant c-offset
@end example

Since we always use the offsets with @code{+}, using a defining
word @code{cfield} that includes the @code{+} in the
action of the defined word offers itself:

@example
: cfield ( n "name" -- )
    create ,
does> ( name execution: addr1 -- addr2 )
    @@ + ;

0 cfield a
0 a float+ cfield b
0 b cell+ faligned cfield c
@end example

Instead of @code{x-offset +}, we now simply write @code{x}.

The structure field words now can be used quite nicely. However,
their definition is still a bit cumbersome: We have to repeat the
name, the information about size and alignment is distributed before
and after the field definitions etc.  The structure package presented
here addresses these problems.

@node Structure Usage, Structure Naming Convention, Why explicit structure support?, Structures
@subsection Structure Usage
@cindex structure usage

@cindex @code{field} usage
@cindex @code{struct} usage
@cindex @code{end-struct} usage
You can define a structure for a (data-less) linked list with
@example
struct
    cell% field list-next
end-struct list%
@end example

With the address of the list node on the stack, you can compute the
address of the field that contains the address of the next node with
@code{list-next}. E.g., you can determine the length of a list
with:

@example
: list-length ( list -- n )
\ "list" is a pointer to the first element of a linked list
\ "n" is the length of the list
    0 begin ( list1 n1 )
        over
    while ( list1 n1 )
        1+ swap list-next @@ swap
    repeat
    nip ;
@end example

You can reserve memory for a list node in the dictionary with
@code{list% %allot}, which leaves the address of the list node on the
stack. For the equivalent allocation on the heap you can use @code{list%
%alloc} (or, for an @code{allocate}-like stack effect (i.e., with ior),
use @code{list% %allocate}). You can also get the the size of a list
node with @code{list% %size} and it's alignment with @code{list%
%alignment}.

Note that in ANS Forth the body of a @code{create}d word is
@code{aligned} but not necessarily @code{faligned};
therefore, if you do a
@example
create @emph{name} foo% %allot
@end example

then the memory alloted for @code{foo%} is
guaranteed to start at the body of @code{@emph{name}} only if
@code{foo%} contains only character, cell and double fields.

@cindex strcutures containing structures
You can also include a structure @code{foo%} as field of
another structure, with:
@example
struct
...
    foo% field ...
...
end-struct ...
@end example

@cindex structure extension
@cindex extended records
Instead of starting with an empty structure, you can also extend an
existing structure. E.g., a plain linked list without data, as defined
above, is hardly useful; You can extend it to a linked list of integers,
like this:@footnote{This feature is also known as @emph{extended
records}. It is the main innovation in the Oberon language; in other
words, adding this feature to Modula-2 led Wirth to create a new
language, write a new compiler etc.  Adding this feature to Forth just
requires a few lines of code.}

@example
list%
    cell% field intlist-int
end-struct intlist%
@end example

@code{intlist%} is a structure with two fields:
@code{list-next} and @code{intlist-int}.

@cindex structures containing arrays
You can specify an array type containing @emph{n} elements of
type @code{foo%} like this:

@example
foo% @emph{n} *
@end example

You can use this array type in any place where you can use a normal
type, e.g., when defining a @code{field}, or with
@code{%allot}.

@cindex first field optimization
The first field is at the base address of a structure and the word
for this field (e.g., @code{list-next}) actually does not change
the address on the stack. You may be tempted to leave it away in the
interest of run-time and space efficiency. This is not necessary,
because the structure package optimizes this case and compiling such
words does not generate any code. So, in the interest of readability
and maintainability you should include the word for the field when
accessing the field.

@node Structure Naming Convention, Structure Implementation, Structure Usage, Structures
@subsection Structure Naming Convention
@cindex structure naming conventions

The field names that come to (my) mind are often quite generic, and,
if used, would cause frequent name clashes. E.g., many structures
probably contain a @code{counter} field. The structure names
that come to (my) mind are often also the logical choice for the names
of words that create such a structure.

Therefore, I have adopted the following naming conventions: 

@itemize @bullet
@cindex field naming convention
@item
The names of fields are of the form
@code{@emph{struct}-@emph{field}}, where
@code{@emph{struct}} is the basic name of the structure, and
@code{@emph{field}} is the basic name of the field. You can
think about field words as converting converts the (address of the)
structure into the (address of the) field.

@cindex structure naming convention
@item
The names of structures are of the form
@code{@emph{struct}%}, where
@code{@emph{struct}} is the basic name of the structure.
@end itemize

This naming convention does not work that well for fields of extended
structures; e.g., the integer list structure has a field
@code{intlist-int}, but has @code{list-next}, not
@code{intlist-next}.

@node Structure Implementation, Structure Glossary, Structure Naming Convention, Structures
@subsection Structure Implementation
@cindex structure implementation
@cindex implementation of structures

The central idea in the implementation is to pass the data about the
structure being built on the stack, not in some global
variable. Everything else falls into place naturally once this design
decision is made.

The type description on the stack is of the form @emph{align
size}. Keeping the size on the top-of-stack makes dealing with arrays
very simple.

@code{field} is a defining word that uses @code{create}
and @code{does>}. The body of the field contains the offset
of the field, and the normal @code{does>} action is

@example
@ +
@end example

i.e., add the offset to the address, giving the stack effect
@code{addr1 -- addr2} for a field.

@cindex first field optimization, implementation
This simple structure is slightly complicated by the optimization
for fields with offset 0, which requires a different
@code{does>}-part (because we cannot rely on there being
something on the stack if such a field is invoked during
compilation). Therefore, we put the different @code{does>}-parts
in separate words, and decide which one to invoke based on the
offset. For a zero offset, the field is basically a noop; it is
immediate, and therefore no code is generated when it is compiled.

@node Structure Glossary,  , Structure Implementation, Structures
@subsection Structure Glossary
@cindex structure glossary

doc-%align
doc-%alignment
doc-%alloc
doc-%allocate
doc-%allot
doc-cell%
doc-char%
doc-dfloat%
doc-double%
doc-end-struct
doc-field
doc-float%
doc-nalign
doc-sfloat%
doc-%size
doc-struct

@c -------------------------------------------------------------
@node Object-oriented Forth, Tokens for Words, Structures, Words
@section Object-oriented Forth

Gforth comes with three packets for object-oriented programming,
@file{objects.fs}, @file{oof.fs}, and @file{mini-oof.fs}; none of them
is preloaded, so you have to @code{include} them before use. The most
important differences between these packets (and others) are discussed
in @ref{Comparison with other object models}. All packets are written
in ANS Forth and can be used with any other ANS Forth.

@menu
* Objects::                     
* OOF::                         
* Mini-OOF::                    
@end menu

@node Objects, OOF, Object-oriented Forth, Object-oriented Forth
@subsection Objects
@cindex objects
@cindex object-oriented programming

@cindex @file{objects.fs}
@cindex @file{oof.fs}

This section describes the @file{objects.fs} packet. This material also has been published in @cite{Yet Another Forth Objects Package} by Anton Ertl and appeared in Forth Dimensions 19(2), pages 37--43 (@url{http://www.complang.tuwien.ac.at/forth/objects/objects.html}).
@c McKewan's and Zsoter's packages

This section assumes (in some places) that you have read @ref{Structures}.

@menu
* Properties of the Objects model::  
* Why object-oriented programming?::  
* Object-Oriented Terminology::  
* Basic Objects Usage::         
* The class Object::            
* Creating objects::            
* Object-Oriented Programming Style::  
* Class Binding::               
* Method conveniences::         
* Classes and Scoping::         
* Object Interfaces::           
* Objects Implementation::      
* Comparison with other object models::  
* Objects Glossary::            
@end menu

Marcel Hendrix provided helpful comments on this section. Andras Zsoter
and Bernd Paysan helped me with the related works section.

@node Properties of the Objects model, Why object-oriented programming?, Objects, Objects
@subsubsection Properties of the @file{objects.fs} model
@cindex @file{objects.fs} properties

@itemize @bullet
@item
It is straightforward to pass objects on the stack. Passing
selectors on the stack is a little less convenient, but possible.

@item
Objects are just data structures in memory, and are referenced by
their address. You can create words for objects with normal defining
words like @code{constant}. Likewise, there is no difference
between instance variables that contain objects and those
that contain other data.

@item
Late binding is efficient and easy to use.

@item
It avoids parsing, and thus avoids problems with state-smartness
and reduced extensibility; for convenience there are a few parsing
words, but they have non-parsing counterparts. There are also a few
defining words that parse. This is hard to avoid, because all standard
defining words parse (except @code{:noname}); however, such
words are not as bad as many other parsing words, because they are not
state-smart.

@item
It does not try to incorporate everything. It does a few things
and does them well (IMO). In particular, I did not intend to support
information hiding with this model (although it has features that may
help); you can use a separate package for achieving this.

@item
It is layered; you don't have to learn and use all features to use this
model. Only a few features are necessary (@xref{Basic Objects Usage},
@xref{The class Object}, @xref{Creating objects}.), the others
are optional and independent of each other.

@item
An implementation in ANS Forth is available.

@end itemize

I have used the technique, on which this model is based, for
implementing the parser generator Gray; we have also used this technique
in Gforth for implementing the various flavours of wordlists (hashed or
not, case-sensitive or not, special-purpose wordlists for locals etc.).

@node Why object-oriented programming?, Object-Oriented Terminology, Properties of the Objects model, Objects
@subsubsection Why object-oriented programming?
@cindex object-oriented programming motivation
@cindex motivation for object-oriented programming

Often we have to deal with several data structures (@emph{objects}),
that have to be treated similarly in some respects, but differ in
others. Graphical objects are the textbook example: circles,
triangles, dinosaurs, icons, and others, and we may want to add more
during program development. We want to apply some operations to any
graphical object, e.g., @code{draw} for displaying it on the
screen. However, @code{draw} has to do something different for
every kind of object.

We could implement @code{draw} as a big @code{CASE}
control structure that executes the appropriate code depending on the
kind of object to be drawn. This would be not be very elegant, and,
moreover, we would have to change @code{draw} every time we add
a new kind of graphical object (say, a spaceship).

What we would rather do is: When defining spaceships, we would tell
the system: "Here's how you @code{draw} a spaceship; you figure
out the rest."

This is the problem that all systems solve that (rightfully) call
themselves object-oriented, and the object-oriented package I present
here also solves this problem (and not much else).

@node Object-Oriented Terminology, Basic Objects Usage, Why object-oriented programming?, Objects
@subsubsection Object-Oriented Terminology
@cindex object-oriented terminology
@cindex terminology for object-oriented programming

This section is mainly for reference, so you don't have to understand
all of it right away.  The terminology is mainly Smalltalk-inspired.  In
short:

@table @emph
@cindex class
@item class
a data structure definition with some extras.

@cindex object
@item object
an instance of the data structure described by the class definition.

@cindex instance variables
@item instance variables
fields of the data structure.

@cindex selector
@cindex method selector
@cindex virtual function
@item selector
(or @emph{method selector}) a word (e.g.,
@code{draw}) for performing an operation on a variety of data
structures (classes). A selector describes @emph{what} operation to
perform. In C++ terminology: a (pure) virtual function.

@cindex method
@item method
the concrete definition that performs the operation
described by the selector for a specific class. A method specifies
@emph{how} the operation is performed for a specific class.

@cindex selector invocation
@cindex message send
@cindex invoking a selector
@item selector invocation
a call of a selector. One argument of the call (the TOS (top-of-stack))
is used for determining which method is used. In Smalltalk terminology:
a message (consisting of the selector and the other arguments) is sent
to the object.

@cindex receiving object
@item receiving object
the object used for determining the method executed by a selector
invocation. In our model it is the object that is on the TOS when the
selector is invoked. (@emph{Receiving} comes from Smalltalks
@emph{message} terminology.)

@cindex child class
@cindex parent class
@cindex inheritance
@item child class
a class that has (@emph{inherits}) all properties (instance variables,
selectors, methods) from a @emph{parent class}. In Smalltalk
terminology: The subclass inherits from the superclass. In C++
terminology: The derived class inherits from the base class.

@end table

@c If you wonder about the message sending terminology, it comes from
@c a time when each object had it's own task and objects communicated via
@c message passing; eventually the Smalltalk developers realized that
@c they can do most things through simple (indirect) calls. They kept the
@c terminology.

@node Basic Objects Usage, The class Object, Object-Oriented Terminology, Objects
@subsubsection Basic Objects Usage
@cindex basic objects usage
@cindex objects, basic usage

You can define a class for graphical objects like this:

@cindex @code{class} usage
@cindex @code{end-class} usage
@cindex @code{selector} usage
@example
object class \ "object" is the parent class
  selector draw ( x y graphical -- )
end-class graphical
@end example

This code defines a class @code{graphical} with an
operation @code{draw}.  We can perform the operation
@code{draw} on any @code{graphical} object, e.g.:

@example
100 100 t-rex draw
@end example

where @code{t-rex} is a word (say, a constant) that produces a
graphical object.

@cindex abstract class
How do we create a graphical object? With the present definitions,
we cannot create a useful graphical object. The class
@code{graphical} describes graphical objects in general, but not
any concrete graphical object type (C++ users would call it an
@emph{abstract class}); e.g., there is no method for the selector
@code{draw} in the class @code{graphical}.

For concrete graphical objects, we define child classes of the
class @code{graphical}, e.g.:

@cindex @code{overrides} usage
@cindex @code{field} usage in class definition
@example
graphical class \ "graphical" is the parent class
  cell% field circle-radius

:noname ( x y circle -- )
  circle-radius @@ draw-circle ;
overrides draw

:noname ( n-radius circle -- )
  circle-radius ! ;
overrides construct

end-class circle
@end example

Here we define a class @code{circle} as a child of @code{graphical},
with a field @code{circle-radius} (which behaves just like a field in
@pxref{Structures}); it defines new methods for the selectors
@code{draw} and @code{construct} (@code{construct} is defined in
@code{object}, the parent class of @code{graphical}).

Now we can create a circle on the heap (i.e.,
@code{allocate}d memory) with

@cindex @code{heap-new} usage
@example
50 circle heap-new constant my-circle
@end example

@code{heap-new} invokes @code{construct}, thus
initializing the field @code{circle-radius} with 50. We can draw
this new circle at (100,100) with

@example
100 100 my-circle draw
@end example

@cindex selector invocation, restrictions
@cindex class definition, restrictions
Note: You can invoke a selector only if the object on the TOS
(the receiving object) belongs to the class where the selector was
defined or one of its descendents; e.g., you can invoke
@code{draw} only for objects belonging to @code{graphical}
or its descendents (e.g., @code{circle}).  Immediately before
@code{end-class}, the search order has to be the same as
immediately after @code{class}.

@node The class Object, Creating objects, Basic Objects Usage, Objects
@subsubsection The class @code{object}
@cindex @code{object} class

When you define a class, you have to specify a parent class.  So how do
you start defining classes? There is one class available from the start:
@code{object}. You can use it as ancestor for all classes. It is the
only class that has no parent. It has two selectors: @code{construct}
and @code{print}.

@node Creating objects, Object-Oriented Programming Style, The class Object, Objects
@subsubsection Creating objects
@cindex creating objects
@cindex object creation
@cindex object allocation options

@cindex @code{heap-new} discussion
@cindex @code{dict-new} discussion
@cindex @code{construct} discussion
You can create and initialize an object of a class on the heap with
@code{heap-new} ( ... class -- object ) and in the dictionary
(allocation with @code{allot}) with @code{dict-new} (
... class -- object ). Both words invoke @code{construct}, which
consumes the stack items indicated by "..." above.

@cindex @code{init-object} discussion
@cindex @code{class-inst-size} discussion
If you want to allocate memory for an object yourself, you can get its
alignment and size with @code{class-inst-size 2@@} ( class --
align size ). Once you have memory for an object, you can initialize
it with @code{init-object} ( ... class object -- );
@code{construct} does only a part of the necessary work.

@node Object-Oriented Programming Style, Class Binding, Creating objects, Objects
@subsubsection Object-Oriented Programming Style
@cindex object-oriented programming style

This section is not exhaustive.

@cindex stack effects of selectors
@cindex selectors and stack effects
In general, it is a good idea to ensure that all methods for the
same selector have the same stack effect: when you invoke a selector,
you often have no idea which method will be invoked, so, unless all
methods have the same stack effect, you will not know the stack effect
of the selector invocation.

One exception to this rule is methods for the selector
@code{construct}. We know which method is invoked, because we
specify the class to be constructed at the same place. Actually, I
defined @code{construct} as a selector only to give the users a
convenient way to specify initialization. The way it is used, a
mechanism different from selector invocation would be more natural
(but probably would take more code and more space to explain).

@node Class Binding, Method conveniences, Object-Oriented Programming Style, Objects
@subsubsection Class Binding
@cindex class binding
@cindex early binding

@cindex late binding
Normal selector invocations determine the method at run-time depending
on the class of the receiving object (late binding).

Sometimes we want to invoke a different method. E.g., assume that
you want to use the simple method for @code{print}ing
@code{object}s instead of the possibly long-winded
@code{print} method of the receiver class. You can achieve this
by replacing the invocation of @code{print} with

@cindex @code{[bind]} usage
@example
[bind] object print
@end example

in compiled code or

@cindex @code{bind} usage
@example
bind object print
@end example

@cindex class binding, alternative to
in interpreted code. Alternatively, you can define the method with a
name (e.g., @code{print-object}), and then invoke it through the
name. Class binding is just a (often more convenient) way to achieve
the same effect; it avoids name clutter and allows you to invoke
methods directly without naming them first.

@cindex superclass binding
@cindex parent class binding
A frequent use of class binding is this: When we define a method
for a selector, we often want the method to do what the selector does
in the parent class, and a little more. There is a special word for
this purpose: @code{[parent]}; @code{[parent]
@emph{selector}} is equivalent to @code{[bind] @emph{parent
selector}}, where @code{@emph{parent}} is the parent
class of the current class. E.g., a method definition might look like:

@cindex @code{[parent]} usage
@example
:noname
  dup [parent] foo \ do parent's foo on the receiving object
  ... \ do some more
; overrides foo
@end example

@cindex class binding as optimization
In @cite{Object-oriented programming in ANS Forth} (Forth Dimensions,
March 1997), Andrew McKewan presents class binding as an optimization
technique. I recommend not using it for this purpose unless you are in
an emergency. Late binding is pretty fast with this model anyway, so the
benefit of using class binding is small; the cost of using class binding
where it is not appropriate is reduced maintainability.

While we are at programming style questions: You should bind
selectors only to ancestor classes of the receiving object. E.g., say,
you know that the receiving object is of class @code{foo} or its
descendents; then you should bind only to @code{foo} and its
ancestors.

@node Method conveniences, Classes and Scoping, Class Binding, Objects
@subsubsection Method conveniences
@cindex method conveniences

In a method you usually access the receiving object pretty often.  If
you define the method as a plain colon definition (e.g., with
@code{:noname}), you may have to do a lot of stack
gymnastics. To avoid this, you can define the method with @code{m:
... ;m}. E.g., you could define the method for
@code{draw}ing a @code{circle} with

@cindex @code{this} usage
@cindex @code{m:} usage
@cindex @code{;m} usage
@example
m: ( x y circle -- )
  ( x y ) this circle-radius @@ draw-circle ;m
@end example

@cindex @code{exit} in @code{m: ... ;m}
@cindex @code{exitm} discussion
@cindex @code{catch} in @code{m: ... ;m}
When this method is executed, the receiver object is removed from the
stack; you can access it with @code{this} (admittedly, in this
example the use of @code{m: ... ;m} offers no advantage). Note
that I specify the stack effect for the whole method (i.e. including
the receiver object), not just for the code between @code{m:}
and @code{;m}. You cannot use @code{exit} in
@code{m:...;m}; instead, use
@code{exitm}.@footnote{Moreover, for any word that calls
@code{catch} and was defined before loading
@code{objects.fs}, you have to redefine it like I redefined
@code{catch}: @code{: catch this >r catch r> to-this ;}}

@cindex @code{inst-var} usage
You will frequently use sequences of the form @code{this
@emph{field}} (in the example above: @code{this
circle-radius}). If you use the field only in this way, you can
define it with @code{inst-var} and eliminate the
@code{this} before the field name. E.g., the @code{circle}
class above could also be defined with:

@example
graphical class
  cell% inst-var radius

m: ( x y circle -- )
  radius @@ draw-circle ;m
overrides draw

m: ( n-radius circle -- )
  radius ! ;m
overrides construct

end-class circle
@end example

@code{radius} can only be used in @code{circle} and its
descendent classes and inside @code{m:...;m}.

@cindex @code{inst-value} usage
You can also define fields with @code{inst-value}, which is
to @code{inst-var} what @code{value} is to
@code{variable}.  You can change the value of such a field with
@code{[to-inst]}.  E.g., we could also define the class
@code{circle} like this:

@example
graphical class
  inst-value radius

m: ( x y circle -- )
  radius draw-circle ;m
overrides draw

m: ( n-radius circle -- )
  [to-inst] radius ;m
overrides construct

end-class circle
@end example


@node Classes and Scoping, Object Interfaces, Method conveniences, Objects
@subsubsection Classes and Scoping
@cindex classes and scoping
@cindex scoping and classes

Inheritance is frequent, unlike structure extension. This exacerbates
the problem with the field name convention (@pxref{Structure Naming
Convention}): One always has to remember in which class the field was
originally defined; changing a part of the class structure would require
changes for renaming in otherwise unaffected code.

@cindex @code{inst-var} visibility
@cindex @code{inst-value} visibility
To solve this problem, I added a scoping mechanism (which was not in my
original charter): A field defined with @code{inst-var} (or
@code{inst-value}) is visible only in the class where it is defined and in
the descendent classes of this class.  Using such fields only makes
sense in @code{m:}-defined methods in these classes anyway.

This scoping mechanism allows us to use the unadorned field name,
because name clashes with unrelated words become much less likely.

@cindex @code{protected} discussion
@cindex @code{private} discussion
Once we have this mechanism, we can also use it for controlling the
visibility of other words: All words defined after
@code{protected} are visible only in the current class and its
descendents. @code{public} restores the compilation
(i.e. @code{current}) wordlist that was in effect before. If you
have several @code{protected}s without an intervening
@code{public} or @code{set-current}, @code{public}
will restore the compilation wordlist in effect before the first of
these @code{protected}s.

@node Object Interfaces, Objects Implementation, Classes and Scoping, Objects
@subsubsection Object Interfaces
@cindex object interfaces
@cindex interfaces for objects

In this model you can only call selectors defined in the class of the
receiving objects or in one of its ancestors. If you call a selector
with a receiving object that is not in one of these classes, the
result is undefined; if you are lucky, the program crashes
immediately.

@cindex selectors common to hardly-related classes
Now consider the case when you want to have a selector (or several)
available in two classes: You would have to add the selector to a
common ancestor class, in the worst case to @code{object}. You
may not want to do this, e.g., because someone else is responsible for
this ancestor class.

The solution for this problem is interfaces. An interface is a
collection of selectors. If a class implements an interface, the
selectors become available to the class and its descendents. A class
can implement an unlimited number of interfaces. For the problem
discussed above, we would define an interface for the selector(s), and
both classes would implement the interface.

As an example, consider an interface @code{storage} for
writing objects to disk and getting them back, and a class
@code{foo} foo that implements it. The code for this would look
like this:

@cindex @code{interface} usage
@cindex @code{end-interface} usage
@cindex @code{implementation} usage
@example
interface
  selector write ( file object -- )
  selector read1 ( file object -- )
end-interface storage

bar class
  storage implementation

... overrides write
... overrides read
...
end-class foo
@end example

(I would add a word @code{read} ( file -- object ) that uses
@code{read1} internally, but that's beyond the point illustrated
here.)

Note that you cannot use @code{protected} in an interface; and
of course you cannot define fields.

In the Neon model, all selectors are available for all classes;
therefore it does not need interfaces. The price you pay in this model
is slower late binding, and therefore, added complexity to avoid late
binding.

@node Objects Implementation, Comparison with other object models, Object Interfaces, Objects
@subsubsection @file{objects.fs} Implementation
@cindex @file{objects.fs} implementation

@cindex @code{object-map} discussion
An object is a piece of memory, like one of the data structures
described with @code{struct...end-struct}. It has a field
@code{object-map} that points to the method map for the object's
class.

@cindex method map
@cindex virtual function table
The @emph{method map}@footnote{This is Self terminology; in C++
terminology: virtual function table.} is an array that contains the
execution tokens (XTs) of the methods for the object's class. Each
selector contains an offset into the method maps.

@cindex @code{selector} implementation, class
@code{selector} is a defining word that uses
@code{create} and @code{does>}. The body of the
selector contains the offset; the @code{does>} action for a
class selector is, basically:

@example
( object addr ) @@ over object-map @@ + @@ execute
@end example

Since @code{object-map} is the first field of the object, it
does not generate any code. As you can see, calling a selector has a
small, constant cost.

@cindex @code{current-interface} discussion
@cindex class implementation and representation
A class is basically a @code{struct} combined with a method
map. During the class definition the alignment and size of the class
are passed on the stack, just as with @code{struct}s, so
@code{field} can also be used for defining class
fields. However, passing more items on the stack would be
inconvenient, so @code{class} builds a data structure in memory,
which is accessed through the variable
@code{current-interface}. After its definition is complete, the
class is represented on the stack by a pointer (e.g., as parameter for
a child class definition).

At the start, a new class has the alignment and size of its parent,
and a copy of the parent's method map. Defining new fields extends the
size and alignment; likewise, defining new selectors extends the
method map. @code{overrides} just stores a new XT in the method
map at the offset given by the selector.

@cindex class binding, implementation
Class binding just gets the XT at the offset given by the selector
from the class's method map and @code{compile,}s (in the case of
@code{[bind]}) it.

@cindex @code{this} implementation
@cindex @code{catch} and @code{this}
@cindex @code{this} and @code{catch}
I implemented @code{this} as a @code{value}. At the
start of an @code{m:...;m} method the old @code{this} is
stored to the return stack and restored at the end; and the object on
the TOS is stored @code{TO this}. This technique has one
disadvantage: If the user does not leave the method via
@code{;m}, but via @code{throw} or @code{exit},
@code{this} is not restored (and @code{exit} may
crash). To deal with the @code{throw} problem, I have redefined
@code{catch} to save and restore @code{this}; the same
should be done with any word that can catch an exception. As for
@code{exit}, I simply forbid it (as a replacement, there is
@code{exitm}).

@cindex @code{inst-var} implementation
@code{inst-var} is just the same as @code{field}, with
a different @code{does>} action:
@example
@@ this +
@end example
Similar for @code{inst-value}.

@cindex class scoping implementation
Each class also has a wordlist that contains the words defined with
@code{inst-var} and @code{inst-value}, and its protected
words. It also has a pointer to its parent. @code{class} pushes
the wordlists of the class an all its ancestors on the search order,
and @code{end-class} drops them.

@cindex interface implementation
An interface is like a class without fields, parent and protected
words; i.e., it just has a method map. If a class implements an
interface, its method map contains a pointer to the method map of the
interface. The positive offsets in the map are reserved for class
methods, therefore interface map pointers have negative
offsets. Interfaces have offsets that are unique throughout the
system, unlike class selectors, whose offsets are only unique for the
classes where the selector is available (invokable).

This structure means that interface selectors have to perform one
indirection more than class selectors to find their method. Their body
contains the interface map pointer offset in the class method map, and
the method offset in the interface method map. The
@code{does>} action for an interface selector is, basically:

@example
( object selector-body )
2dup selector-interface @@ ( object selector-body object interface-offset )
swap object-map @@ + @@ ( object selector-body map )
swap selector-offset @@ + @@ execute
@end example

where @code{object-map} and @code{selector-offset} are
first fields and generate no code.

As a concrete example, consider the following code:

@example
interface
  selector if1sel1
  selector if1sel2
end-interface if1

object class
  if1 implementation
  selector cl1sel1
  cell% inst-var cl1iv1

' m1 overrides construct
' m2 overrides if1sel1
' m3 overrides if1sel2
' m4 overrides cl1sel2
end-class cl1

create obj1 object dict-new drop
create obj2 cl1    dict-new drop
@end example

The data structure created by this code (including the data structure
for @code{object}) is shown in the <a
href="objects-implementation.eps">figure</a>, assuming a cell size of 4.

@node Comparison with other object models, Objects Glossary, Objects Implementation, Objects
@subsubsection Comparison with other object models
@cindex comparison of object models
@cindex object models, comparison

Many object-oriented Forth extensions have been proposed (@cite{A survey
of object-oriented Forths} (SIGPLAN Notices, April 1996) by Bradford
J. Rodriguez and W. F. S. Poehlman lists 17). Here I'll discuss the
relation of @file{objects.fs} to two well-known and two closely-related
(by the use of method maps) models.

@cindex Neon model
The most popular model currently seems to be the Neon model (see
@cite{Object-oriented programming in ANS Forth} (Forth Dimensions, March
1997) by Andrew McKewan). The Neon model uses a @code{@emph{selector
object}} syntax, which makes it unnatural to pass objects on the
stack. It also requires that the selector parses the input stream (at
compile time); this leads to reduced extensibility and to bugs that are
hard to find. Finally, it allows using every selector to every object;
this eliminates the need for classes, but makes it harder to create
efficient implementations. A longer version of this critique can be
found in @cite{On Standardizing Object-Oriented Forth Extensions} (Forth
Dimensions, May 1997) by Anton Ertl.

@cindex Pountain's object-oriented model
Another well-known publication is @cite{Object-Oriented Forth} (Academic
Press, London, 1987) by Dick Pountain. However, it is not really about
object-oriented programming, because it hardly deals with late
binding. Instead, it focuses on features like information hiding and
overloading that are characteristic of modular languages like Ada (83).

@cindex Zsoter's object-oriented model
In @cite{Does late binding have to be slow?} (Forth Dimensions ??? 1996)
Andras Zsoter describes a model that makes heavy use of an active object
(like @code{this} in @file{objects.fs}): The active object is not only
used for accessing all fields, but also specifies the receiving object
of every selector invocation; you have to change the active object
explicitly with @code{@{ ... @}}, whereas in @file{objects.fs} it
changes more or less implicitly at @code{m: ... ;m}. Such a change at
the method entry point is unnecessary with the Zsoter's model, because
the receiving object is the active object already; OTOH, the explicit
change is absolutely necessary in that model, because otherwise no one
could ever change the active object. An ANS Forth implementation of this
model is available at @url{http://www.forth.org/fig/oopf.html}.

@cindex @file{oof.fs}, differences to other models
The @file{oof.fs} model combines information hiding and overloading
resolution (by keeping names in various wordlists) with object-oriented
programming. It sets the active object implicitly on method entry, but
also allows explicit changing (with @code{>o...o>} or with
@code{with...endwith}). It uses parsing and state-smart objects and
classes for resolving overloading and for early binding: the object or
class parses the selector and determines the method from this. If the
selector is not parsed by an object or class, it performs a call to the
selector for the active object (late binding), like Zsoter's model.
Fields are always accessed through the active object. The big
disadvantage of this model is the parsing and the state-smartness, which
reduces extensibility and increases the opportunities for subtle bugs;
essentially, you are only safe if you never tick or @code{postpone} an
object or class (Bernd disagrees, but I (Anton) am not convinced).

@cindex @file{mini-oof.fs}, differences to other models
The Mini-OOF model is quite similar to a very stripped-down version of
the Objects model, but syntactically it is a mixture of the Objects and
the OOF model.


@node Objects Glossary,  , Comparison with other object models, Objects
@subsubsection @file{objects.fs} Glossary
@cindex @file{objects.fs} Glossary

doc---objects-bind
doc---objects-<bind>
doc---objects-bind'
doc---objects-[bind]
doc---objects-class
doc---objects-class->map
doc---objects-class-inst-size
doc---objects-class-override!
doc---objects-construct
doc---objects-current'
doc---objects-[current]
doc---objects-current-interface
doc---objects-dict-new
doc---objects-drop-order
doc---objects-end-class
doc---objects-end-class-noname
doc---objects-end-interface
doc---objects-end-interface-noname
doc---objects-exitm
doc---objects-heap-new
doc---objects-implementation
doc---objects-init-object
doc---objects-inst-value
doc---objects-inst-var
doc---objects-interface
doc---objects-;m
doc---objects-m:
doc---objects-method
doc---objects-object
doc---objects-overrides
doc---objects-[parent]
doc---objects-print
doc---objects-protected
doc---objects-public
doc---objects-push-order
doc---objects-selector
doc---objects-this
doc---objects-<to-inst>
doc---objects-[to-inst]
doc---objects-to-this
doc---objects-xt-new

@c -------------------------------------------------------------
@node OOF, Mini-OOF, Objects, Object-oriented Forth
@subsection OOF
@cindex oof
@cindex object-oriented programming

@cindex @file{objects.fs}
@cindex @file{oof.fs}

This section describes the @file{oof.fs} packet. This section uses the
same rationale why using object-oriented programming, and the same
terminology.

The packet described in this section is used in bigFORTH since 1991, and
used for two large applications: a chromatographic system used to
create new medicaments, and a graphic user interface library (MINOS).

You can find a description (in German) of @file{oof.fs} in @cite{Object
oriented bigFORTH} by Bernd Paysan, published in @cite{Vierte Dimension}
10(2), 1994.

@menu
* Properties of the OOF model::
* Basic OOF Usage::
* The base class object::
* Class Declaration::
* Class Implementation::
@end menu

@node Properties of the OOF model, Basic OOF Usage, OOF, OOF
@subsubsection Properties of the OOF model
@cindex @file{oof.fs} properties

@itemize @bullet
@item
This model combines object oriented programming with information
hiding. It helps you writing large application, where scoping is
necessary, because it provides class-oriented scoping.

@item
Named objects, object pointers, and object arrays can be created,
selector invocation uses the "object selector" syntax. Selector invocation
to objects and/or selectors on the stack is a bit less convenient, but
possible.

@item
Selector invocation and instance variable usage of the active object is
straight forward, since both make use of the active object.

@item
Late binding is efficient and easy to use.

@item
State-smart objects parse selectors. However, extensibility is provided
using a (parsing) selector @code{postpone} and a selector @code{'}.

@item
An implementation in ANS Forth is available.

@end itemize


@node Basic OOF Usage, The base class object, Properties of the OOF model, OOF
@subsubsection Basic OOF Usage
@cindex @file{oof.fs} usage

Here, I use the same example as for @code{objects} (@pxref{Basic Objects Usage}).

You can define a class for graphical objects like this:

@cindex @code{class} usage
@cindex @code{class;} usage
@cindex @code{method} usage
@example
object class graphical \ "object" is the parent class
  method draw ( x y graphical -- )
class;
@end example

This code defines a class @code{graphical} with an
operation @code{draw}.  We can perform the operation
@code{draw} on any @code{graphical} object, e.g.:

@example
100 100 t-rex draw
@end example

where @code{t-rex} is an object or object pointer, created with e.g.
@code{graphical : t-rex}.

@cindex abstract class
How do we create a graphical object? With the present definitions,
we cannot create a useful graphical object. The class
@code{graphical} describes graphical objects in general, but not
any concrete graphical object type (C++ users would call it an
@emph{abstract class}); e.g., there is no method for the selector
@code{draw} in the class @code{graphical}.

For concrete graphical objects, we define child classes of the
class @code{graphical}, e.g.:

@example
graphical class circle \ "graphical" is the parent class
  cell var circle-radius
how:
  : draw ( x y -- )
    circle-radius @@ draw-circle ;

  : init ( n-radius -- (
    circle-radius ! ;
class;
@end example

Here we define a class @code{circle} as a child of @code{graphical},
with a field @code{circle-radius}; it defines new methods for the
selectors @code{draw} and @code{init} (@code{init} is defined in
@code{object}, the parent class of @code{graphical}).

Now we can create a circle in the dictionary with

@example
50 circle : my-circle
@end example

@code{:} invokes @code{init}, thus initializing the field
@code{circle-radius} with 50. We can draw this new circle at (100,100)
with

@example
100 100 my-circle draw
@end example

@cindex selector invocation, restrictions
@cindex class definition, restrictions
Note: You can invoke a selector only if the receiving object belongs to
the class where the selector was defined or one of its descendents;
e.g., you can invoke @code{draw} only for objects belonging to
@code{graphical} or its descendents (e.g., @code{circle}). The scoping
mechanism will check if you try to invoke a selector that is not
defined in this class hierarchy, so you'll get an error at compilation
time.


@node The base class object, Class Declaration, Basic OOF Usage, OOF
@subsubsection The base class @file{object}
@cindex @file{oof.fs} base class

When you define a class, you have to specify a parent class.  So how do
you start defining classes? There is one class available from the start:
@code{object}. You have to use it as ancestor for all classes. It is the
only class that has no parent. Classes are also objects, except that
they don't have instance variables; class manipulation such as
inheritance or changing definitions of a class is handled through
selectors of the class @code{object}.

@code{object} provides a number of selectors:

@itemize @bullet
@item
@code{class} for subclassing, @code{definitions} to add definitions
later on, and @code{class?} to get type informations (is the class a
subclass of the class passed on the stack?).
doc---object-class
doc---object-definitions
doc---object-class?

@item
@code{init} and @code{dispose} as constructor and destroctor of the
object. @code{init} is invocated after the object's memory is allocated,
while @code{dispose} also handles deallocation. Thus if you redefine
@code{dispose}, you have to call the parent's dispose with @code{super
dispose}, too.
doc---object-init
doc---object-dispose

@item
@code{new}, @code{new[]}, @code{:}, @code{ptr}, @code{asptr}, and
@code{[]} to create named and unnamed objects and object arrays or
object pointers.
doc---object-new
doc---object-new[]
doc---object-:
doc---object-ptr
doc---object-asptr
doc---object-[]

@item
@code{::} and @code{super} for expicit scoping. You should use expicit
scoping only for super classes or classes with the same set of instance
variables. Explicit scoped selectors use early binding.
doc---object-::
doc---object-super

@item
@code{self} to get the address of the object
doc---object-self

@item
@code{bind}, @code{bound}, @code{link}, and @code{is} to assign object
pointers and instance defers.
doc---object-bind
doc---object-bound
doc---object-link
doc---object-is

@item
@code{'} to obtain selector tokens, @code{send} to invocate selectors
form the stack, and @code{postpone} to generate selector invocation code.
doc---object-'
doc---object-postpone

@item
@code{with} and @code{endwith} to select the active object from the
stack, and enabling it's scope. Using @code{with} and @code{endwith}
also allows to create code using selector @code{postpone} without being
trapped bye the state-smart objects.
doc---object-with
doc---object-endwith

@end itemize

@node Class Declaration, Class Implementation, The base class object, OOF
@subsubsection Class Declaration
@cindex class declaration

@itemize @bullet
@item
Instance variables
doc---oof-var

@item
Object pointers
doc---oof-ptr
doc---oof-asptr

@item
Instance defers
doc---oof-defer

@item
Method selectors
doc---oof-early
doc---oof-method

@item
Class wide variables
doc---oof-static

@item
End declaration
doc---oof-how:
doc---oof-class;

@end itemize

@c -------------------------------------------------------------
@node Class Implementation,  , Class Declaration, OOF
@subsubsection Class Implementation
@cindex class implementation

@c -------------------------------------------------------------
@node Mini-OOF, , OOF, Object-oriented Forth
@subsection Mini-OOF
@cindex mini-oof

Gforth's third object oriented Forth package is a 12-liner. It uses a
bit of a mixture of the @file{object.fs} and the @file{oof.fs} syntax,
and reduces to the bare minimum of features. This is based on a posting
of Bernd Paysan in comp.arch.

@menu
* Mini-OOF Usage::
* Mini-OOF Example::
* Mini-OOF Implementation::
@end menu

@c -------------------------------------------------------------
@node Mini-OOF Usage, Mini-OOF Example, , Mini-OOF
@subsubsection Usage
@cindex mini-oof usage

Basically, there are seven words, to define a method, a variable, a
class; to end a class, to define a method, to allocate an object, to
resolve binding, and the base class (which allocates one cell for the
object pointer).

doc-method

Defines a method

doc-var

Defines a variable with size bytes

doc-class

Starts the definition of a sub-class

doc-end-class

Ends the definition of a class

doc-defines

Binds the xt to the method name in the class

doc-new

Creates a new incarnation of the class

doc-::

Compiles the method name of the class (not immediate!)

doc-object

Is the base class of all objects

@c -------------------------------------------------------------
@node Mini-OOF Example, Mini-OOF Implementation, Mini-OOF Usage, Mini-OOF
@subsubsection Mini-OOF Example
@cindex mini-oof example

A short example shows how to use this package.

@example
object class
  method init
  method draw
end-class graphical
@end example

This code defines a class @code{graphical} with an
operation @code{draw}.  We can perform the operation
@code{draw} on any @code{graphical} object, e.g.:

@example
100 100 t-rex draw
@end example

where @code{t-rex} is an object or object pointer, created with e.g.
@code{graphical new Constant t-rex}.

For concrete graphical objects, we define child classes of the
class @code{graphical}, e.g.:

@example
graphical class
  cell var circle-radius
end-class circle \ "graphical" is the parent class

:noname ( x y -- )
  circle-radius @@ draw-circle ; circle defines draw
:noname ( r -- )
  circle-radius ! ; circle defines init
@end example

There is no implicit init method, so we have to define one. The creation
code of the object now has to call init explicitely.

@example
circle new Constant my-circle
50 my-circle init
@end example

It is also possible to add a function to create named objects with
automatic call of @code{init}, given that all objects have @code{init}
on the same place

@example
: new: ( .. o "name" -- )
    new dup Constant init ;
80 circle new: large-circle
@end example

We can draw this new circle at (100,100)
with

@example
100 100 my-circle draw
@end example

@node Mini-OOF Implementation, , Mini-OOF Example, Mini-OOF
@subsubsection Mini-OOF Implementation

Object oriented system with late binding typically use a
"vtable"-approach: the first variable in each object is a pointer to a
table, which contains the methods as function pointers. This vtable
may contain some other informations, too.

So first, let's declare methods:

@example
: method ( m v -- m' v ) Create  over , swap cell+ swap
  DOES> ( ... o -- ... ) @ over @ + @ execute ;
@end example

During method declaration, the number of methods and instance
variables is on the stack (in address units). @code{method} creates
one method and increments the method number. To execute a method, it
takes the object, fetches the vtable pointer, adds the offset, and
executes the xt stored there. Each method takes the object it is
invoked from as top of stack parameter. The method itself should
consume that object.

Now, we also have to declare instance variables

@example
: var ( m v size -- m v' ) Create  over , +
  DOES> ( o -- addr ) @ + ;
@end example

Same as above, a word is created with the current offset. Instance
variables can have different sizes (cells, floats, doubles, chars), so
all we do is take the size and add it to the offset. If your machine
has alignment restrictions, put the proper @code{aligned} or
@code{faligned} before the variable, it will adjust the variable
offset. That's why it is on the top of stack.

We need a starting point (the empty object) and some syntactic sugar:

@example
Create object  1 cells , 2 cells ,
: class ( class -- class methods vars ) dup 2@ ;
@end example

Now, for inheritance, the vtable of the parent object has to be
copied, when a new, derived class is declared. This gives all the
methods of the parent class, which can be overridden, though.

@example
: end-class  ( class methods vars -- )
  Create  here >r , dup , 2 cells ?DO ['] noop , 1 cells +LOOP
  cell+ dup cell+ r> rot @ 2 cells /string move ;
@end example

The first line creates the vtable, initialized with
@code{noop}s. The second line is the inheritance mechanism, it
copies the xts from the parent vtable.

We still have no way to define new methods, let's do that now:

@example
: defines ( xt class -- ) ' >body @ + ! ;
@end example

To allocate a new object, we need a word, too:

@example
: new ( class -- o )  here over @ allot swap over ! ;
@end example

And sometimes derived classes want to access the method of the
parent object. There are two ways to achieve this with this OOF:
first, you could use named words, and second, you could look up the
vtable of the parent object.

@example
: :: ( class "name" -- ) ' >body @ + @ compile, ;
@end example

<H2>An Example</H2>

Nothing can be more confusing than a good example, so here is
one. First let's declare a text object (further called
@code{button}), that stores text and position:

@example
object class
  cell var text
  cell var len
  cell var x
  cell var y
  method init
  method draw
end-class button
@end example

Now, implement the two methods, @code{draw} and @code{init}:

@example
:noname ( o -- ) >r
 r@ x @ r@ y @ at-xy  r@ text @ r> len @ type ;
 button defines draw
:noname ( addr u o -- ) >r
 0 r@ x ! 0 r@ y ! r@ len ! r> text ! ;
 button defines init
@end example

For inheritance, we define a class @code{bold-button}, with no
new data and no new methods.

@example
button class
end-class bold-button

: bold   27 emit ." [1m" ;
: normal 27 emit ." [0m" ;

:noname bold [ button :: draw ] normal ; bold-button defines draw
@end example

And finally, some code to demonstrate how to create objects and
apply methods:

@example
button new Constant foo
s" thin foo" foo init
page
foo draw
bold-button new Constant bar
s" fat bar" bar init
1 bar y !
bar draw
@end example

@c -------------------------------------------------------------
@node Tokens for Words, Wordlists, Object-oriented Forth, Words
@section Tokens for Words
@cindex tokens for words

This chapter describes the creation and use of tokens that represent
words on the stack (and in data space).

Named words have interpretation and compilation semantics. Unnamed words
just have execution semantics.

@cindex execution token
An @dfn{execution token} represents the execution semantics of an
unnamed word. An execution token occupies one cell. As explained in
section @ref{Supplying names}, the execution token of the last words
defined can be produced with

short-lastxt

You can perform the semantics represented by an execution token with
doc-execute
You can compile the word with
doc-compile,

@cindex code field address
@cindex CFA
In Gforth, the abstract data type @emph{execution token} is implemented
as CFA (code field address).

The interpretation semantics of a named word are also represented by an
execution token. You can get it with

doc-[']
doc-'

For literals, you use @code{'} in interpreted code and @code{[']} in
compiled code. Gforth's @code{'} and @code{[']} behave somewhat unusual
by complaining about compile-only words. To get an execution token for a
compiling word @var{X}, use @code{COMP' @var{X} drop} or @code{[COMP']
@var{X} drop}.

@cindex compilation token
The compilation semantics are represented by a @dfn{compilation token}
consisting of two cells: @var{w xt}. The top cell @var{xt} is an
execution token. The compilation semantics represented by the
compilation token can be performed with @code{execute}, which consumes
the whole compilation token, with an additional stack effect determined
by the represented compilation semantics.

doc-[comp']
doc-comp'

You can compile the compilation semantics with @code{postpone,}. I.e.,
@code{COMP' @var{word} POSTPONE,} is equivalent to @code{POSTPONE
@var{word}}.

doc-postpone,

At present, the @var{w} part of a compilation token is an execution
token, and the @var{xt} part represents either @code{execute} or
@code{compile,}. However, don't rely on that knowledge, unless necessary;
we may introduce unusual compilation tokens in the future (e.g.,
compilation tokens representing the compilation semantics of literals).

@cindex name token
@cindex name field address
@cindex NFA
Named words are also represented by the @dfn{name token}. The abstract
data type @emph{name token} is implemented as NFA (name field address).

doc-find-name
doc-name>int
doc-name?int
doc-name>comp
doc-name>string

@node Wordlists, Files, Tokens for Words, Words
@section Wordlists

@node Files, Including Files, Wordlists, Words
@section Files

This chapter describes how to operate on files from Forth.

Files have the following types for opening and creating:

doc-r/o
doc-r/w
doc-w/o
doc-bin

Files are opened/created by name and type, and return a file
identifier.

doc-open-file
doc-create-file

This identifier is used for all other file commands.

doc-close-file
doc-delete-file
doc-rename-file
doc-read-file
doc-read-line
doc-write-file
doc-emit-file
doc-flush-file

doc-file-status
doc-file-position
doc-reposition-file
doc-file-size
doc-resize-file

@node Including Files, Blocks, Files, Words
@section Including Files
@cindex including files

@menu
* Words for Including::         
* Search Path::                 
* Changing the Search Path::    
* General Search Paths::        
@end menu

@node Words for Including, Search Path, Including Files, Including Files
@subsection Words for Including

doc-include-file
doc-included
doc-include

Usually you want to include a file only if it is not included already
(by, say, another source file):

doc-required
doc-require
doc-needs

@cindex stack effect of included files
@cindex including files, stack effect
I recommend that you write your source files such that interpreting them
does not change the stack. This allows using these files with
@code{required} and friends without complications. E.g.,

@example
1 require foo.fs drop
@end example

@node Search Path, Changing the Search Path, Words for Including, Including Files
@subsection Search Path
@cindex path for @code{included}
@cindex file search path
@cindex include search path
@cindex search path for files

If you specify an absolute filename (i.e., a filename starting with
@file{/} or @file{~}, or with @file{:} in the second position (as in
@samp{C:...})) for @code{included} and friends, that file is included
just as you would expect.

For relative filenames, Gforth uses a search path similar to Forth's
search order (@pxref{Wordlists}). It tries to find the given filename in
the directories present in the path, and includes the first one it
finds.

If the search path contains the directory @file{.} (as it should), this
refers to the directory that the present file was @code{included}
from. This allows files to include other files relative to their own
position (irrespective of the current working directory or the absolute
position).  This feature is essential for libraries consisting of
several files, where a file may include other files from the library.
It corresponds to @code{#include "..."} in C. If the current input
source is not a file, @file{.} refers to the directory of the innermost
file being included, or, if there is no file being included, to the
current working directory.

Use @file{~+} to refer to the current working directory (as in the
@code{bash}).

If the filename starts with @file{./}, the search path is not searched
(just as with absolute filenames), and the @file{.} has the same meaning
as described above.

@node Changing the Search Path, General Search Paths, Search Path, Including Files
@subsection Changing the Search Path
@cindex search path, changes

The search path is initialized when you start Gforth (@pxref{Invoking
Gforth}). You can display it with

doc-.fpath

You can change it later with the following words:

doc-fpath+
doc-fpath=

Using fpath and require would look like:

@example
fpath= /usr/lib/forth/|./

require timer.fs
@end example

If you have the need to look for a file in the Forth search path, you could
use this Gforth feature in your application.

doc-open-fpath-file

@node General Search Paths,  , Changing the Search Path, Including Files
@subsection General Search Paths
@cindex search paths for user applications

Your application may need to search files in sevaral directories, like
@code{included} does. For this purpose you can define and use your own
search paths. Create a search path like this:

@example

Make a buffer for the path:
create mypath   100 chars ,     \ maximum length (is checked)
                0 ,             \ real len
                100 chars allot \ space for path
@end example

You have the same functions for the forth search path in a generic version
for different paths.

doc-path+
doc-path=
doc-.path
doc-open-path-file


@node Blocks, Other I/O, Including Files, Words
@section Blocks

This chapter describes how to use block files within Gforth.

Block files are traditionally means of data and source storage in
Forth. They have been very important in resource-starved computers
without OS in the past. Gforth doesn't encourage to use blocks as
source, and provides blocks only for backward compatibility. The ANS
standard requires blocks to be available when files are.

doc-open-blocks
doc-use
doc-get-block-fid
doc-block-position
doc-update
doc-save-buffer
doc-empty-buffer
doc-flush
doc-get-buffer
doc-block
doc-buffer
doc-updated?
doc-list
doc-load
doc-thru
doc-+load
doc-+thru
doc---block--->
doc-block-included

@node Other I/O, Programming Tools, Blocks, Words
@section Other I/O

@node Programming Tools, Assembler and Code Words, Other I/O, Words
@section Programming Tools
@cindex programming tools

@menu
* Debugging::                   Simple and quick.
* Assertions::                  Making your programs self-checking.
* Singlestep Debugger::		Executing your program word by word.
@end menu

@node Debugging, Assertions, Programming Tools, Programming Tools
@subsection Debugging
@cindex debugging

The simple debugging aids provided in @file{debugs.fs}
are meant to support a different style of debugging than the
tracing/stepping debuggers used in languages with long turn-around
times.

A much better (faster) way in fast-compiling languages is to add
printing code at well-selected places, let the program run, look at
the output, see where things went wrong, add more printing code, etc.,
until the bug is found.

The word @code{~~} is easy to insert. It just prints debugging
information (by default the source location and the stack contents). It
is also easy to remove (@kbd{C-x ~} in the Emacs Forth mode to
query-replace them with nothing). The deferred words
@code{printdebugdata} and @code{printdebugline} control the output of
@code{~~}. The default source location output format works well with
Emacs' compilation mode, so you can step through the program at the
source level using @kbd{C-x `} (the advantage over a stepping debugger
is that you can step in any direction and you know where the crash has
happened or where the strange data has occurred).

Note that the default actions clobber the contents of the pictured
numeric output string, so you should not use @code{~~}, e.g., between
@code{<#} and @code{#>}.

doc-~~
doc-printdebugdata
doc-printdebugline

@node Assertions, Singlestep Debugger, Debugging, Programming Tools
@subsection Assertions
@cindex assertions

It is a good idea to make your programs self-checking, in particular, if
you use an assumption (e.g., that a certain field of a data structure is
never zero) that may become wrong during maintenance. Gforth supports
assertions for this purpose. They are used like this:

@example
assert( @var{flag} )
@end example

The code between @code{assert(} and @code{)} should compute a flag, that
should be true if everything is alright and false otherwise. It should
not change anything else on the stack. The overall stack effect of the
assertion is @code{( -- )}. E.g.

@example
assert( 1 1 + 2 = ) \ what we learn in school
assert( dup 0<> ) \ assert that the top of stack is not zero
assert( false ) \ this code should not be reached
@end example

The need for assertions is different at different times. During
debugging, we want more checking, in production we sometimes care more
for speed. Therefore, assertions can be turned off, i.e., the assertion
becomes a comment. Depending on the importance of an assertion and the
time it takes to check it, you may want to turn off some assertions and
keep others turned on. Gforth provides several levels of assertions for
this purpose:

doc-assert0(
doc-assert1(
doc-assert2(
doc-assert3(
doc-assert(
doc-)

@code{Assert(} is the same as @code{assert1(}. The variable
@code{assert-level} specifies the highest assertions that are turned
on. I.e., at the default @code{assert-level} of one, @code{assert0(} and
@code{assert1(} assertions perform checking, while @code{assert2(} and
@code{assert3(} assertions are treated as comments.

Note that the @code{assert-level} is evaluated at compile-time, not at
run-time. I.e., you cannot turn assertions on or off at run-time, you
have to set the @code{assert-level} appropriately before compiling a
piece of code. You can compile several pieces of code at several
@code{assert-level}s (e.g., a trusted library at level 1 and newly
written code at level 3).

doc-assert-level

If an assertion fails, a message compatible with Emacs' compilation mode
is produced and the execution is aborted (currently with @code{ABORT"}.
If there is interest, we will introduce a special throw code. But if you
intend to @code{catch} a specific condition, using @code{throw} is
probably more appropriate than an assertion).

@node Singlestep Debugger, , Assertions, Programming Tools
@subsection Singlestep Debugger
@cindex singlestep Debugger
@cindex debugging Singlestep
@cindex @code{dbg}
@cindex @code{BREAK:}
@cindex @code{BREAK"}

When a new word is created there's often the need to check whether it behaves
correctly or not. You can do this by typing @code{dbg badword}. This might
look like:
@example
: badword 0 DO i . LOOP ;  ok
2 dbg badword 
: badword  
Scanning code...

Nesting debugger ready!

400D4738  8049BC4 0              -> [ 2 ] 00002 00000 
400D4740  8049F68 DO             -> [ 0 ] 
400D4744  804A0C8 i              -> [ 1 ] 00000 
400D4748 400C5E60 .              -> 0 [ 0 ] 
400D474C  8049D0C LOOP           -> [ 0 ] 
400D4744  804A0C8 i              -> [ 1 ] 00001 
400D4748 400C5E60 .              -> 1 [ 0 ] 
400D474C  8049D0C LOOP           -> [ 0 ] 
400D4758  804B384 ;              ->  ok
@end example

Each line displayed is one step. You always have to hit return to
execute the next word that is displayed. If you don't want to execute
the next word in a whole, you have to type @kbd{n} for @code{nest}. Here is
an overview what keys are available:

@table @i

@item <return>
Next; Execute the next word.

@item n
Nest; Single step through next word.

@item u
Unnest; Stop debugging and execute rest of word. If we got to this word
with nest, continue debugging with the calling word.

@item d
Done; Stop debugging and execute rest.

@item s
Stopp; Abort immediately.

@end table

Debugging large application with this mechanism is very difficult, because
you have to nest very deep into the program before the interesting part
begins. This takes a lot of time. 

To do it more directly put a @code{BREAK:} command into your source code.
When program execution reaches @code{BREAK:} the single step debugger is
invoked and you have all the features described above.

If you have more than one part to debug it is useful to know where the
program has stopped at the moment. You can do this by the 
@code{BREAK" string"} command. This behaves like @code{BREAK:} except that
string is typed out when the ``breakpoint'' is reached.

@node Assembler and Code Words, Threading Words, Programming Tools, Words
@section Assembler and Code Words
@cindex assembler
@cindex code words

Gforth provides some words for defining primitives (words written in
machine code), and for defining the the machine-code equivalent of
@code{DOES>}-based defining words. However, the machine-independent
nature of Gforth poses a few problems: First of all, Gforth runs on
several architectures, so it can provide no standard assembler. What's
worse is that the register allocation not only depends on the processor,
but also on the @code{gcc} version and options used.

The words that Gforth offers encapsulate some system dependences (e.g., the
header structure), so a system-independent assembler may be used in
Gforth. If you do not have an assembler, you can compile machine code
directly with @code{,} and @code{c,}.

doc-assembler
doc-code
doc-end-code
doc-;code
doc-flush-icache

If @code{flush-icache} does not work correctly, @code{code} words
etc. will not work (reliably), either.

These words are rarely used. Therefore they reside in @code{code.fs},
which is usually not loaded (except @code{flush-icache}, which is always
present). You can load them with @code{require code.fs}.

@cindex registers of the inner interpreter
In the assembly code you will want to refer to the inner interpreter's
registers (e.g., the data stack pointer) and you may want to use other
registers for temporary storage. Unfortunately, the register allocation
is installation-dependent.

The easiest solution is to use explicit register declarations
(@pxref{Explicit Reg Vars, , Variables in Specified Registers, gcc.info,
GNU C Manual}) for all of the inner interpreter's registers: You have to
compile Gforth with @code{-DFORCE_REG} (configure option
@code{--enable-force-reg}) and the appropriate declarations must be
present in the @code{machine.h} file (see @code{mips.h} for an example;
you can find a full list of all declarable register symbols with
@code{grep register engine.c}). If you give explicit registers to all
variables that are declared at the beginning of @code{engine()}, you
should be able to use the other caller-saved registers for temporary
storage. Alternatively, you can use the @code{gcc} option
@code{-ffixed-REG} (@pxref{Code Gen Options, , Options for Code
Generation Conventions, gcc.info, GNU C Manual}) to reserve a register
(however, this restriction on register allocation may slow Gforth
significantly).

If this solution is not viable (e.g., because @code{gcc} does not allow
you to explicitly declare all the registers you need), you have to find
out by looking at the code where the inner interpreter's registers
reside and which registers can be used for temporary storage. You can
get an assembly listing of the engine's code with @code{make engine.s}.

In any case, it is good practice to abstract your assembly code from the
actual register allocation. E.g., if the data stack pointer resides in
register @code{$17}, create an alias for this register called @code{sp},
and use that in your assembly code.

@cindex code words, portable
Another option for implementing normal and defining words efficiently
is: adding the wanted functionality to the source of Gforth. For normal
words you just have to edit @file{primitives} (@pxref{Automatic
Generation}), defining words (equivalent to @code{;CODE} words, for fast
defined words) may require changes in @file{engine.c}, @file{kernal.fs},
@file{prims2x.fs}, and possibly @file{cross.fs}.


@node Threading Words,  , Assembler and Code Words, Words
@section Threading Words
@cindex threading words

@cindex code address
These words provide access to code addresses and other threading stuff
in Gforth (and, possibly, other interpretive Forths). It more or less
abstracts away the differences between direct and indirect threading
(and, for direct threading, the machine dependences). However, at
present this wordset is still incomplete. It is also pretty low-level;
some day it will hopefully be made unnecessary by an internals wordset
that abstracts implementation details away completely.

doc->code-address
doc->does-code
doc-code-address!
doc-does-code!
doc-does-handler!
doc-/does-handler

The code addresses produced by various defining words are produced by
the following words:

doc-docol:
doc-docon:
doc-dovar:
doc-douser:
doc-dodefer:
doc-dofield:

You can recognize words defined by a @code{CREATE}...@code{DOES>} word
with @code{>DOES-CODE}. If the word was defined in that way, the value
returned is different from 0 and identifies the @code{DOES>} used by the
defining word.

@c ******************************************************************
@node Tools, ANS conformance, Words, Top
@chapter Tools

@menu
* ANS Report::                  Report the words used, sorted by wordset.
@end menu

See also @ref{Emacs and Gforth}.

@node ANS Report,  , Tools, Tools
@section @file{ans-report.fs}: Report the words used, sorted by wordset
@cindex @file{ans-report.fs}
@cindex report the words used in your program
@cindex words used in your program

If you want to label a Forth program as ANS Forth Program, you must
document which wordsets the program uses; for extension wordsets, it is
helpful to list the words the program requires from these wordsets
(because Forth systems are allowed to provide only some words of them).

The @file{ans-report.fs} tool makes it easy for you to determine which
words from which wordset and which non-ANS words your application
uses. You simply have to include @file{ans-report.fs} before loading the
program you want to check. After loading your program, you can get the
report with @code{print-ans-report}. A typical use is to run this as
batch job like this:
@example
gforth ans-report.fs myprog.fs -e "print-ans-report bye"
@end example

The output looks like this (for @file{compat/control.fs}):
@example
The program uses the following words
from CORE :
: POSTPONE THEN ; immediate ?dup IF 0= 
from BLOCK-EXT :
\ 
from FILE :
( 
@end example

@subsection Caveats

Note that @file{ans-report.fs} just checks which words are used, not whether
they are used in an ANS Forth conforming way!

Some words are defined in several wordsets in the
standard. @file{ans-report.fs} reports them for only one of the
wordsets, and not necessarily the one you expect. It depends on usage
which wordset is the right one to specify. E.g., if you only use the
compilation semantics of @code{S"}, it is a Core word; if you also use
its interpretation semantics, it is a File word.

@c ******************************************************************
@node ANS conformance, Model, Tools, Top
@chapter ANS conformance
@cindex ANS conformance of Gforth

To the best of our knowledge, Gforth is an

ANS Forth System
@itemize @bullet
@item providing the Core Extensions word set
@item providing the Block word set
@item providing the Block Extensions word set
@item providing the Double-Number word set
@item providing the Double-Number Extensions word set
@item providing the Exception word set
@item providing the Exception Extensions word set
@item providing the Facility word set
@item providing @code{MS} and @code{TIME&DATE} from the Facility Extensions word set
@item providing the File Access word set
@item providing the File Access Extensions word set
@item providing the Floating-Point word set
@item providing the Floating-Point Extensions word set
@item providing the Locals word set
@item providing the Locals Extensions word set
@item providing the Memory-Allocation word set
@item providing the Memory-Allocation Extensions word set (that one's easy)
@item providing the Programming-Tools word set
@item providing @code{;CODE}, @code{AHEAD}, @code{ASSEMBLER}, @code{BYE}, @code{CODE}, @code{CS-PICK}, @code{CS-ROLL}, @code{STATE}, @code{[ELSE]}, @code{[IF]}, @code{[THEN]} from the Programming-Tools Extensions word set
@item providing the Search-Order word set
@item providing the Search-Order Extensions word set
@item providing the String word set
@item providing the String Extensions word set (another easy one)
@end itemize

@cindex system documentation
In addition, ANS Forth systems are required to document certain
implementation choices. This chapter tries to meet these
requirements. In many cases it gives a way to ask the system for the
information instead of providing the information directly, in
particular, if the information depends on the processor, the operating
system or the installation options chosen, or if they are likely to
change during the maintenance of Gforth.

@comment The framework for the rest has been taken from pfe.

@menu
* The Core Words::              
* The optional Block word set::  
* The optional Double Number word set::  
* The optional Exception word set::  
* The optional Facility word set::  
* The optional File-Access word set::  
* The optional Floating-Point word set::  
* The optional Locals word set::  
* The optional Memory-Allocation word set::  
* The optional Programming-Tools word set::  
* The optional Search-Order word set::  
@end menu


@c =====================================================================
@node The Core Words, The optional Block word set, ANS conformance, ANS conformance
@comment  node-name,  next,  previous,  up
@section The Core Words
@c =====================================================================
@cindex core words, system documentation
@cindex system documentation, core words

@menu
* core-idef::                   Implementation Defined Options                   
* core-ambcond::                Ambiguous Conditions                
* core-other::                  Other System Documentation                  
@end menu

@c ---------------------------------------------------------------------
@node core-idef, core-ambcond, The Core Words, The Core Words
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex core words, implementation-defined options
@cindex implementation-defined options, core words


@table @i
@item (Cell) aligned addresses:
@cindex cell-aligned addresses
@cindex aligned addresses
processor-dependent. Gforth's alignment words perform natural alignment
(e.g., an address aligned for a datum of size 8 is divisible by
8). Unaligned accesses usually result in a @code{-23 THROW}.

@item @code{EMIT} and non-graphic characters:
@cindex @code{EMIT} and non-graphic characters
@cindex non-graphic characters and @code{EMIT}
The character is output using the C library function (actually, macro)
@code{putc}.

@item character editing of @code{ACCEPT} and @code{EXPECT}:
@cindex character editing of @code{ACCEPT} and @code{EXPECT}
@cindex editing in @code{ACCEPT} and @code{EXPECT}
@cindex @code{ACCEPT}, editing
@cindex @code{EXPECT}, editing
This is modeled on the GNU readline library (@pxref{Readline
Interaction, , Command Line Editing, readline, The GNU Readline
Library}) with Emacs-like key bindings. @kbd{Tab} deviates a little by
producing a full word completion every time you type it (instead of
producing the common prefix of all completions).

@item character set:
@cindex character set
The character set of your computer and display device. Gforth is
8-bit-clean (but some other component in your system may make trouble).

@item Character-aligned address requirements:
@cindex character-aligned address requirements
installation-dependent. Currently a character is represented by a C
@code{unsigned char}; in the future we might switch to @code{wchar_t}
(Comments on that requested).

@item character-set extensions and matching of names:
@cindex character-set extensions and matching of names
@cindex case sensitivity for name lookup
@cindex name lookup, case sensitivity
@cindex locale and case sensitivity
Any character except the ASCII NUL charcter can be used in a
name. Matching is case-insensitive (except in @code{TABLE}s). The
matching is performed using the C function @code{strncasecmp}, whose
function is probably influenced by the locale. E.g., the @code{C} locale
does not know about accents and umlauts, so they are matched
case-sensitively in that locale. For portability reasons it is best to
write programs such that they work in the @code{C} locale. Then one can
use libraries written by a Polish programmer (who might use words
containing ISO Latin-2 encoded characters) and by a French programmer
(ISO Latin-1) in the same program (of course, @code{WORDS} will produce
funny results for some of the words (which ones, depends on the font you
are using)). Also, the locale you prefer may not be available in other
operating systems. Hopefully, Unicode will solve these problems one day.

@item conditions under which control characters match a space delimiter:
@cindex space delimiters
@cindex control characters as delimiters
If @code{WORD} is called with the space character as a delimiter, all
white-space characters (as identified by the C macro @code{isspace()})
are delimiters. @code{PARSE}, on the other hand, treats space like other
delimiters. @code{PARSE-WORD} treats space like @code{WORD}, but behaves
like @code{PARSE} otherwise. @code{(NAME)}, which is used by the outer
interpreter (aka text interpreter) by default, treats all white-space
characters as delimiters.

@item format of the control flow stack:
@cindex control flow stack, format
The data stack is used as control flow stack. The size of a control flow
stack item in cells is given by the constant @code{cs-item-size}. At the
time of this writing, an item consists of a (pointer to a) locals list
(third), an address in the code (second), and a tag for identifying the
item (TOS). The following tags are used: @code{defstart},
@code{live-orig}, @code{dead-orig}, @code{dest}, @code{do-dest},
@code{scopestart}.

@item conversion of digits > 35
@cindex digits > 35
The characters @code{[\]^_'} are the digits with the decimal value
36@minus{}41. There is no way to input many of the larger digits.

@item display after input terminates in @code{ACCEPT} and @code{EXPECT}:
@cindex @code{EXPECT}, display after end of input
@cindex @code{ACCEPT}, display after end of input
The cursor is moved to the end of the entered string. If the input is
terminated using the @kbd{Return} key, a space is typed.

@item exception abort sequence of @code{ABORT"}:
@cindex exception abort sequence of @code{ABORT"}
@cindex @code{ABORT"}, exception abort sequence
The error string is stored into the variable @code{"error} and a
@code{-2 throw} is performed.

@item input line terminator:
@cindex input line terminator
@cindex line terminator on input
@cindex newline charcter on input
For interactive input, @kbd{C-m} (CR) and @kbd{C-j} (LF) terminate
lines. One of these characters is typically produced when you type the
@kbd{Enter} or @kbd{Return} key.

@item maximum size of a counted string:
@cindex maximum size of a counted string
@cindex counted string, maximum size
@code{s" /counted-string" environment? drop .}. Currently 255 characters
on all ports, but this may change.

@item maximum size of a parsed string:
@cindex maximum size of a parsed string
@cindex parsed string, maximum size
Given by the constant @code{/line}. Currently 255 characters.

@item maximum size of a definition name, in characters:
@cindex maximum size of a definition name, in characters
@cindex name, maximum length
31

@item maximum string length for @code{ENVIRONMENT?}, in characters:
@cindex maximum string length for @code{ENVIRONMENT?}, in characters
@cindex @code{ENVIRONMENT?} string length, maximum
31

@item method of selecting the user input device:
@cindex user input device, method of selecting
The user input device is the standard input. There is currently no way to
change it from within Gforth. However, the input can typically be
redirected in the command line that starts Gforth.

@item method of selecting the user output device:
@cindex user output device, method of selecting
@code{EMIT} and @code{TYPE} output to the file-id stored in the value
@code{outfile-id} (@code{stdout} by default). Gforth uses unbuffered
output when the user output device is a terminal, otherwise the output
is buffered.

@item methods of dictionary compilation:
What are we expected to document here?

@item number of bits in one address unit:
@cindex number of bits in one address unit
@cindex address unit, size in bits
@code{s" address-units-bits" environment? drop .}. 8 in all current
ports.

@item number representation and arithmetic:
@cindex number representation and arithmetic
Processor-dependent. Binary two's complement on all current ports.

@item ranges for integer types:
@cindex ranges for integer types
@cindex integer types, ranges
Installation-dependent. Make environmental queries for @code{MAX-N},
@code{MAX-U}, @code{MAX-D} and @code{MAX-UD}. The lower bounds for
unsigned (and positive) types is 0. The lower bound for signed types on
two's complement and one's complement machines machines can be computed
by adding 1 to the upper bound.

@item read-only data space regions:
@cindex read-only data space regions
@cindex data-space, read-only regions
The whole Forth data space is writable.

@item size of buffer at @code{WORD}:
@cindex size of buffer at @code{WORD}
@cindex @code{WORD} buffer size
@code{PAD HERE - .}. 104 characters on 32-bit machines. The buffer is
shared with the pictured numeric output string. If overwriting
@code{PAD} is acceptable, it is as large as the remaining dictionary
space, although only as much can be sensibly used as fits in a counted
string.

@item size of one cell in address units:
@cindex cell size
@code{1 cells .}.

@item size of one character in address units:
@cindex char size
@code{1 chars .}. 1 on all current ports.

@item size of the keyboard terminal buffer:
@cindex size of the keyboard terminal buffer
@cindex terminal buffer, size
Varies. You can determine the size at a specific time using @code{lp@@
tib - .}. It is shared with the locals stack and TIBs of files that
include the current file. You can change the amount of space for TIBs
and locals stack at Gforth startup with the command line option
@code{-l}.

@item size of the pictured numeric output buffer:
@cindex size of the pictured numeric output buffer
@cindex pictured numeric output buffer, size
@code{PAD HERE - .}. 104 characters on 32-bit machines. The buffer is
shared with @code{WORD}.

@item size of the scratch area returned by @code{PAD}:
@cindex size of the scratch area returned by @code{PAD}
@cindex @code{PAD} size
The remainder of dictionary space. @code{unused pad here - - .}.

@item system case-sensitivity characteristics:
@cindex case-sensitivity characteristics
Dictionary searches are case insensitive (except in
@code{TABLE}s). However, as explained above under @i{character-set
extensions}, the matching for non-ASCII characters is determined by the
locale you are using. In the default @code{C} locale all non-ASCII
characters are matched case-sensitively.

@item system prompt:
@cindex system prompt
@cindex prompt
@code{ ok} in interpret state, @code{ compiled} in compile state.

@item division rounding:
@cindex division rounding
installation dependent. @code{s" floored" environment? drop .}. We leave
the choice to @code{gcc} (what to use for @code{/}) and to you (whether
to use @code{fm/mod}, @code{sm/rem} or simply @code{/}).

@item values of @code{STATE} when true:
@cindex @code{STATE} values
-1.

@item values returned after arithmetic overflow:
On two's complement machines, arithmetic is performed modulo
2**bits-per-cell for single arithmetic and 4**bits-per-cell for double
arithmetic (with appropriate mapping for signed types). Division by zero
typically results in a @code{-55 throw} (Floating-point unidentified
fault), although a @code{-10 throw} (divide by zero) would be more
appropriate.

@item whether the current definition can be found after @t{DOES>}:
@cindex @t{DOES>}, visibility of current definition
No.

@end table

@c ---------------------------------------------------------------------
@node core-ambcond, core-other, core-idef, The Core Words
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex core words, ambiguous conditions
@cindex ambiguous conditions, core words

@table @i

@item a name is neither a word nor a number:
@cindex name not found
@cindex Undefined word
@code{-13 throw} (Undefined word). Actually, @code{-13 bounce}, which
preserves the data and FP stack, so you don't lose more work than
necessary.

@item a definition name exceeds the maximum length allowed:
@cindex Word name too long
@code{-19 throw} (Word name too long)

@item addressing a region not inside the various data spaces of the forth system:
@cindex Invalid memory address
The stacks, code space and name space are accessible. Machine code space is
typically readable. Accessing other addresses gives results dependent on
the operating system. On decent systems: @code{-9 throw} (Invalid memory
address).

@item argument type incompatible with parameter:
@cindex Argument type mismatch
This is usually not caught. Some words perform checks, e.g., the control
flow words, and issue a @code{ABORT"} or @code{-12 THROW} (Argument type
mismatch).

@item attempting to obtain the execution token of a word with undefined execution semantics:
@cindex Interpreting a compile-only word, for @code{'} etc.
@cindex execution token of words with undefined execution semantics
@code{-14 throw} (Interpreting a compile-only word). In some cases, you
get an execution token for @code{compile-only-error} (which performs a
@code{-14 throw} when executed).

@item dividing by zero:
@cindex dividing by zero
@cindex floating point unidentified fault, integer division
@cindex divide by zero
typically results in a @code{-55 throw} (floating point unidentified
fault), although a @code{-10 throw} (divide by zero) would be more
appropriate.

@item insufficient data stack or return stack space:
@cindex insufficient data stack or return stack space
@cindex stack overflow
@cindex Address alignment exception, stack overflow
@cindex Invalid memory address, stack overflow
Depending on the operating system, the installation, and the invocation
of Gforth, this is either checked by the memory management hardware, or
it is not checked. If it is checked, you typically get a @code{-9 throw}
(Invalid memory address) as soon as the overflow happens. If it is not
check, overflows typically result in mysterious illegal memory accesses,
producing @code{-9 throw} (Invalid memory address) or @code{-23 throw}
(Address alignment exception); they might also destroy the internal data
structure of @code{ALLOCATE} and friends, resulting in various errors in
these words.

@item insufficient space for loop control parameters:
@cindex insufficient space for loop control parameters
like other return stack overflows.

@item insufficient space in the dictionary:
@cindex insufficient space in the dictionary
@cindex dictionary overflow
If you try to allot (either directly with @code{allot}, or indirectly
with @code{,}, @code{create} etc.) more memory than available in the
dictionary, you get a @code{-8 throw} (Dictionary overflow). If you try
to access memory beyond the end of the dictionary, the results are
similar to stack overflows.

@item interpreting a word with undefined interpretation semantics:
@cindex interpreting a word with undefined interpretation semantics
@cindex Interpreting a compile-only word
For some words, we have defined interpretation semantics. For the
others: @code{-14 throw} (Interpreting a compile-only word).

@item modifying the contents of the input buffer or a string literal:
@cindex modifying the contents of the input buffer or a string literal
These are located in writable memory and can be modified.

@item overflow of the pictured numeric output string:
@cindex overflow of the pictured numeric output string
@cindex pictured numeric output string, overflow
Not checked. Runs into the dictionary and destroys it (at least,
partially).

@item parsed string overflow:
@cindex parsed string overflow
@code{PARSE} cannot overflow. @code{WORD} does not check for overflow.

@item producing a result out of range:
@cindex result out of range
On two's complement machines, arithmetic is performed modulo
2**bits-per-cell for single arithmetic and 4**bits-per-cell for double
arithmetic (with appropriate mapping for signed types). Division by zero
typically results in a @code{-55 throw} (floatingpoint unidentified
fault), although a @code{-10 throw} (divide by zero) would be more
appropriate. @code{convert} and @code{>number} currently overflow
silently.

@item reading from an empty data or return stack:
@cindex stack empty
@cindex stack underflow
The data stack is checked by the outer (aka text) interpreter after
every word executed. If it has underflowed, a @code{-4 throw} (Stack
underflow) is performed. Apart from that, stacks may be checked or not,
depending on operating system, installation, and invocation. The
consequences of stack underflows are similar to the consequences of
stack overflows. Note that even if the system uses checking (through the
MMU), your program may have to underflow by a significant number of
stack items to trigger the reaction (the reason for this is that the
MMU, and therefore the checking, works with a page-size granularity).

@item unexpected end of the input buffer, resulting in an attempt to use a zero-length string as a name:
@cindex unexpected end of the input buffer
@cindex zero-length string as a name
@cindex Attempt to use zero-length string as a name
@code{Create} and its descendants perform a @code{-16 throw} (Attempt to
use zero-length string as a name). Words like @code{'} probably will not
find what they search. Note that it is possible to create zero-length
names with @code{nextname} (should it not?).

@item @code{>IN} greater than input buffer:
@cindex @code{>IN} greater than input buffer
The next invocation of a parsing word returns a string with length 0.

@item @code{RECURSE} appears after @code{DOES>}:
@cindex @code{RECURSE} appears after @code{DOES>}
Compiles a recursive call to the defining word, not to the defined word.

@item argument input source different than current input source for @code{RESTORE-INPUT}:
@cindex argument input source different than current input source for @code{RESTORE-INPUT}
@cindex Argument type mismatch, @code{RESTORE-INPUT}
@cindex @code{RESTORE-INPUT}, Argument type mismatch
@code{-12 THROW}. Note that, once an input file is closed (e.g., because
the end of the file was reached), its source-id may be
reused. Therefore, restoring an input source specification referencing a
closed file may lead to unpredictable results instead of a @code{-12
THROW}.

In the future, Gforth may be able to restore input source specifications
from other than the current input source.

@item data space containing definitions gets de-allocated:
@cindex data space containing definitions gets de-allocated
Deallocation with @code{allot} is not checked. This typically results in
memory access faults or execution of illegal instructions.

@item data space read/write with incorrect alignment:
@cindex data space read/write with incorrect alignment
@cindex alignment faults
@cindex Address alignment exception
Processor-dependent. Typically results in a @code{-23 throw} (Address
alignment exception). Under Linux-Intel on a 486 or later processor with
alignment turned on, incorrect alignment results in a @code{-9 throw}
(Invalid memory address). There are reportedly some processors with
alignment restrictions that do not report violations.

@item data space pointer not properly aligned, @code{,}, @code{C,}:
@cindex data space pointer not properly aligned, @code{,}, @code{C,}
Like other alignment errors.

@item less than u+2 stack items (@code{PICK} and @code{ROLL}):
Like other stack underflows.

@item loop control parameters not available:
@cindex loop control parameters not available
Not checked. The counted loop words simply assume that the top of return
stack items are loop control parameters and behave accordingly.

@item most recent definition does not have a name (@code{IMMEDIATE}):
@cindex most recent definition does not have a name (@code{IMMEDIATE})
@cindex last word was headerless
@code{abort" last word was headerless"}.

@item name not defined by @code{VALUE} used by @code{TO}:
@cindex name not defined by @code{VALUE} used by @code{TO}
@cindex @code{TO} on non-@code{VALUE}s
@cindex Invalid name argument, @code{TO}
@code{-32 throw} (Invalid name argument) (unless name is a local or was
defined by @code{CONSTANT}; in the latter case it just changes the constant).

@item name not found (@code{'}, @code{POSTPONE}, @code{[']}, @code{[COMPILE]}):
@cindex name not found (@code{'}, @code{POSTPONE}, @code{[']}, @code{[COMPILE]})
@cindex Undefined word, @code{'}, @code{POSTPONE}, @code{[']}, @code{[COMPILE]}
@code{-13 throw} (Undefined word)

@item parameters are not of the same type (@code{DO}, @code{?DO}, @code{WITHIN}):
@cindex parameters are not of the same type (@code{DO}, @code{?DO}, @code{WITHIN})
Gforth behaves as if they were of the same type. I.e., you can predict
the behaviour by interpreting all parameters as, e.g., signed.

@item @code{POSTPONE} or @code{[COMPILE]} applied to @code{TO}:
@cindex @code{POSTPONE} or @code{[COMPILE]} applied to @code{TO}
Assume @code{: X POSTPONE TO ; IMMEDIATE}. @code{X} performs the
compilation semantics of @code{TO}.

@item String longer than a counted string returned by @code{WORD}:
@cindex String longer than a counted string returned by @code{WORD}
@cindex @code{WORD}, string overflow
Not checked. The string will be ok, but the count will, of course,
contain only the least significant bits of the length.

@item u greater than or equal to the number of bits in a cell (@code{LSHIFT}, @code{RSHIFT}):
@cindex @code{LSHIFT}, large shift counts
@cindex @code{RSHIFT}, large shift counts
Processor-dependent. Typical behaviours are returning 0 and using only
the low bits of the shift count.

@item word not defined via @code{CREATE}:
@cindex @code{>BODY} of non-@code{CREATE}d words
@code{>BODY} produces the PFA of the word no matter how it was defined.

@cindex @code{DOES>} of non-@code{CREATE}d words
@code{DOES>} changes the execution semantics of the last defined word no
matter how it was defined. E.g., @code{CONSTANT DOES>} is equivalent to
@code{CREATE , DOES>}.

@item words improperly used outside @code{<#} and @code{#>}:
Not checked. As usual, you can expect memory faults.

@end table


@c ---------------------------------------------------------------------
@node core-other,  , core-ambcond, The Core Words
@subsection Other system documentation
@c ---------------------------------------------------------------------
@cindex other system documentation, core words
@cindex core words, other system documentation

@table @i
@item nonstandard words using @code{PAD}:
@cindex @code{PAD} use by nonstandard words
None.

@item operator's terminal facilities available:
@cindex operator's terminal facilities available
After processing the command line, Gforth goes into interactive mode,
and you can give commands to Gforth interactively. The actual facilities
available depend on how you invoke Gforth.

@item program data space available:
@cindex program data space available
@cindex data space available
@code{UNUSED .} gives the remaining dictionary space. The total
dictionary space can be specified with the @code{-m} switch
(@pxref{Invoking Gforth}) when Gforth starts up.

@item return stack space available:
@cindex return stack space available
You can compute the total return stack space in cells with
@code{s" RETURN-STACK-CELLS" environment? drop .}. You can specify it at
startup time with the @code{-r} switch (@pxref{Invoking Gforth}).

@item stack space available:
@cindex stack space available
You can compute the total data stack space in cells with
@code{s" STACK-CELLS" environment? drop .}. You can specify it at
startup time with the @code{-d} switch (@pxref{Invoking Gforth}).

@item system dictionary space required, in address units:
@cindex system dictionary space required, in address units
Type @code{here forthstart - .} after startup. At the time of this
writing, this gives 80080 (bytes) on a 32-bit system.
@end table


@c =====================================================================
@node The optional Block word set, The optional Double Number word set, The Core Words, ANS conformance
@section The optional Block word set
@c =====================================================================
@cindex system documentation, block words
@cindex block words, system documentation

@menu
* block-idef::                  Implementation Defined Options
* block-ambcond::               Ambiguous Conditions               
* block-other::                 Other System Documentation                 
@end menu


@c ---------------------------------------------------------------------
@node block-idef, block-ambcond, The optional Block word set, The optional Block word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, block words
@cindex block words, implementation-defined options

@table @i
@item the format for display by @code{LIST}:
@cindex @code{LIST} display format
First the screen number is displayed, then 16 lines of 64 characters,
each line preceded by the line number.

@item the length of a line affected by @code{\}:
@cindex length of a line affected by @code{\}
@cindex @code{\}, line length in blocks
64 characters.
@end table


@c ---------------------------------------------------------------------
@node block-ambcond, block-other, block-idef, The optional Block word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex block words, ambiguous conditions
@cindex ambiguous conditions, block words

@table @i
@item correct block read was not possible:
@cindex block read not possible
Typically results in a @code{throw} of some OS-derived value (between
-512 and -2048). If the blocks file was just not long enough, blanks are
supplied for the missing portion.

@item I/O exception in block transfer:
@cindex I/O exception in block transfer
@cindex block transfer, I/O exception
Typically results in a @code{throw} of some OS-derived value (between
-512 and -2048).

@item invalid block number:
@cindex invalid block number
@cindex block number invalid
@code{-35 throw} (Invalid block number)

@item a program directly alters the contents of @code{BLK}:
@cindex @code{BLK}, altering @code{BLK}
The input stream is switched to that other block, at the same
position. If the storing to @code{BLK} happens when interpreting
non-block input, the system will get quite confused when the block ends.

@item no current block buffer for @code{UPDATE}:
@cindex @code{UPDATE}, no current block buffer
@code{UPDATE} has no effect.

@end table

@c ---------------------------------------------------------------------
@node block-other,  , block-ambcond, The optional Block word set
@subsection Other system documentation
@c ---------------------------------------------------------------------
@cindex other system documentation, block words
@cindex block words, other system documentation

@table @i
@item any restrictions a multiprogramming system places on the use of buffer addresses:
No restrictions (yet).

@item the number of blocks available for source and data:
depends on your disk space.

@end table


@c =====================================================================
@node The optional Double Number word set, The optional Exception word set, The optional Block word set, ANS conformance
@section The optional Double Number word set
@c =====================================================================
@cindex system documentation, double words
@cindex double words, system documentation

@menu
* double-ambcond::              Ambiguous Conditions              
@end menu


@c ---------------------------------------------------------------------
@node double-ambcond,  , The optional Double Number word set, The optional Double Number word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex double words, ambiguous conditions
@cindex ambiguous conditions, double words

@table @i
@item @var{d} outside of range of @var{n} in @code{D>S}:
@cindex @code{D>S}, @var{d} out of range of @var{n} 
The least significant cell of @var{d} is produced.

@end table


@c =====================================================================
@node The optional Exception word set, The optional Facility word set, The optional Double Number word set, ANS conformance
@section The optional Exception word set
@c =====================================================================
@cindex system documentation, exception words
@cindex exception words, system documentation

@menu
* exception-idef::              Implementation Defined Options              
@end menu


@c ---------------------------------------------------------------------
@node exception-idef,  , The optional Exception word set, The optional Exception word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, exception words
@cindex exception words, implementation-defined options

@table @i
@item @code{THROW}-codes used in the system:
@cindex @code{THROW}-codes used in the system
The codes -256@minus{}-511 are used for reporting signals. The mapping
from OS signal numbers to throw codes is -256@minus{}@var{signal}. The
codes -512@minus{}-2047 are used for OS errors (for file and memory
allocation operations). The mapping from OS error numbers to throw codes
is -512@minus{}@code{errno}. One side effect of this mapping is that
undefined OS errors produce a message with a strange number; e.g.,
@code{-1000 THROW} results in @code{Unknown error 488} on my system.
@end table

@c =====================================================================
@node The optional Facility word set, The optional File-Access word set, The optional Exception word set, ANS conformance
@section The optional Facility word set
@c =====================================================================
@cindex system documentation, facility words
@cindex facility words, system documentation

@menu
* facility-idef::               Implementation Defined Options               
* facility-ambcond::            Ambiguous Conditions            
@end menu


@c ---------------------------------------------------------------------
@node facility-idef, facility-ambcond, The optional Facility word set, The optional Facility word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, facility words
@cindex facility words, implementation-defined options

@table @i
@item encoding of keyboard events (@code{EKEY}):
@cindex keyboard events, encoding in @code{EKEY}
@cindex @code{EKEY}, encoding of keyboard events
Not yet implemented.

@item duration of a system clock tick:
@cindex duration of a system clock tick
@cindex clock tick duration
System dependent. With respect to @code{MS}, the time is specified in
microseconds. How well the OS and the hardware implement this, is
another question.

@item repeatability to be expected from the execution of @code{MS}:
@cindex repeatability to be expected from the execution of @code{MS}
@cindex @code{MS}, repeatability to be expected
System dependent. On Unix, a lot depends on load. If the system is
lightly loaded, and the delay is short enough that Gforth does not get
swapped out, the performance should be acceptable. Under MS-DOS and
other single-tasking systems, it should be good.

@end table


@c ---------------------------------------------------------------------
@node facility-ambcond,  , facility-idef, The optional Facility word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex facility words, ambiguous conditions
@cindex ambiguous conditions, facility words

@table @i
@item @code{AT-XY} can't be performed on user output device:
@cindex @code{AT-XY} can't be performed on user output device
Largely terminal dependent. No range checks are done on the arguments.
No errors are reported. You may see some garbage appearing, you may see
simply nothing happen.

@end table


@c =====================================================================
@node The optional File-Access word set, The optional Floating-Point word set, The optional Facility word set, ANS conformance
@section The optional File-Access word set
@c =====================================================================
@cindex system documentation, file words
@cindex file words, system documentation

@menu
* file-idef::                   Implementation Defined Options
* file-ambcond::                Ambiguous Conditions                
@end menu

@c ---------------------------------------------------------------------
@node file-idef, file-ambcond, The optional File-Access word set, The optional File-Access word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, file words
@cindex file words, implementation-defined options

@table @i
@item file access methods used:
@cindex file access methods used
@code{R/O}, @code{R/W} and @code{BIN} work as you would
expect. @code{W/O} translates into the C file opening mode @code{w} (or
@code{wb}): The file is cleared, if it exists, and created, if it does
not (with both @code{open-file} and @code{create-file}).  Under Unix
@code{create-file} creates a file with 666 permissions modified by your
umask.

@item file exceptions:
@cindex file exceptions
The file words do not raise exceptions (except, perhaps, memory access
faults when you pass illegal addresses or file-ids).

@item file line terminator:
@cindex file line terminator
System-dependent. Gforth uses C's newline character as line
terminator. What the actual character code(s) of this are is
system-dependent.

@item file name format:
@cindex file name format
System dependent. Gforth just uses the file name format of your OS.

@item information returned by @code{FILE-STATUS}:
@cindex @code{FILE-STATUS}, returned information
@code{FILE-STATUS} returns the most powerful file access mode allowed
for the file: Either @code{R/O}, @code{W/O} or @code{R/W}. If the file
cannot be accessed, @code{R/O BIN} is returned. @code{BIN} is applicable
along with the returned mode.

@item input file state after an exception when including source:
@cindex exception when including source
All files that are left via the exception are closed.

@item @var{ior} values and meaning:
@cindex @var{ior} values and meaning
The @var{ior}s returned by the file and memory allocation words are
intended as throw codes. They typically are in the range
-512@minus{}-2047 of OS errors.  The mapping from OS error numbers to
@var{ior}s is -512@minus{}@var{errno}.

@item maximum depth of file input nesting:
@cindex maximum depth of file input nesting
@cindex file input nesting, maximum depth
limited by the amount of return stack, locals/TIB stack, and the number
of open files available. This should not give you troubles.

@item maximum size of input line:
@cindex maximum size of input line
@cindex input line size, maximum
@code{/line}. Currently 255.

@item methods of mapping block ranges to files:
@cindex mapping block ranges to files
@cindex files containing blocks
@cindex blocks in files
By default, blocks are accessed in the file @file{blocks.fb} in the
current working directory. The file can be switched with @code{USE}.

@item number of string buffers provided by @code{S"}:
@cindex @code{S"}, number of string buffers
1

@item size of string buffer used by @code{S"}:
@cindex @code{S"}, size of string buffer
@code{/line}. currently 255.

@end table

@c ---------------------------------------------------------------------
@node file-ambcond,  , file-idef, The optional File-Access word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex file words, ambiguous conditions
@cindex ambiguous conditions, file words

@table @i
@item attempting to position a file outside its boundaries:
@cindex @code{REPOSITION-FILE}, outside the file's boundaries
@code{REPOSITION-FILE} is performed as usual: Afterwards,
@code{FILE-POSITION} returns the value given to @code{REPOSITION-FILE}.

@item attempting to read from file positions not yet written:
@cindex reading from file positions not yet written
End-of-file, i.e., zero characters are read and no error is reported.

@item @var{file-id} is invalid (@code{INCLUDE-FILE}):
@cindex @code{INCLUDE-FILE}, @var{file-id} is invalid 
An appropriate exception may be thrown, but a memory fault or other
problem is more probable.

@item I/O exception reading or closing @var{file-id} (@code{INCLUDE-FILE}, @code{INCLUDED}):
@cindex @code{INCLUDE-FILE}, I/O exception reading or closing @var{file-id}
@cindex @code{INCLUDED}, I/O exception reading or closing @var{file-id}
The @var{ior} produced by the operation, that discovered the problem, is
thrown.

@item named file cannot be opened (@code{INCLUDED}):
@cindex @code{INCLUDED}, named file cannot be opened
The @var{ior} produced by @code{open-file} is thrown.

@item requesting an unmapped block number:
@cindex unmapped block numbers
There are no unmapped legal block numbers. On some operating systems,
writing a block with a large number may overflow the file system and
have an error message as consequence.

@item using @code{source-id} when @code{blk} is non-zero:
@cindex @code{SOURCE-ID}, behaviour when @code{BLK} is non-zero
@code{source-id} performs its function. Typically it will give the id of
the source which loaded the block. (Better ideas?)

@end table


@c =====================================================================
@node  The optional Floating-Point word set, The optional Locals word set, The optional File-Access word set, ANS conformance
@section The optional Floating-Point word set
@c =====================================================================
@cindex system documentation, floating-point words
@cindex floating-point words, system documentation

@menu
* floating-idef::               Implementation Defined Options
* floating-ambcond::            Ambiguous Conditions            
@end menu


@c ---------------------------------------------------------------------
@node floating-idef, floating-ambcond, The optional Floating-Point word set, The optional Floating-Point word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, floating-point words
@cindex floating-point words, implementation-defined options

@table @i
@item format and range of floating point numbers:
@cindex format and range of floating point numbers
@cindex floating point numbers, format and range
System-dependent; the @code{double} type of C.

@item results of @code{REPRESENT} when @var{float} is out of range:
@cindex  @code{REPRESENT}, results when @var{float} is out of range
System dependent; @code{REPRESENT} is implemented using the C library
function @code{ecvt()} and inherits its behaviour in this respect.

@item rounding or truncation of floating-point numbers:
@cindex rounding of floating-point numbers
@cindex truncation of floating-point numbers
@cindex floating-point numbers, rounding or truncation
System dependent; the rounding behaviour is inherited from the hosting C
compiler. IEEE-FP-based (i.e., most) systems by default round to
nearest, and break ties by rounding to even (i.e., such that the last
bit of the mantissa is 0).

@item size of floating-point stack:
@cindex floating-point stack size
@code{s" FLOATING-STACK" environment? drop .} gives the total size of
the floating-point stack (in floats). You can specify this on startup
with the command-line option @code{-f} (@pxref{Invoking Gforth}).

@item width of floating-point stack:
@cindex floating-point stack width 
@code{1 floats}.

@end table


@c ---------------------------------------------------------------------
@node floating-ambcond,  , floating-idef, The optional Floating-Point word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex floating-point words, ambiguous conditions
@cindex ambiguous conditions, floating-point words

@table @i
@item @code{df@@} or @code{df!} used with an address that is not double-float  aligned:
@cindex @code{df@@} or @code{df!} used with an address that is not double-float  aligned
System-dependent. Typically results in a @code{-23 THROW} like other
alignment violations.

@item @code{f@@} or @code{f!} used with an address that is not float  aligned:
@cindex @code{f@@} used with an address that is not float aligned
@cindex @code{f!} used with an address that is not float aligned
System-dependent. Typically results in a @code{-23 THROW} like other
alignment violations.

@item floating-point result out of range:
@cindex floating-point result out of range
System-dependent. Can result in a @code{-55 THROW} (Floating-point
unidentified fault), or can produce a special value representing, e.g.,
Infinity.

@item @code{sf@@} or @code{sf!} used with an address that is not single-float  aligned:
@cindex @code{sf@@} or @code{sf!} used with an address that is not single-float  aligned
System-dependent. Typically results in an alignment fault like other
alignment violations.

@item @code{BASE} is not decimal (@code{REPRESENT}, @code{F.}, @code{FE.}, @code{FS.}):
@cindex @code{BASE} is not decimal (@code{REPRESENT}, @code{F.}, @code{FE.}, @code{FS.})
The floating-point number is converted into decimal nonetheless.

@item Both arguments are equal to zero (@code{FATAN2}):
@cindex @code{FATAN2}, both arguments are equal to zero
System-dependent. @code{FATAN2} is implemented using the C library
function @code{atan2()}.

@item Using @code{FTAN} on an argument @var{r1} where cos(@var{r1}) is zero:
@cindex @code{FTAN} on an argument @var{r1} where cos(@var{r1}) is zero
System-dependent. Anyway, typically the cos of @var{r1} will not be zero
because of small errors and the tan will be a very large (or very small)
but finite number.

@item @var{d} cannot be presented precisely as a float in @code{D>F}:
@cindex @code{D>F}, @var{d} cannot be presented precisely as a float
The result is rounded to the nearest float.

@item dividing by zero:
@cindex dividing by zero, floating-point
@cindex floating-point dividing by zero
@cindex floating-point unidentified fault, FP divide-by-zero
@code{-55 throw} (Floating-point unidentified fault)

@item exponent too big for conversion (@code{DF!}, @code{DF@@}, @code{SF!}, @code{SF@@}):
@cindex exponent too big for conversion (@code{DF!}, @code{DF@@}, @code{SF!}, @code{SF@@})
System dependent. On IEEE-FP based systems the number is converted into
an infinity.

@item @var{float}<1 (@code{FACOSH}):
@cindex @code{FACOSH}, @var{float}<1
@cindex floating-point unidentified fault, @code{FACOSH}
@code{-55 throw} (Floating-point unidentified fault)

@item @var{float}=<-1 (@code{FLNP1}):
@cindex @code{FLNP1}, @var{float}=<-1
@cindex floating-point unidentified fault, @code{FLNP1}
@code{-55 throw} (Floating-point unidentified fault). On IEEE-FP systems
negative infinity is typically produced for @var{float}=-1.

@item @var{float}=<0 (@code{FLN}, @code{FLOG}):
@cindex @code{FLN}, @var{float}=<0
@cindex @code{FLOG}, @var{float}=<0
@cindex floating-point unidentified fault, @code{FLN} or @code{FLOG}
@code{-55 throw} (Floating-point unidentified fault). On IEEE-FP systems
negative infinity is typically produced for @var{float}=0.

@item @var{float}<0 (@code{FASINH}, @code{FSQRT}):
@cindex @code{FASINH}, @var{float}<0
@cindex @code{FSQRT}, @var{float}<0
@cindex floating-point unidentified fault, @code{FASINH} or @code{FSQRT}
@code{-55 throw} (Floating-point unidentified fault). @code{fasinh}
produces values for these inputs on my Linux box (Bug in the C library?)

@item |@var{float}|>1 (@code{FACOS}, @code{FASIN}, @code{FATANH}):
@cindex @code{FACOS}, |@var{float}|>1
@cindex @code{FASIN}, |@var{float}|>1
@cindex @code{FATANH}, |@var{float}|>1
@cindex floating-point unidentified fault, @code{FACOS}, @code{FASIN} or @code{FATANH}
@code{-55 throw} (Floating-point unidentified fault).

@item integer part of float cannot be represented by @var{d} in @code{F>D}:
@cindex @code{F>D}, integer part of float cannot be represented by @var{d}
@cindex floating-point unidentified fault, @code{F>D}
@code{-55 throw} (Floating-point unidentified fault).

@item string larger than pictured numeric output area (@code{f.}, @code{fe.}, @code{fs.}):
@cindex string larger than pictured numeric output area (@code{f.}, @code{fe.}, @code{fs.})
This does not happen.
@end table

@c =====================================================================
@node  The optional Locals word set, The optional Memory-Allocation word set, The optional Floating-Point word set, ANS conformance
@section The optional Locals word set
@c =====================================================================
@cindex system documentation, locals words
@cindex locals words, system documentation

@menu
* locals-idef::                 Implementation Defined Options                 
* locals-ambcond::              Ambiguous Conditions              
@end menu


@c ---------------------------------------------------------------------
@node locals-idef, locals-ambcond, The optional Locals word set, The optional Locals word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, locals words
@cindex locals words, implementation-defined options

@table @i
@item maximum number of locals in a definition:
@cindex maximum number of locals in a definition
@cindex locals, maximum number in a definition
@code{s" #locals" environment? drop .}. Currently 15. This is a lower
bound, e.g., on a 32-bit machine there can be 41 locals of up to 8
characters. The number of locals in a definition is bounded by the size
of locals-buffer, which contains the names of the locals.

@end table


@c ---------------------------------------------------------------------
@node locals-ambcond,  , locals-idef, The optional Locals word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex locals words, ambiguous conditions
@cindex ambiguous conditions, locals words

@table @i
@item executing a named local in interpretation state:
@cindex local in interpretation state
@cindex Interpreting a compile-only word, for a local
Locals have no interpretation semantics. If you try to perform the
interpretation semantics, you will get a @code{-14 throw} somewhere
(Interpreting a compile-only word). If you perform the compilation
semantics, the locals access will be compiled (irrespective of state).

@item @var{name} not defined by @code{VALUE} or @code{(LOCAL)} (@code{TO}):
@cindex name not defined by @code{VALUE} or @code{(LOCAL)} used by @code{TO}
@cindex @code{TO} on non-@code{VALUE}s and non-locals
@cindex Invalid name argument, @code{TO}
@code{-32 throw} (Invalid name argument)

@end table


@c =====================================================================
@node  The optional Memory-Allocation word set, The optional Programming-Tools word set, The optional Locals word set, ANS conformance
@section The optional Memory-Allocation word set
@c =====================================================================
@cindex system documentation, memory-allocation words
@cindex memory-allocation words, system documentation

@menu
* memory-idef::                 Implementation Defined Options                 
@end menu


@c ---------------------------------------------------------------------
@node memory-idef,  , The optional Memory-Allocation word set, The optional Memory-Allocation word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, memory-allocation words
@cindex memory-allocation words, implementation-defined options

@table @i
@item values and meaning of @var{ior}:
@cindex  @var{ior} values and meaning
The @var{ior}s returned by the file and memory allocation words are
intended as throw codes. They typically are in the range
-512@minus{}-2047 of OS errors.  The mapping from OS error numbers to
@var{ior}s is -512@minus{}@var{errno}.

@end table

@c =====================================================================
@node  The optional Programming-Tools word set, The optional Search-Order word set, The optional Memory-Allocation word set, ANS conformance
@section The optional Programming-Tools word set
@c =====================================================================
@cindex system documentation, programming-tools words
@cindex programming-tools words, system documentation

@menu
* programming-idef::            Implementation Defined Options            
* programming-ambcond::         Ambiguous Conditions         
@end menu


@c ---------------------------------------------------------------------
@node programming-idef, programming-ambcond, The optional Programming-Tools word set, The optional Programming-Tools word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, programming-tools words
@cindex programming-tools words, implementation-defined options

@table @i
@item ending sequence for input following @code{;CODE} and @code{CODE}:
@cindex @code{;CODE} ending sequence
@cindex @code{CODE} ending sequence
@code{END-CODE}

@item manner of processing input following @code{;CODE} and @code{CODE}:
@cindex @code{;CODE}, processing input
@cindex @code{CODE}, processing input
The @code{ASSEMBLER} vocabulary is pushed on the search order stack, and
the input is processed by the text interpreter, (starting) in interpret
state.

@item search order capability for @code{EDITOR} and @code{ASSEMBLER}:
@cindex @code{ASSEMBLER}, search order capability
The ANS Forth search order word set.

@item source and format of display by @code{SEE}:
@cindex @code{SEE}, source and format of output
The source for @code{see} is the intermediate code used by the inner
interpreter.  The current @code{see} tries to output Forth source code
as well as possible.

@end table

@c ---------------------------------------------------------------------
@node programming-ambcond,  , programming-idef, The optional Programming-Tools word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex programming-tools words, ambiguous conditions
@cindex ambiguous conditions, programming-tools words

@table @i

@item deleting the compilation wordlist (@code{FORGET}):
@cindex @code{FORGET}, deleting the compilation wordlist
Not implemented (yet).

@item fewer than @var{u}+1 items on the control flow stack (@code{CS-PICK}, @code{CS-ROLL}):
@cindex @code{CS-PICK}, fewer than @var{u}+1 items on the control flow stack
@cindex @code{CS-ROLL}, fewer than @var{u}+1 items on the control flow stack
@cindex control-flow stack underflow
This typically results in an @code{abort"} with a descriptive error
message (may change into a @code{-22 throw} (Control structure mismatch)
in the future). You may also get a memory access error. If you are
unlucky, this ambiguous condition is not caught.

@item @var{name} can't be found (@code{FORGET}):
@cindex @code{FORGET}, @var{name} can't be found
Not implemented (yet).

@item @var{name} not defined via @code{CREATE}:
@cindex @code{;CODE}, @var{name} not defined via @code{CREATE}
@code{;CODE} behaves like @code{DOES>} in this respect, i.e., it changes
the execution semantics of the last defined word no matter how it was
defined.

@item @code{POSTPONE} applied to @code{[IF]}:
@cindex @code{POSTPONE} applied to @code{[IF]}
@cindex @code{[IF]} and @code{POSTPONE}
After defining @code{: X POSTPONE [IF] ; IMMEDIATE}. @code{X} is
equivalent to @code{[IF]}.

@item reaching the end of the input source before matching @code{[ELSE]} or @code{[THEN]}:
@cindex @code{[IF]}, end of the input source before matching @code{[ELSE]} or @code{[THEN]}
Continue in the same state of conditional compilation in the next outer
input source. Currently there is no warning to the user about this.

@item removing a needed definition (@code{FORGET}):
@cindex @code{FORGET}, removing a needed definition
Not implemented (yet).

@end table


@c =====================================================================
@node  The optional Search-Order word set,  , The optional Programming-Tools word set, ANS conformance
@section The optional Search-Order word set
@c =====================================================================
@cindex system documentation, search-order words
@cindex search-order words, system documentation

@menu
* search-idef::                 Implementation Defined Options                 
* search-ambcond::              Ambiguous Conditions              
@end menu


@c ---------------------------------------------------------------------
@node search-idef, search-ambcond, The optional Search-Order word set, The optional Search-Order word set
@subsection Implementation Defined Options
@c ---------------------------------------------------------------------
@cindex implementation-defined options, search-order words
@cindex search-order words, implementation-defined options

@table @i
@item maximum number of word lists in search order:
@cindex maximum number of word lists in search order
@cindex search order, maximum depth
@code{s" wordlists" environment? drop .}. Currently 16.

@item minimum search order:
@cindex minimum search order
@cindex search order, minimum
@code{root root}.

@end table

@c ---------------------------------------------------------------------
@node search-ambcond,  , search-idef, The optional Search-Order word set
@subsection Ambiguous conditions
@c ---------------------------------------------------------------------
@cindex search-order words, ambiguous conditions
@cindex ambiguous conditions, search-order words

@table @i
@item changing the compilation wordlist (during compilation):
@cindex changing the compilation wordlist (during compilation)
@cindex compilation wordlist, change before definition ends
The word is entered into the wordlist that was the compilation wordlist
at the start of the definition. Any changes to the name field (e.g.,
@code{immediate}) or the code field (e.g., when executing @code{DOES>})
are applied to the latest defined word (as reported by @code{last} or
@code{lastxt}), if possible, irrespective of the compilation wordlist.

@item search order empty (@code{previous}):
@cindex @code{previous}, search order empty
@cindex Vocstack empty, @code{previous}
@code{abort" Vocstack empty"}.

@item too many word lists in search order (@code{also}):
@cindex @code{also}, too many word lists in search order
@cindex Vocstack full, @code{also}
@code{abort" Vocstack full"}.

@end table

@c ***************************************************************
@node Model, Integrating Gforth, ANS conformance, Top
@chapter Model

This chapter has yet to be written. It will contain information, on
which internal structures you can rely.

@c ***************************************************************
@node Integrating Gforth, Emacs and Gforth, Model, Top
@chapter Integrating Gforth into C programs

This is not yet implemented.

Several people like to use Forth as scripting language for applications
that are otherwise written in C, C++, or some other language.

The Forth system ATLAST provides facilities for embedding it into
applications; unfortunately it has several disadvantages: most
importantly, it is not based on ANS Forth, and it is apparently dead
(i.e., not developed further and not supported). The facilities
provided by Gforth in this area are inspired by ATLASTs facilities, so
making the switch should not be hard.

We also tried to design the interface such that it can easily be
implemented by other Forth systems, so that we may one day arrive at a
standardized interface. Such a standard interface would allow you to
replace the Forth system without having to rewrite C code.

You embed the Gforth interpreter by linking with the library
@code{libgforth.a} (give the compiler the option @code{-lgforth}).  All
global symbols in this library that belong to the interface, have the
prefix @code{forth_}. (Global symbols that are used internally have the
prefix @code{gforth_}).

You can include the declarations of Forth types and the functions and
variables of the interface with @code{#include <forth.h>}.

Types.

Variables.

Data and FP Stack pointer. Area sizes.

functions.

forth_init(imagefile)
forth_evaluate(string) exceptions?
forth_goto(address) (or forth_execute(xt)?)
forth_continue() (a corountining mechanism)

Adding primitives.

No checking.

Signals?

Accessing the Stacks

@node Emacs and Gforth, Image Files, Integrating Gforth, Top
@chapter Emacs and Gforth
@cindex Emacs and Gforth

@cindex @file{gforth.el}
@cindex @file{forth.el}
@cindex Rydqvist, Goran
@cindex comment editing commands
@cindex @code{\}, editing with Emacs
@cindex debug tracer editing commands
@cindex @code{~~}, removal with Emacs
@cindex Forth mode in Emacs
Gforth comes with @file{gforth.el}, an improved version of
@file{forth.el} by Goran Rydqvist (included in the TILE package). The
improvements are a better (but still not perfect) handling of
indentation. I have also added comment paragraph filling (@kbd{M-q}),
commenting (@kbd{C-x \}) and uncommenting (@kbd{C-u C-x \}) regions and
removing debugging tracers (@kbd{C-x ~}, @pxref{Debugging}). I left the
stuff I do not use alone, even though some of it only makes sense for
TILE. To get a description of these features, enter Forth mode and type
@kbd{C-h m}.

@cindex source location of error or debugging output in Emacs
@cindex error output, finding the source location in Emacs
@cindex debugging output, finding the source location in Emacs
In addition, Gforth supports Emacs quite well: The source code locations
given in error messages, debugging output (from @code{~~}) and failed
assertion messages are in the right format for Emacs' compilation mode
(@pxref{Compilation, , Running Compilations under Emacs, emacs, Emacs
Manual}) so the source location corresponding to an error or other
message is only a few keystrokes away (@kbd{C-x `} for the next error,
@kbd{C-c C-c} for the error under the cursor).

@cindex @file{TAGS} file
@cindex @file{etags.fs}
@cindex viewing the source of a word in Emacs
Also, if you @code{include} @file{etags.fs}, a new @file{TAGS} file
(@pxref{Tags, , Tags Tables, emacs, Emacs Manual}) will be produced that
contains the definitions of all words defined afterwards. You can then
find the source for a word using @kbd{M-.}. Note that emacs can use
several tags files at the same time (e.g., one for the Gforth sources
and one for your program, @pxref{Select Tags Table,,Selecting a Tags
Table,emacs, Emacs Manual}). The TAGS file for the preloaded words is
@file{$(datadir)/gforth/$(VERSION)/TAGS} (e.g.,
@file{/usr/local/share/gforth/0.2.0/TAGS}).

@cindex @file{.emacs}
To get all these benefits, add the following lines to your @file{.emacs}
file:

@example
(autoload 'forth-mode "gforth.el")
(setq auto-mode-alist (cons '("\\.fs\\'" . forth-mode) auto-mode-alist))
@end example

@node Image Files, Engine, Emacs and Gforth, Top
@chapter Image Files
@cindex image files
@cindex @code{.fi} files
@cindex precompiled Forth code
@cindex dictionary in persistent form
@cindex persistent form of dictionary

An image file is a file containing an image of the Forth dictionary,
i.e., compiled Forth code and data residing in the dictionary.  By
convention, we use the extension @code{.fi} for image files.

@menu
* Image Licensing Issues::      Distribution terms for images.
* Image File Background::       Why have image files?
* Non-Relocatable Image Files::  don't always work.
* Data-Relocatable Image Files::  are better.
* Fully Relocatable Image Files::  better yet.
* Stack and Dictionary Sizes::  Setting the default sizes for an image.
* Running Image Files::         @code{gforth -i @var{file}} or @var{file}.
* Modifying the Startup Sequence::  and turnkey applications.
@end menu

@node Image Licensing Issues, Image File Background, Image Files, Image Files
@section Image Licensing Issues
@cindex license for images
@cindex image license

An image created with @code{gforthmi} (@pxref{gforthmi}) or
@code{savesystem} (@pxref{Non-Relocatable Image Files}) includes the
original image; i.e., according to copyright law it is a derived work of
the original image.

Since Gforth is distributed under the GNU GPL, the newly created image
falls under the GNU GPL, too. In particular, this means that if you
distribute the image, you have to make all of the sources for the image
available, including those you wrote.  For details see @ref{License, ,
GNU General Public License (Section 3)}.

If you create an image with @code{cross} (@pxref{cross.fs}), the image
contains only code compiled from the sources you gave it; if none of
these sources is under the GPL, the terms discussed above do not apply
to the image. However, if your image needs an engine (a gforth binary)
that is under the GPL, you should make sure that you distribute both in
a way that is at most a @emph{mere aggregation}, if you don't want the
terms of the GPL to apply to the image.

@node Image File Background, Non-Relocatable Image Files, Image Licensing Issues, Image Files
@section Image File Background
@cindex image file background

Our Forth system consists not only of primitives, but also of
definitions written in Forth. Since the Forth compiler itself belongs to
those definitions, it is not possible to start the system with the
primitives and the Forth source alone. Therefore we provide the Forth
code as an image file in nearly executable form. At the start of the
system a C routine loads the image file into memory, optionally
relocates the addresses, then sets up the memory (stacks etc.) according
to information in the image file, and starts executing Forth code.

The image file variants represent different compromises between the
goals of making it easy to generate image files and making them
portable.

@cindex relocation at run-time
Win32Forth 3.4 and Mitch Bradleys @code{cforth} use relocation at
run-time. This avoids many of the complications discussed below (image
files are data relocatable without further ado), but costs performance
(one addition per memory access).

@cindex relocation at load-time
By contrast, our loader performs relocation at image load time. The
loader also has to replace tokens standing for primitive calls with the
appropriate code-field addresses (or code addresses in the case of
direct threading).

There are three kinds of image files, with different degrees of
relocatability: non-relocatable, data-relocatable, and fully relocatable
image files.

@cindex image file loader
@cindex relocating loader
@cindex loader for image files
These image file variants have several restrictions in common; they are
caused by the design of the image file loader:

@itemize @bullet
@item
There is only one segment; in particular, this means, that an image file
cannot represent @code{ALLOCATE}d memory chunks (and pointers to
them). And the contents of the stacks are not represented, either.

@item
The only kinds of relocation supported are: adding the same offset to
all cells that represent data addresses; and replacing special tokens
with code addresses or with pieces of machine code.

If any complex computations involving addresses are performed, the
results cannot be represented in the image file. Several applications that
use such computations come to mind:
@itemize @minus
@item
Hashing addresses (or data structures which contain addresses) for table
lookup. If you use Gforth's @code{table}s or @code{wordlist}s for this
purpose, you will have no problem, because the hash tables are
recomputed automatically when the system is started. If you use your own
hash tables, you will have to do something similar.

@item
There's a cute implementation of doubly-linked lists that uses
@code{XOR}ed addresses. You could represent such lists as singly-linked
in the image file, and restore the doubly-linked representation on
startup.@footnote{In my opinion, though, you should think thrice before
using a doubly-linked list (whatever implementation).}

@item
The code addresses of run-time routines like @code{docol:} cannot be
represented in the image file (because their tokens would be replaced by
machine code in direct threaded implementations). As a workaround,
compute these addresses at run-time with @code{>code-address} from the
executions tokens of appropriate words (see the definitions of
@code{docol:} and friends in @file{kernel.fs}).

@item
On many architectures addresses are represented in machine code in some
shifted or mangled form. You cannot put @code{CODE} words that contain
absolute addresses in this form in a relocatable image file. Workarounds
are representing the address in some relative form (e.g., relative to
the CFA, which is present in some register), or loading the address from
a place where it is stored in a non-mangled form.
@end itemize
@end itemize

@node  Non-Relocatable Image Files, Data-Relocatable Image Files, Image File Background, Image Files
@section Non-Relocatable Image Files
@cindex non-relocatable image files
@cindex image files, non-relocatable

These files are simple memory dumps of the dictionary. They are specific
to the executable (i.e., @file{gforth} file) they were created
with. What's worse, they are specific to the place on which the
dictionary resided when the image was created. Now, there is no
guarantee that the dictionary will reside at the same place the next
time you start Gforth, so there's no guarantee that a non-relocatable
image will work the next time (Gforth will complain instead of crashing,
though).

You can create a non-relocatable image file with

doc-savesystem

@node Data-Relocatable Image Files, Fully Relocatable Image Files, Non-Relocatable Image Files, Image Files
@section Data-Relocatable Image Files
@cindex data-relocatable image files
@cindex image files, data-relocatable

These files contain relocatable data addresses, but fixed code addresses
(instead of tokens). They are specific to the executable (i.e.,
@file{gforth} file) they were created with. For direct threading on some
architectures (e.g., the i386), data-relocatable images do not work. You
get a data-relocatable image, if you use @file{gforthmi} with a
Gforth binary that is not doubly indirect threaded (@pxref{Fully
Relocatable Image Files}).

@node Fully Relocatable Image Files, Stack and Dictionary Sizes, Data-Relocatable Image Files, Image Files
@section Fully Relocatable Image Files
@cindex fully relocatable image files
@cindex image files, fully relocatable

@cindex @file{kern*.fi}, relocatability
@cindex @file{gforth.fi}, relocatability
These image files have relocatable data addresses, and tokens for code
addresses. They can be used with different binaries (e.g., with and
without debugging) on the same machine, and even across machines with
the same data formats (byte order, cell size, floating point
format). However, they are usually specific to the version of Gforth
they were created with. The files @file{gforth.fi} and @file{kernl*.fi}
are fully relocatable.

There are two ways to create a fully relocatable image file:

@menu
* gforthmi::            The normal way
* cross.fs::                    The hard way
@end menu

@node gforthmi, cross.fs, Fully Relocatable Image Files, Fully Relocatable Image Files
@subsection @file{gforthmi}
@cindex @file{comp-i.fs}
@cindex @file{gforthmi}

You will usually use @file{gforthmi}. If you want to create an
image @var{file} that contains everything you would load by invoking
Gforth with @code{gforth @var{options}}, you simply say
@example
gforthmi @var{file} @var{options}
@end example

E.g., if you want to create an image @file{asm.fi} that has the file
@file{asm.fs} loaded in addition to the usual stuff, you could do it
like this:

@example
gforthmi asm.fi asm.fs
@end example

@file{gforthmi} works like this: It produces two non-relocatable
images for different addresses and then compares them. Its output
reflects this: first you see the output (if any) of the two Gforth
invocations that produce the nonrelocatable image files, then you see
the output of the comparing program: It displays the offset used for
data addresses and the offset used for code addresses;
moreover, for each cell that cannot be represented correctly in the
image files, it displays a line like the following one:

@example
     78DC         BFFFFA50         BFFFFA40
@end example

This means that at offset $78dc from @code{forthstart}, one input image
contains $bffffa50, and the other contains $bffffa40. Since these cells
cannot be represented correctly in the output image, you should examine
these places in the dictionary and verify that these cells are dead
(i.e., not read before they are written).

@cindex @code{savesystem} during @file{gforthmi}
@cindex @code{bye} during @file{gforthmi}
@cindex doubly indirect threaded code
@cindex environment variable @code{GFORTHD}
@cindex @code{GFORTHD} environment variable
@cindex @code{gforth-ditc}
There are a few wrinkles: After processing the passed @var{options}, the
words @code{savesystem} and @code{bye} must be visible. A special doubly
indirect threaded version of the @file{gforth} executable is used for
creating the nonrelocatable images; you can pass the exact filename of
this executable through the environment variable @code{GFORTHD}
(default: @file{gforth-ditc}); if you pass a version that is not doubly
indirect threaded, you will not get a fully relocatable image, but a
data-relocatable image (because there is no code address offset).

@node cross.fs,  , gforthmi, Fully Relocatable Image Files
@subsection @file{cross.fs}
@cindex @file{cross.fs}
@cindex cross-compiler
@cindex metacompiler

You can also use @code{cross}, a batch compiler that accepts a Forth-like
programming language. This @code{cross} language has to be documented
yet.

@cindex target compiler
@code{cross} also allows you to create image files for machines with
different data sizes and data formats than the one used for generating
the image file. You can also use it to create an application image that
does not contain a Forth compiler. These features are bought with
restrictions and inconveniences in programming. E.g., addresses have to
be stored in memory with special words (@code{A!}, @code{A,}, etc.) in
order to make the code relocatable.


@node Stack and Dictionary Sizes, Running Image Files, Fully Relocatable Image Files, Image Files
@section Stack and Dictionary Sizes
@cindex image file, stack and dictionary sizes
@cindex dictionary size default
@cindex stack size default

If you invoke Gforth with a command line flag for the size
(@pxref{Invoking Gforth}), the size you specify is stored in the
dictionary. If you save the dictionary with @code{savesystem} or create
an image with @file{gforthmi}, this size will become the default
for the resulting image file. E.g., the following will create a
fully relocatable version of gforth.fi with a 1MB dictionary:

@example
gforthmi gforth.fi -m 1M
@end example

In other words, if you want to set the default size for the dictionary
and the stacks of an image, just invoke @file{gforthmi} with the
appropriate options when creating the image.

@cindex stack size, cache-friendly
Note: For cache-friendly behaviour (i.e., good performance), you should
make the sizes of the stacks modulo, say, 2K, somewhat different. E.g.,
the default stack sizes are: data: 16k (mod 2k=0); fp: 15.5k (mod
2k=1.5k); return: 15k(mod 2k=1k); locals: 14.5k (mod 2k=0.5k).

@node Running Image Files, Modifying the Startup Sequence, Stack and Dictionary Sizes, Image Files
@section Running Image Files
@cindex running image files
@cindex invoking image files
@cindex image file invocation

@cindex -i, invoke image file
@cindex --image file, invoke image file
You can invoke Gforth with an image file @var{image} instead of the
default @file{gforth.fi} with the @code{-i} flag (@pxref{Invoking Gforth}):
@example
gforth -i @var{image}
@end example

@cindex executable image file
@cindex image files, executable
If your operating system supports starting scripts with a line of the
form @code{#! ...}, you just have to type the image file name to start
Gforth with this image file (note that the file extension @code{.fi} is
just a convention). I.e., to run Gforth with the image file @var{image},
you can just type @var{image} instead of @code{gforth -i @var{image}}.

doc-#!

@node Modifying the Startup Sequence,  , Running Image Files, Image Files
@section Modifying the Startup Sequence
@cindex startup sequence for image file
@cindex image file initialization sequence
@cindex initialization sequence of image file

You can add your own initialization to the startup sequence through the
deferred word

doc-'cold

@code{'cold} is invoked just before the image-specific command line
processing (by default, loading files and evaluating (@code{-e}) strings)
starts.

A sequence for adding your initialization usually looks like this:

@example
:noname
    Defers 'cold \ do other initialization stuff (e.g., rehashing wordlists)
    ... \ your stuff
; IS 'cold
@end example

@cindex turnkey image files
@cindex image files, turnkey applications
You can make a turnkey image by letting @code{'cold} execute a word
(your turnkey application) that never returns; instead, it exits Gforth
via @code{bye} or @code{throw}.

@cindex command-line arguments, access
@cindex arguments on the command line, access
You can access the (image-specific) command-line arguments through the
variables @code{argc} and @code{argv}. @code{arg} provides conventient
access to @code{argv}.

doc-argc
doc-argv
doc-arg

If @code{'cold} exits normally, Gforth processes the command-line
arguments as files to be loaded and strings to be evaluated.  Therefore,
@code{'cold} should remove the arguments it has used in this case.

@c ******************************************************************
@node Engine, Binding to System Library, Image Files, Top
@chapter Engine
@cindex engine
@cindex virtual machine

Reading this section is not necessary for programming with Gforth. It
may be helpful for finding your way in the Gforth sources.

The ideas in this section have also been published in the papers
@cite{ANS fig/GNU/??? Forth} (in German) by Bernd Paysan, presented at
the Forth-Tagung '93 and @cite{A Portable Forth Engine} by M. Anton
Ertl, presented at EuroForth '93; the latter is available at
@*@url{http://www.complang.tuwien.ac.at/papers/ertl93.ps.Z}.

@menu
* Portability::                 
* Threading::                   
* Primitives::                  
* Performance::                 
@end menu

@node Portability, Threading, Engine, Engine
@section Portability
@cindex engine portability

One of the main goals of the effort is availability across a wide range
of personal machines. fig-Forth, and, to a lesser extent, F83, achieved
this goal by manually coding the engine in assembly language for several
then-popular processors. This approach is very labor-intensive and the
results are short-lived due to progress in computer architecture.

@cindex C, using C for the engine
Others have avoided this problem by coding in C, e.g., Mitch Bradley
(cforth), Mikael Patel (TILE) and Dirk Zoller (pfe). This approach is
particularly popular for UNIX-based Forths due to the large variety of
architectures of UNIX machines. Unfortunately an implementation in C
does not mix well with the goals of efficiency and with using
traditional techniques: Indirect or direct threading cannot be expressed
in C, and switch threading, the fastest technique available in C, is
significantly slower. Another problem with C is that it is very
cumbersome to express double integer arithmetic.

@cindex GNU C for the engine
@cindex long long
Fortunately, there is a portable language that does not have these
limitations: GNU C, the version of C processed by the GNU C compiler
(@pxref{C Extensions, , Extensions to the C Language Family, gcc.info,
GNU C Manual}). Its labels as values feature (@pxref{Labels as Values, ,
Labels as Values, gcc.info, GNU C Manual}) makes direct and indirect
threading possible, its @code{long long} type (@pxref{Long Long, ,
Double-Word Integers, gcc.info, GNU C Manual}) corresponds to Forth's
double numbers@footnote{Unfortunately, long longs are not implemented
properly on all machines (e.g., on alpha-osf1, long longs are only 64
bits, the same size as longs (and pointers), but they should be twice as
long according to @pxref{Long Long, , Double-Word Integers, gcc.info, GNU
C Manual}). So, we had to implement doubles in C after all. Still, on
most machines we can use long longs and achieve better performance than
with the emulation package.}. GNU C is available for free on all
important (and many unimportant) UNIX machines, VMS, 80386s running
MS-DOS, the Amiga, and the Atari ST, so a Forth written in GNU C can run
on all these machines.

Writing in a portable language has the reputation of producing code that
is slower than assembly. For our Forth engine we repeatedly looked at
the code produced by the compiler and eliminated most compiler-induced
inefficiencies by appropriate changes in the source code.

@cindex explicit register declarations
@cindex --enable-force-reg, configuration flag
@cindex -DFORCE_REG
However, register allocation cannot be portably influenced by the
programmer, leading to some inefficiencies on register-starved
machines. We use explicit register declarations (@pxref{Explicit Reg
Vars, , Variables in Specified Registers, gcc.info, GNU C Manual}) to
improve the speed on some machines. They are turned on by using the
configuration flag @code{--enable-force-reg} (@code{gcc} switch
@code{-DFORCE_REG}). Unfortunately, this feature not only depends on the
machine, but also on the compiler version: On some machines some
compiler versions produce incorrect code when certain explicit register
declarations are used. So by default @code{-DFORCE_REG} is not used.

@node Threading, Primitives, Portability, Engine
@section Threading
@cindex inner interpreter implementation
@cindex threaded code implementation

@cindex labels as values
GNU C's labels as values extension (available since @code{gcc-2.0},
@pxref{Labels as Values, , Labels as Values, gcc.info, GNU C Manual})
makes it possible to take the address of @var{label} by writing
@code{&&@var{label}}.  This address can then be used in a statement like
@code{goto *@var{address}}. I.e., @code{goto *&&x} is the same as
@code{goto x}.

@cindex NEXT, indirect threaded
@cindex indirect threaded inner interpreter
@cindex inner interpreter, indirect threaded
With this feature an indirect threaded NEXT looks like:
@example
cfa = *ip++;
ca = *cfa;
goto *ca;
@end example
@cindex instruction pointer
For those unfamiliar with the names: @code{ip} is the Forth instruction
pointer; the @code{cfa} (code-field address) corresponds to ANS Forths
execution token and points to the code field of the next word to be
executed; The @code{ca} (code address) fetched from there points to some
executable code, e.g., a primitive or the colon definition handler
@code{docol}.

@cindex NEXT, direct threaded
@cindex direct threaded inner interpreter
@cindex inner interpreter, direct threaded
Direct threading is even simpler:
@example
ca = *ip++;
goto *ca;
@end example

Of course we have packaged the whole thing neatly in macros called
@code{NEXT} and @code{NEXT1} (the part of NEXT after fetching the cfa).

@menu
* Scheduling::                  
* Direct or Indirect Threaded?::  
* DOES>::                       
@end menu

@node Scheduling, Direct or Indirect Threaded?, Threading, Threading
@subsection Scheduling
@cindex inner interpreter optimization

There is a little complication: Pipelined and superscalar processors,
i.e., RISC and some modern CISC machines can process independent
instructions while waiting for the results of an instruction. The
compiler usually reorders (schedules) the instructions in a way that
achieves good usage of these delay slots. However, on our first tries
the compiler did not do well on scheduling primitives. E.g., for
@code{+} implemented as
@example
n=sp[0]+sp[1];
sp++;
sp[0]=n;
NEXT;
@end example
the NEXT comes strictly after the other code, i.e., there is nearly no
scheduling. After a little thought the problem becomes clear: The
compiler cannot know that sp and ip point to different addresses (and
the version of @code{gcc} we used would not know it even if it was
possible), so it could not move the load of the cfa above the store to
the TOS. Indeed the pointers could be the same, if code on or very near
the top of stack were executed. In the interest of speed we chose to
forbid this probably unused ``feature'' and helped the compiler in
scheduling: NEXT is divided into the loading part (@code{NEXT_P1}) and
the goto part (@code{NEXT_P2}). @code{+} now looks like:
@example
n=sp[0]+sp[1];
sp++;
NEXT_P1;
sp[0]=n;
NEXT_P2;
@end example
This can be scheduled optimally by the compiler.

This division can be turned off with the switch @code{-DCISC_NEXT}. This
switch is on by default on machines that do not profit from scheduling
(e.g., the 80386), in order to preserve registers.

@node Direct or Indirect Threaded?, DOES>, Scheduling, Threading
@subsection Direct or Indirect Threaded?
@cindex threading, direct or indirect?

@cindex -DDIRECT_THREADED
Both! After packaging the nasty details in macro definitions we
realized that we could switch between direct and indirect threading by
simply setting a compilation flag (@code{-DDIRECT_THREADED}) and
defining a few machine-specific macros for the direct-threading case.
On the Forth level we also offer access words that hide the
differences between the threading methods (@pxref{Threading Words}).

Indirect threading is implemented completely machine-independently.
Direct threading needs routines for creating jumps to the executable
code (e.g. to docol or dodoes). These routines are inherently
machine-dependent, but they do not amount to many source lines. I.e.,
even porting direct threading to a new machine is a small effort.

@cindex --enable-indirect-threaded, configuration flag
@cindex --enable-direct-threaded, configuration flag
The default threading method is machine-dependent. You can enforce a
specific threading method when building Gforth with the configuration
flag @code{--enable-direct-threaded} or
@code{--enable-indirect-threaded}. Note that direct threading is not
supported on all machines.

@node DOES>,  , Direct or Indirect Threaded?, Threading
@subsection DOES>
@cindex @code{DOES>} implementation

@cindex dodoes routine
@cindex DOES-code
One of the most complex parts of a Forth engine is @code{dodoes}, i.e.,
the chunk of code executed by every word defined by a
@code{CREATE}...@code{DOES>} pair. The main problem here is: How to find
the Forth code to be executed, i.e. the code after the
@code{DOES>} (the DOES-code)? There are two solutions:

In fig-Forth the code field points directly to the dodoes and the
DOES-code address is stored in the cell after the code address (i.e. at
@code{@var{cfa} cell+}). It may seem that this solution is illegal in
the Forth-79 and all later standards, because in fig-Forth this address
lies in the body (which is illegal in these standards). However, by
making the code field larger for all words this solution becomes legal
again. We use this approach for the indirect threaded version and for
direct threading on some machines. Leaving a cell unused in most words
is a bit wasteful, but on the machines we are targeting this is hardly a
problem. The other reason for having a code field size of two cells is
to avoid having different image files for direct and indirect threaded
systems (direct threaded systems require two-cell code fields on many
machines).

@cindex DOES-handler
The other approach is that the code field points or jumps to the cell
after @code{DOES}. In this variant there is a jump to @code{dodoes} at
this address (the DOES-handler). @code{dodoes} can then get the
DOES-code address by computing the code address, i.e., the address of
the jump to dodoes, and add the length of that jump field. A variant of
this is to have a call to @code{dodoes} after the @code{DOES>}; then the
return address (which can be found in the return register on RISCs) is
the DOES-code address. Since the two cells available in the code field
are used up by the jump to the code address in direct threading on many
architectures, we use this approach for direct threading on these
architectures. We did not want to add another cell to the code field.

@node Primitives, Performance, Threading, Engine
@section Primitives
@cindex primitives, implementation
@cindex virtual machine instructions, implementation

@menu
* Automatic Generation::        
* TOS Optimization::            
* Produced code::               
@end menu

@node Automatic Generation, TOS Optimization, Primitives, Primitives
@subsection Automatic Generation
@cindex primitives, automatic generation

@cindex @file{prims2x.fs}
Since the primitives are implemented in a portable language, there is no
longer any need to minimize the number of primitives. On the contrary,
having many primitives has an advantage: speed. In order to reduce the
number of errors in primitives and to make programming them easier, we
provide a tool, the primitive generator (@file{prims2x.fs}), that
automatically generates most (and sometimes all) of the C code for a
primitive from the stack effect notation.  The source for a primitive
has the following form:

@cindex primitive source format
@format
@var{Forth-name}	@var{stack-effect}	@var{category}	[@var{pronounc.}]
[@code{""}@var{glossary entry}@code{""}]
@var{C code}
[@code{:}
@var{Forth code}]
@end format

The items in brackets are optional. The category and glossary fields
are there for generating the documentation, the Forth code is there
for manual implementations on machines without GNU C. E.g., the source
for the primitive @code{+} is:
@example
+    n1 n2 -- n    core    plus
n = n1+n2;
@end example

This looks like a specification, but in fact @code{n = n1+n2} is C
code. Our primitive generation tool extracts a lot of information from
the stack effect notations@footnote{We use a one-stack notation, even
though we have separate data and floating-point stacks; The separate
notation can be generated easily from the unified notation.}: The number
of items popped from and pushed on the stack, their type, and by what
name they are referred to in the C code. It then generates a C code
prelude and postlude for each primitive. The final C code for @code{+}
looks like this:

@example
I_plus:	/* + ( n1 n2 -- n ) */  /* label, stack effect */
/*  */                          /* documentation */
@{
DEF_CA                          /* definition of variable ca (indirect threading) */
Cell n1;                        /* definitions of variables */
Cell n2;
Cell n;
n1 = (Cell) sp[1];              /* input */
n2 = (Cell) TOS;
sp += 1;                        /* stack adjustment */
NAME("+")                       /* debugging output (with -DDEBUG) */
@{
n = n1+n2;                      /* C code taken from the source */
@}
NEXT_P1;                        /* NEXT part 1 */
TOS = (Cell)n;                  /* output */
NEXT_P2;                        /* NEXT part 2 */
@}
@end example

This looks long and inefficient, but the GNU C compiler optimizes quite
well and produces optimal code for @code{+} on, e.g., the R3000 and the
HP RISC machines: Defining the @code{n}s does not produce any code, and
using them as intermediate storage also adds no cost.

There are also other optimizations, that are not illustrated by this
example: Assignments between simple variables are usually for free (copy
propagation). If one of the stack items is not used by the primitive
(e.g.  in @code{drop}), the compiler eliminates the load from the stack
(dead code elimination). On the other hand, there are some things that
the compiler does not do, therefore they are performed by
@file{prims2x.fs}: The compiler does not optimize code away that stores
a stack item to the place where it just came from (e.g., @code{over}).

While programming a primitive is usually easy, there are a few cases
where the programmer has to take the actions of the generator into
account, most notably @code{?dup}, but also words that do not (always)
fall through to NEXT.

@node TOS Optimization, Produced code, Automatic Generation, Primitives
@subsection TOS Optimization
@cindex TOS optimization for primitives
@cindex primitives, keeping the TOS in a register

An important optimization for stack machine emulators, e.g., Forth
engines, is keeping  one or more of the top stack items in
registers.  If a word has the stack effect @var{in1}...@var{inx} @code{--}
@var{out1}...@var{outy}, keeping the top @var{n} items in registers
@itemize @bullet
@item
is better than keeping @var{n-1} items, if @var{x>=n} and @var{y>=n},
due to fewer loads from and stores to the stack.
@item is slower than keeping @var{n-1} items, if @var{x<>y} and @var{x<n} and
@var{y<n}, due to additional moves between registers.
@end itemize

@cindex -DUSE_TOS
@cindex -DUSE_NO_TOS
In particular, keeping one item in a register is never a disadvantage,
if there are enough registers. Keeping two items in registers is a
disadvantage for frequent words like @code{?branch}, constants,
variables, literals and @code{i}. Therefore our generator only produces
code that keeps zero or one items in registers. The generated C code
covers both cases; the selection between these alternatives is made at
C-compile time using the switch @code{-DUSE_TOS}. @code{TOS} in the C
code for @code{+} is just a simple variable name in the one-item case,
otherwise it is a macro that expands into @code{sp[0]}. Note that the
GNU C compiler tries to keep simple variables like @code{TOS} in
registers, and it usually succeeds, if there are enough registers.

@cindex -DUSE_FTOS
@cindex -DUSE_NO_FTOS
The primitive generator performs the TOS optimization for the
floating-point stack, too (@code{-DUSE_FTOS}). For floating-point
operations the benefit of this optimization is even larger:
floating-point operations take quite long on most processors, but can be
performed in parallel with other operations as long as their results are
not used. If the FP-TOS is kept in a register, this works. If
it is kept on the stack, i.e., in memory, the store into memory has to
wait for the result of the floating-point operation, lengthening the
execution time of the primitive considerably.

The TOS optimization makes the automatic generation of primitives a
bit more complicated. Just replacing all occurrences of @code{sp[0]} by
@code{TOS} is not sufficient. There are some special cases to
consider:
@itemize @bullet
@item In the case of @code{dup ( w -- w w )} the generator must not
eliminate the store to the original location of the item on the stack,
if the TOS optimization is turned on.
@item Primitives with stack effects of the form @code{--}
@var{out1}...@var{outy} must store the TOS to the stack at the start.
Likewise, primitives with the stack effect @var{in1}...@var{inx} @code{--}
must load the TOS from the stack at the end. But for the null stack
effect @code{--} no stores or loads should be generated.
@end itemize

@node Produced code,  , TOS Optimization, Primitives
@subsection Produced code
@cindex primitives, assembly code listing

@cindex @file{engine.s}
To see what assembly code is produced for the primitives on your machine
with your compiler and your flag settings, type @code{make engine.s} and
look at the resulting file @file{engine.s}.

@node  Performance,  , Primitives, Engine
@section Performance
@cindex performance of some Forth interpreters
@cindex engine performance
@cindex benchmarking Forth systems
@cindex Gforth performance

On RISCs the Gforth engine is very close to optimal; i.e., it is usually
impossible to write a significantly faster engine.

On register-starved machines like the 386 architecture processors
improvements are possible, because @code{gcc} does not utilize the
registers as well as a human, even with explicit register declarations;
e.g., Bernd Beuster wrote a Forth system fragment in assembly language
and hand-tuned it for the 486; this system is 1.19 times faster on the
Sieve benchmark on a 486DX2/66 than Gforth compiled with
@code{gcc-2.6.3} with @code{-DFORCE_REG}.

@cindex Win32Forth performance
@cindex NT Forth performance
@cindex eforth performance
@cindex ThisForth performance
@cindex PFE performance
@cindex TILE performance
However, this potential advantage of assembly language implementations
is not necessarily realized in complete Forth systems: We compared
Gforth (direct threaded, compiled with @code{gcc-2.6.3} and
@code{-DFORCE_REG}) with Win32Forth 1.2093, LMI's NT Forth (Beta, May
1994) and Eforth (with and without peephole (aka pinhole) optimization
of the threaded code); all these systems were written in assembly
language. We also compared Gforth with three systems written in C:
PFE-0.9.14 (compiled with @code{gcc-2.6.3} with the default
configuration for Linux: @code{-O2 -fomit-frame-pointer -DUSE_REGS
-DUNROLL_NEXT}), ThisForth Beta (compiled with gcc-2.6.3 -O3
-fomit-frame-pointer; ThisForth employs peephole optimization of the
threaded code) and TILE (compiled with @code{make opt}). We benchmarked
Gforth, PFE, ThisForth and TILE on a 486DX2/66 under Linux. Kenneth
O'Heskin kindly provided the results for Win32Forth and NT Forth on a
486DX2/66 with similar memory performance under Windows NT. Marcel
Hendrix ported Eforth to Linux, then extended it to run the benchmarks,
added the peephole optimizer, ran the benchmarks and reported the
results.
 
We used four small benchmarks: the ubiquitous Sieve; bubble-sorting and
matrix multiplication come from the Stanford integer benchmarks and have
been translated into Forth by Martin Fraeman; we used the versions
included in the TILE Forth package, but with bigger data set sizes; and
a recursive Fibonacci number computation for benchmarking calling
performance. The following table shows the time taken for the benchmarks
scaled by the time taken by Gforth (in other words, it shows the speedup
factor that Gforth achieved over the other systems).

@example
relative      Win32-    NT       eforth       This-
  time  Gforth Forth Forth eforth  +opt   PFE Forth  TILE
sieve     1.00  1.39  1.14   1.39  0.85  1.58  3.18  8.58
bubble    1.00  1.31  1.41   1.48  0.88  1.50        3.88
matmul    1.00  1.47  1.35   1.46  0.74  1.58        4.09
fib       1.00  1.52  1.34   1.22  0.86  1.74  2.99  4.30
@end example

You may find the good performance of Gforth compared with the systems
written in assembly language quite surprising. One important reason for
the disappointing performance of these systems is probably that they are
not written optimally for the 486 (e.g., they use the @code{lods}
instruction). In addition, Win32Forth uses a comfortable, but costly
method for relocating the Forth image: like @code{cforth}, it computes
the actual addresses at run time, resulting in two address computations
per NEXT (@pxref{Image File Background}).

Only Eforth with the peephole optimizer performs comparable to
Gforth. The speedups achieved with peephole optimization of threaded
code are quite remarkable. Adding a peephole optimizer to Gforth should
cause similar speedups.

The speedup of Gforth over PFE, ThisForth and TILE can be easily
explained with the self-imposed restriction of the latter systems to
standard C, which makes efficient threading impossible (however, the
measured implementation of PFE uses a GNU C extension: @pxref{Global Reg
Vars, , Defining Global Register Variables, gcc.info, GNU C Manual}).
Moreover, current C compilers have a hard time optimizing other aspects
of the ThisForth and the TILE source.

Note that the performance of Gforth on 386 architecture processors
varies widely with the version of @code{gcc} used. E.g., @code{gcc-2.5.8}
failed to allocate any of the virtual machine registers into real
machine registers by itself and would not work correctly with explicit
register declarations, giving a 1.3 times slower engine (on a 486DX2/66
running the Sieve) than the one measured above.

Note also that there have been several releases of Win32Forth since the
release presented here, so the results presented here may have little
predictive value for the performance of Win32Forth today.

@cindex @file{Benchres}
In @cite{Translating Forth to Efficient C} by M. Anton Ertl and Martin
Maierhofer (presented at EuroForth '95), an indirect threaded version of
Gforth is compared with Win32Forth, NT Forth, PFE, and ThisForth; that
version of Gforth is 2%@minus{}8% slower on a 486 than the direct
threaded version used here. The paper available at
@*@url{http://www.complang.tuwien.ac.at/papers/ertl&maierhofer95.ps.gz};
it also contains numbers for some native code systems. You can find a
newer version of these measurements at
@url{http://www.complang.tuwien.ac.at/forth/performance.html}. You can
find numbers for Gforth on various machines in @file{Benchres}.

@node Binding to System Library, Cross Compiler, Engine, Top
@chapter Binding to System Library

@node Cross Compiler, Bugs, Binding to System Library, Top
@chapter Cross Compiler

Cross Compiler

@menu
* Using the Cross Compiler::
* How the Cross Compiler Works::
@end menu

@node Using the Cross Compiler, , How the Cross Compiler Works, Cross Compiler
@section Using the Cross Compiler

@node How the Cross Compiler Works, Using the Cross Compiler, , Cross Compiler
@section How the Cross Compiler Works

@node Bugs, Origin, Cross Compiler, Top
@chapter Bugs
@cindex bug reporting

Known bugs are described in the file BUGS in the Gforth distribution.

If you find a bug, please send a bug report to
@email{bug-gforth@@gnu.ai.mit.edu}. A bug report should
describe the Gforth version used (it is announced at the start of an
interactive Gforth session), the machine and operating system (on Unix
systems you can use @code{uname -a} to produce this information), the
installation options (send the @file{config.status} file), and a
complete list of changes you (or your installer) have made to the Gforth
sources (if any); it should contain a program (or a sequence of keyboard
commands) that reproduces the bug and a description of what you think
constitutes the buggy behaviour.

For a thorough guide on reporting bugs read @ref{Bug Reporting, , How
to Report Bugs, gcc.info, GNU C Manual}.


@node Origin, Word Index, Bugs, Top
@chapter Authors and Ancestors of Gforth

@section Authors and Contributors
@cindex authors of Gforth
@cindex contributors to Gforth

The Gforth project was started in mid-1992 by Bernd Paysan and Anton
Ertl. The third major author was Jens Wilke.  Lennart Benschop (who was
one of Gforth's first users, in mid-1993) and Stuart Ramsden inspired us
with their continuous feedback. Lennart Benshop contributed
@file{glosgen.fs}, while Stuart Ramsden has been working on automatic
support for calling C libraries. Helpful comments also came from Paul
Kleinrubatscher, Christian Pirker, Dirk Zoller, Marcel Hendrix, John
Wavrik, Barrie Stott, Marc de Groot, and Jorge Acerada. Since the
release of Gforth-0.2.1 there were also helpful comments from many
others; thank you all, sorry for not listing you here (but digging
through my mailbox to extract your names is on my to-do list).

Gforth also owes a lot to the authors of the tools we used (GCC, CVS,
and autoconf, among others), and to the creators of the Internet: Gforth
was developed across the Internet, and its authors have not met
physically for the first 4 years of development.

@section Pedigree
@cindex Pedigree of Gforth

Gforth descends from bigFORTH (1993) and fig-Forth. Gforth and PFE (by
Dirk Zoller) will cross-fertilize each other. Of course, a significant
part of the design of Gforth was prescribed by ANS Forth.

Bernd Paysan wrote bigFORTH, a descendent from TurboForth, an unreleased
32 bit native code version of VolksForth for the Atari ST, written
mostly by Dietrich Weineck.

VolksForth descends from F83. It was written by Klaus Schleisiek, Bernd
Pennemann, Georg Rehfeld and Dietrich Weineck for the C64 (called
UltraForth there) in the mid-80s and ported to the Atari ST in 1986.

Henry Laxen and Mike Perry wrote F83 as a model implementation of the
Forth-83 standard. !! Pedigree? When?

A team led by Bill Ragsdale implemented fig-Forth on many processors in
1979. Robert Selzer and Bill Ragsdale developed the original
implementation of fig-Forth for the 6502 based on microForth.

The principal architect of microForth was Dean Sanderson. microForth was
FORTH, Inc.'s first off-the-shelf product. It was developed in 1976 for
the 1802, and subsequently implemented on the 8080, the 6800 and the
Z80.

All earlier Forth systems were custom-made, usually by Charles Moore,
who discovered (as he puts it) Forth during the late 60s. The first full
Forth existed in 1971.

A part of the information in this section comes from @cite{The Evolution
of Forth} by Elizabeth D. Rather, Donald R. Colburn and Charles
H. Moore, presented at the HOPL-II conference and preprinted in SIGPLAN
Notices 28(3), 1993.  You can find more historical and genealogical
information about Forth there.

@node Word Index, Concept Index, Origin, Top
@unnumbered Word Index

This index is as incomplete as the manual. Each word is listed with
stack effect and wordset.

@printindex fn

@node Concept Index,  , Word Index, Top
@unnumbered Concept and Word Index

This index is as incomplete as the manual. Not all entries listed are
present verbatim in the text. Only the names are listed for the words
here.

@printindex cp

@contents
@bye

