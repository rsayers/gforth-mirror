dnl Process this file with autoconf to produce a configure script.

#Copyright (C) 1995,1996,1997,1998,2000 Free Software Foundation, Inc.

#This file is part of Gforth.

#Gforth is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.#See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.

AC_INIT(engine/engine.c)

dnl We use some automake macros here,
dnl but don't use automake for creating Makefile.in
AM_INIT_AUTOMAKE(gforth,0.5.9-20020901)
#snapshots have numbers major.minor.release-YYYYMMDD
#note that lexicographic ordering must be heeded.
#I.e., 0.4.1-YYYYMMDD must not exist before 0.4.1!
UPDATED="1 September 2002"
AC_SUBST(UPDATED)
AM_CONFIG_HEADER(engine/config.h)
#AM_CYGWIN32

#default setting that may be changed later:
no_dynamic_default=0

AC_ARG_ENABLE(force-reg,
[  --enable-force-reg	  Use explicit register declarations if they appear in
			  the machine.h file. This can cause a good speedup,
			  but also incorrect code with some gcc versions on
			  some processors (default disabled).],
AC_DEFINE(FORCE_REG,,[Define if you want to use explicit register declarations for better performance or for more convenient CODE words (does not work with all GCC versions on all machines)]))

AC_ARG_WITH(debug,
[  --with-debug     specifies option -g to compile with debug info (default)
  --without-debug  omits the -g switch and creates smaller images on
                   machines where "strip" has problems with gcc style
                   debugging informations.],
if test "$withval" = "yes"; then DEBUGFLAG=-g; fi)

PEEPHOLE="yes"
AC_ARG_WITH(peephole,
[  --with-peephole	Enable peephole optimization (default)
  --without-peephole	disables peephole optimization. Creates smaller,
			but slower images.],
PEEPHOLE="$withval")

#currently we force direct threading this way.  Eventually we should
#setup in the arch and engine files right

CFLAGS=$CFLAGS

AC_PROG_CC

test "$GCC" = "yes" || AC_MSG_ERROR(Gforth uses GNU C extensions and requires GCC 2.0 or higher)

AC_SUBST(CC)
AC_SUBST(DEBUGFLAG)

AC_MSG_CHECKING(gcc version)
gcc_version=`$CC -v 2>&1|grep 'gcc version'|sed 's/.*gcc version //'`
AC_MSG_RESULT($gcc_version)
if expr "$gcc_version" \> 3.0.4 >/dev/null && expr "$gcc_version" \< 3.2.1 >/dev/null
then
    no_dynamic_default=1
    AC_MSG_WARN(Disabling dynamic native code generation by default (speed penalty factor ~2))
fi

dnl the following macro produces a warning with autoconf-2.1
AC_CHECK_SIZEOF(char *)
case "$ac_cv_sizeof_char_p" in
  2)
    wordsize=16
    ;;
  4)
    wordsize=32
    ;;
  8)
    wordsize=64
    ;;
esac

AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)

AC_MSG_CHECKING([for a C type for cells])
ac_cv_int_type_cell=none
case "$ac_cv_sizeof_char_p" in
  $ac_cv_sizeof_int)
    ac_cv_int_type_cell=int
    ;;
  $ac_cv_sizeof_short)
    ac_cv_int_type_cell=short
    ;;
  $ac_cv_sizeof_char)
    ac_cv_int_type_cell=char
    ;;
  $ac_cv_sizeof_long)
    ac_cv_int_type_cell=long
    ;;
  $ac_cv_sizeof_long_long)
    ac_cv_int_type_cell="long long"
    ;;
esac
AC_MSG_RESULT($ac_cv_int_type_cell)
AC_DEFINE_UNQUOTED(CELL_TYPE,$ac_cv_int_type_cell,[an integer type that is as long as a pointer])

AC_MSG_CHECKING([for a C type for double-cells])
ac_cv_int_type_double_cell=none
case `expr 2 '*' "$ac_cv_sizeof_char_p"` in
  $ac_cv_sizeof_short)
    ac_cv_int_type_double_cell=short
    ;;
  $ac_cv_sizeof_int)
    ac_cv_int_type_double_cell=int
    ;;
  $ac_cv_sizeof_long)
    ac_cv_int_type_double_cell=long
    ;;
  $ac_cv_sizeof_long_long)
    ac_cv_int_type_double_cell="long long"
    ;;
esac
AC_MSG_RESULT($ac_cv_int_type_double_cell)
if test "$ac_cv_int_type_double_cell" = none; then
	AC_MSG_WARN([Emulating double-cell arithmetic. This may be slow.])
	AC_LIBOBJ(dblsub)
	AC_DEFINE(BUGGY_LONG_LONG,,[define this if there is no working DOUBLE_CELL_TYPE on your machine])
else
	AC_DEFINE_UNQUOTED(DOUBLE_CELL_TYPE,$ac_cv_int_type_double_cell,[an integer type that is twice as long as a pointer])
fi

AC_MSG_CHECKING([whether the linker accepts -export-dynamic])
OLDLDFLAGS=$LDFLAGS
LDFLAGS="$LDFLAGS -export-dynamic"
dnl AC_TRY_LINK gives false positive on rs6000-ibm-aix4.2.1.0
dnl AC_TRY_LINK(,,ac_export_dynamic=yes,ac_export_dynamic=no)
AC_TRY_RUN(main(){exit(0);},ac_export_dynamic=yes,ac_export_dynamic=no,ac_export_dynamic=no)
test $ac_export_dynamic = yes|| LDFLAGS=$OLDLDFLAGS
AC_MSG_RESULT($ac_export_dynamic)

#terminology is a bit unusual here: The host is the system on which
#gforth will run; the system on which configure will run is the `build'
AC_CANONICAL_HOST
case "$host_cpu" in
	hppa*)
		machine=hppa
		$srcdir/mkinstalldirs arch/hppa
		AC_LIBOBJ(../arch/hppa/cache)
		LDFLAGS="$LDFLAGS -Xlinker -N"
		LIBS="$LIBS -L/lib/pa1.1/"
		;;
	sparc*)
		machine=sparc
		;;
	i386)
		machine=386
		CFLAGS="$CFLAGS -fomit-frame-pointer -fforce-addr -fforce-mem"
		;;
	i486)
		machine=386
		CFLAGS="$CFLAGS -fomit-frame-pointer -fforce-addr -fforce-mem -m486"
		;;
	i*86)
		machine=386
		CFLAGS="$CFLAGS -fomit-frame-pointer -fforce-addr -fforce-mem"
		CFLAGS_1="$CFLAGS"
		CFLAGS="$CFLAGS -march=pentium"
		AC_TRY_COMPILE(,,,CFLAGS="$CFLAGS_1 -m486")
		;;
	ia64*)
		machine=ia64
		;;
        m68k)
		machine=m68k
		CFLAGS="$CFLAGS -fomit-frame-pointer"
		if test "$host_os" = "nextstep3"
		then
			AC_LIBOBJ(termios)
		fi
		;;
	mips*)
		machine=mips
		#dynamic native code has the following problems on MIPS:
		#
		#1) J/JAL seems relocatable, but is are only
		#relocatable within a 256MB-segment.  While we try to
		#get the linker to arrange this, there is no guarantee
		#that this will succeed (and if the user uses a lot of
		#memory, it is likely to fail).
		#
		#2) The way we generate dynamic native code may
		#violate MIPS architectural restrictions (in
		#particular, the delay slots of LW, MFLO, etc.)
		#
		#Therefore we disable dynamic native code by default:
		no_dynamic_default=1
		AC_MSG_WARN(Disabling dynamic native code generation by default (speed penalty factor ~2))
		#link text and data segment into the same 256M region!
		AC_MSG_CHECKING([whether the linker accepts -T])
		OLDLDFLAGS=$LDFLAGS
		LDFLAGS="$LDFLAGS -Xlinker -T -Xlinker 10000000"
		AC_TRY_LINK(,,ac_link_mips_t=yes,ac_link_mips_t=no)
		test $ac_link_mips_t = yes||LDFLAGS=$OLDLDFLAGS
		AC_MSG_RESULT($ac_link_mips_t)
		AC_MSG_CHECKING([whether the linker accepts -D])
		OLDLDFLAGS=$LDFLAGS
		LDFLAGS="$LDFLAGS -Xlinker -D -Xlinker 10400000"
		AC_TRY_LINK(,,ac_link_mips_d=yes,ac_link_mips_d=no)
		test $ac_link_mips_d = yes||LDFLAGS=$OLDLDFLAGS
		AC_MSG_RESULT($ac_link_mips_d)
		;;
	alpha*)
		machine=alpha
		#full IEEE FP support for more uniformity across platforms:
		CFLAGS="$CFLAGS -mieee"
		;;
	power*|rs6000)
		machine=power
		$srcdir/mkinstalldirs arch/power
		AC_CHECK_FUNC(_sync_cache_range,true,AC_LIBOBJ(../arch/power/_sync_cache_range))
		;;
	*)
		AC_MSG_WARN([Using a generic machine description])
		AC_MSG_WARN([Assuming C floats and doubles are IEEE floats and doubles (for SF@ DF@ SF! DF!)])
		AC_MSG_WARN([FLUSH-ICACHE will do nothing, so END-CODE may not work properly!])
		machine=generic
esac
AC_SUBST(host)
AC_SUBST(ENGINE_FLAGS)

# Try if GCC understands -fno-cross-jump

CFLAGS_1="$CFLAGS"
CFLAGS="$CFLAGS -fno-cross-jump"
AC_TRY_COMPILE(,,,CFLAGS="$CFLAGS_1")

AC_CHECK_PROG(asm_fs,asm.fs,arch/$machine/asm.fs,,$srcdir/arch/$machine)
AC_SUBST(asm_fs)

AC_CHECK_PROG(disasm_fs,disasm.fs,arch/$machine/disasm.fs,,$srcdir/arch/$machine)
AC_SUBST(disasm_fs)

case "$host_os" in
	*win32)
		EXE=".exe"
		DIRSEP="\\"
		;;
	*)
		EXE=""
		DIRSEP="/"
		;;
esac
AC_SUBST(EXE)
AC_SUBST(DIRSEP)
AC_DEFINE_UNQUOTED(DIRSEP,'$DIRSEP',[a directory separator character])

dnl Now a little support for DOS/DJGCC
AC_SUBST(GFORTH_EXE)
GFORTH_EXE=""
AC_SUBST(GFORTHFAST_EXE)
GFORTHFAST_EXE=""
AC_SUBST(GFORTHITC_EXE)
GFORTHITC_EXE=""
AC_SUBST(GFORTHDITC_EXE)
GFORTHDITC_EXE=""

PATHSEP=":"
AC_SUBST(PATHSEP)
AC_DEFINE_UNQUOTED(PATHSEP,'$PATHSEP',[a path separator character])

AC_SUBST(FORTHSIZES)

if test "$PEEPHOLE" = "yes"
then
   PEEPHOLEFLAG="true"
   AC_DEFINE(HAS_PEEPHOLE,,[Define if you want to use peephole optimization])
else
   PEEPHOLEFLAG="false"
fi
AC_SUBST(PEEPHOLEFLAG)

dnl copy commands for systems that don't have links
AC_SUBST(LINK_KERNL)
LINK_KERNL=""

#if test $host_os=dos
#then
#  echo Configuring for DOS!!!
#  MAKE_EXE="coff2exe gforth"
#  LINK_KERNL='$(CP) kernl32l.fi kernel.fi'
#fi

dnl the following macro produces a warning with autoconf-2.1
AC_C_BIGENDIAN
AC_SUBST(KERNEL)
dnl ac_cv_c_bigendian is an undocumented variable of autoconf-2.1
if test $ac_cv_c_bigendian = yes; then
  bytesex=b
  KERNEL="kernl16b.fi kernl16l.fi kernl32b.fi kernl32l.fi kernl64b.fi kernl64l.fi"
else
  bytesex=l
  KERNEL="kernl16l.fi kernl16b.fi kernl32l.fi kernl32b.fi kernl64l.fi kernl64b.fi"
fi

#check how to do asm(".skip 16")
AC_MSG_CHECKING([if and how we can waste code space])
skipcode=no
for i in ".skip 16" ".block 16" ".org .+16" ".=.+16" ".space 16"
do
	AC_TRY_RUN(
int foo(int);
main()
{
  exit(foo(0)!=16);
}
int foo(int x)
{
  if (x) {
  label1:
    asm("$i");
  label2:
  }
  return (&&label2)-(&&label1);
}
	,skipcode=$i; break
	,,)
done	
AC_MSG_RESULT($skipcode)
if test "$skipcode" = no
then 
    no_dynamic_default=1
    AC_DEFINE_UNQUOTED(SKIP16,((void)0),statement for skipping 16 bytes)
    AC_MSG_WARN(Disabling dynamic native code generation by default (speed penalty factor ~2))
else
    AC_DEFINE_UNQUOTED(SKIP16,asm("$skipcode"),statement for skipping 16 bytes)
fi

AC_DEFINE_UNQUOTED(NO_DYNAMIC_DEFAULT,$no_dynamic_default,default value for no_dynamic)

dnl Checks for programs.
AC_PROG_LN_S
dnl AM_PROG_INSTALL #performed by AM_INIT_AUTOMAKE

dnl Checks for library functions
dnl This check is just for making later checks link with libm.
dnl using sin here is no good idea since it is built-into gcc and typechecked
AC_CHECK_LIB(m,asin)
AC_CHECK_LIB(dl,dlopen)
if test "$host_os" != "nextstep3"
then
	AC_FUNC_MEMCMP
fi
AC_REPLACE_FUNCS(memmove strtoul pow10 strerror strsignal atanh)
AC_CHECK_FUNCS(dlopen sys_siglist getrusage)
AC_DECL_SYS_SIGLIST
AC_CHECK_FUNC(getopt_long,true,AC_LIBOBJ(getopt); AC_LIBOBJ(getopt1))
AC_CHECK_FUNCS(expm1 log1p)
AC_REPLACE_FUNCS(rint ecvt)
dnl No check for select, because our replacement is no good under
dnl anything but DOS
AC_CHECK_HEADERS(sys/mman.h fnmatch.h)
AC_FUNC_FNMATCH
test $ac_cv_func_fnmatch_works = yes || AC_LIBOBJ(fnmatch)
AC_CHECK_FUNCS(mmap sysconf getpagesize)
AM_PATH_LISPDIR

kernel_fi=kernl${wordsize}${bytesex}.fi
AC_SUBST(kernel_fi)

#this breaks bindists
#dnl replace srource directory by absolute value
#if test $srcdir = "."; then srcdir=`pwd` 
#fi

AC_SUBST(machine)
dnl AC_LINK_FILES(arch/$machine,arch/machine) #no longer needed
AC_OUTPUT([
Makefile
Makedist
gforthmi
vmgen
machpc.fs
engine/Makefile
doc/version.texi ],
echo timestamp > stamp-h
chmod +x gforthmi
chmod +x vmgen
test -d kernel||mkdir kernel)

