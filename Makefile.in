#Makefile for Gforth

#Copyright (C) 1995-1997 Free Software Foundation, Inc.

#This file is part of Gforth.

#Gforth is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.#See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

# Warning:
# For some stupid reason setting SHELL to bash does not work properly with
# DOS. If you want to use shell-specific things that must run with DOS make
# an external batch file and call it with bash (see versions.bsh).

# ------------- gforth version

VERSION	= @VERSION@
DOSVERSION=`echo $VERSION|sed 's/\.//g'`

# -------------	System specific variables	

machine=@machine@
kernel_fi=@kernel_fi@

# this is the type of machine
# used to extend the include path with ./arch/$machine
# so we can include a machine specific 
# machine.h file

PATHSEP = @PATHSEP@

osclass = @OSCLASS@

# -------------	Utility programs

SHELL	= /bin/sh
RM	= rm
RMTREE	= rm -rf
CP	= cp
TAR	= tar cf -
INSTALL	= @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
LN_S	= @LN_S@
GCC	= @CC@
CC	= $(GCC)
FORTHPATH = $(libdir)/gforth/site-forth$(PATHSEP)$(datadir)/gforth/site-forth$(PATHSEP)$(libdir)/gforth/$(VERSION)$(PATHSEP)$(datadir)/gforth/$(VERSION)$(PATHSEP).
FORTHSIZES = @FORTHSIZES@
FORTH	= ./gforth --die-on-signal -p $(FORTHPATH)$(PATHSEP)$(srcdir)
FORTHKFLAGS= --die-on-signal -p .$(PATHSEP)$(srcdir) -i ./$(kernel_fi)
FORTHK	= ./gforth $(FORTHKFLAGS)
FORTHP	= ./gforth --die-on-signal -i ./$(kernel_fi)
STRIP	= strip
TEXI2DVI = texi2dvi
DVI2PS	= dvips -D300
#you can get texi2html from http://wwwcn.cern.ch/dci/texi2html/
TEXI2HTML = texi2html
MAKEINFO = makeinfo

# -------------	Compiler Flags

XCFLAGS	= @CFLAGS@
XDEFINES = @DEFS@
SWITCHES = $(XCFLAGS) $(XDEFINES) #-DNDEBUG #turn off assertions
ENGINE_FLAGS = @ENGINE_FLAGS@ -fno-defer-pop -fcaller-saves
DEBUGFLAG = @DEBUGFLAG@
CFLAGS	= $(DEBUGFLAG) -I$(srcdir)/engine -I$(srcdir)/arch/$(machine) -O4 -Wall $(SWITCHES) -DDEFAULTPATH=\"$(FORTHPATH)\"

#John Wavrik should use -Xlinker -N to get a writable text (executable)
XLDFLAGS = @LDFLAGS@
GCCLDFLAGS = @GCCLDFLAGS@
LDFLAGS	=  $(DEBUGFLAG) $(XLDFLAGS) $(GCCLDFLAGS)
LDLIBS	= @LIBS@

# ------------	Install Directorys

VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @srcdir@
bindir = $(exec_prefix)/bin
#read-only architecture-independent files
datadir = $(prefix)/share
#read-only architecture-dependent non-ascii files
libdir = $(prefix)/lib
infodir = $(prefix)/info
mandir = $(prefix)/man
man1dir= $(mandir)/man1
man1ext= .1
#older emacses have their site-lisp in $(libdir)/emacs/
emacssitelispdir=@lispdir@

INCLUDES = engine/CVS engine/forth.h engine/threaded.h engine/io.h

KERN_SRC = \
	kernel/CVS \
	kernel/aliases0.fs \
	kernel/aliases.fs \
	kernel/args.fs \
	kernel/cond.fs \
	kernel/cond-old.fs \
	cross.fs \
	kernel/errore.fs \
	kernel/files.fs \
	kernel/require.fs \
	kernel/paths.fs \
	kernel/kernel.fs \
	kernel/main.fs \
	kernel/prim0.fs \
	search.fs \
	kernel/special.fs \
	kernel/tools.fs \
	kernel/toolsext.fs \
	kernel/vars.fs \
	kernel/accept.fs \
	kernel/basics.fs \
	kernel/int.fs \
	kernel/comp.fs \
	kernel/io.fs \
	kernel/license.fs \
	kernel/nio.fs \
	kernel/saccept.fs \
	kernel/doers.fs \
	kernel/getdoers.fs

EC_SRC = \
	asm/00-readme \
	asm/bitmask.fs \
	asm/numref.fs \
	asm/basic.fs \
	asm/generic.fs \
	asm/target.fs \
	ec/00-readme \
	ec/crossdoc.fd \
	ec/mirror.fs \
	ec/mirrors.fs \
	ec/shex.fs \
	ec/builttag.fs \
	ec/dotx.fs \
	ec/mirrored.fs \
	ec/nesting.fs

GFORTH_FI_SRC = \
	assert.fs \
	blocked.fb \
	blocks.fs \
	bufio.fs \
	debug.fs \
	debugs.fs \
	savesys.fs \
	environ.fs \
	errors.fs \
	extend.fs \
	float.fs \
	glocals.fs \
	hash.fs \
	history.fs \
	intcomp.fs \
	locals.fs \
	look.fs \
	search.fs \
	see.fs \
	see-ext.fs \
	source.fs \
	startup.fs \
	struct.fs \
	stuff.fs \
	tasker.fs \
	termsize.fs \
	vt100.fs \
	vt100key.fs \
	wordinfo.fs \
	lib.fs \
	sieve.fs \
	add.fs

FORTH_SRC = $(KERN_SRC) $(GFORTH_FI_SRC) $(EC_SRC) \
	ans-report.fs ansi.fs answords.fs \
	code.fs colorize.fs comp-i.fs \
	doskey.fs ds2texi.fs \
	etags.fs filedump.fs \
	glosgen.fs gray.fs \
	doc/makedoc.fs \
	mach16b.fs mach16l.fs mach32b.fs mach32l.fs mach64b.fs mach64l.fs \
	more.fs other.fs prims2x.fs random.fs \
	siteinit.fs \
	tt.fs sokoban.fs \
	wordsets.fs \
	test/tester.fs test/coretest.fs test/postpone.fs test/dbltest.fs \
	test/other.fs test/checkans.fs test/CVS \
	bubble.fs siev.fs matrix.fs fib.fs \
	oof.fs oofsampl.fs objects.fs

COMPAT	= compat/CVS compat/README compat/control.fs compat/anslocal.fs \
	compat/struct.fs compat/loops.fs

ALLSUBDIRS = engine

ARCHS =	arch/generic/machine.h \
	arch/m68k/machine.h \
	arch/mips/machine.h \
	arch/386/machine.h \
	arch/hppa/machine.h \
	arch/sparc/machine.h \
	arch/power/machine.h \
	arch/alpha/machine.h \
	arch/4stack/README \
	arch/4stack/asm.fs \
	arch/4stack/mach.fs \
	arch/4stack/prim.fs \
	arch/4stack/mach.sh \
	arch/4stack/relocate.fs \
	arch/misc/README \
	arch/misc/asm.fs \
	arch/misc/mach.fs \
	arch/misc/prim.fs \
	arch/misc/sim.fs \
	arch/misc/sokoban.fs \
	arch/misc/tt.fs \
	arch/6502/asm.fs \
	arch/6502/prim.fs \
	arch/6502/mach.fs \
	arch/6502/zero.fs \
	arch/6502/softuart.fs \
	arch/6502/cold.fs \
	arch/8086/asm.fs \
	arch/8086/mach.fs \
	arch/8086/mach.sh \
	arch/8086/prim.fs \
	arch/avr/asm.fs \
	arch/c165/asm.fs \
	arch/c165/mach.fs \
	arch/c165/prim.fs \
	arch/h8/asm.fs \
	arch/shboom/asm.fs \
	arch/shboom/compiler.fs \
	arch/shboom/dis.fs \
	arch/shboom/mach.fs \
	arch/shboom/prim.fs \
	arch/shboom/dis2.fs \
	arch/shboom/sh.p \
	arch/shboom/doers.fs

SOURCES	= CVS compat Makefile.in engine/Makefile.in gforthmi \
	configure.in configure config.sub config.guess \
	acconfig.h engine/config.h.in stamp-h.in \
	install-sh INSTALL INSTALL.BINDIST NEWS README ToDo BUGS model \
	COPYING Benchres aclocal.m4 \
	doc/gforth.ds doc/texinfo.tex doc/gforth.1 gforth.el \
	prim engine/engine.c engine/main.c engine/io.c engine/memcmpc.c \
	$(ARCHS) \
	engine/cache.c engine/32bit.h \
	engine/getopt.c engine/getopt1.c engine/getopt.h engine/select.c \
	engine/ecvt.c engine/memcmp.c engine/strtol.c engine/strtoul.c \
	engine/ansidecl.h engine/memmove.c \
	engine/pow10.c engine/atanh.c engine/cleanalign.c \
	engine/strerror.c engine/strsignal.c engine/strsig.c engine/dblsub.c \
	INSTALL.DOS makefile.dos engine/makefile.dos mkdosmf.sed config.bat \
	dosconf.h gforthmi.bat startup.dos history.dos mkinstalldirs \
	configure.cmd mkos2mf.sed os2conf.h makefile.os2 engine/makefile.os2 \
	gforthmi.cmd glosgen.glo doc/glossaries.doc \
	$(INCLUDES) $(FORTH_SRC) $(COMPAT) \
	testclean testdist testdist1 timings.sc

RCS_FILES =  ToDo model high-level

GEN = gforth gforth-ditc kernel/version.fs version-stamp

# things that need a working forth system to be generated
FORTH_GEN0 = prim.b engine/prim.i engine/prim_lab.i kernel/aliases.fs kernel/prim.fs
FORTH_GEN =  $(FORTH_GEN0) @KERNEL@ gforth.fi
# this is used for antidependences,
FORTH_GEN1 = $(FORTH_GEN0) @kernel_fi@ 

#distributed documentation
DOCDIST = doc/gforth.info doc/gforth.info-* doc/gforth.ps

#stuff in a binonly distribution 
BINONLYDIST = config.status Makefile gforth gforth-ditc \
	$(OBJECTS0) $(OBJECTS) $(OBJECTS_DITC)\
	arch/$(machine)/machine.h engine/config.h \
	stamp-h kernel/version.fs version-stamp \
	INSTALL.BINDIST

KERNLS = kernl16b.fi- kernl16l.fi- \
	 kernl32b.fi- kernl32l.fi- \
	 kernl64b.fi- kernl64l.fi-

GEN_PRECIOUS = $(FORTH_GEN) $(KERNLS) doc/gforth.texi doc/gforth.dvi doc/gforth.ps Makefile configure

#standards.info recommends this:
.SUFFIXES:
.SUFFIXES: .c .o


all:	kernel/version.fs more

# use this dependency for phony targets just as mostlyclean,...
FORCE: ;

#this rule avoids remaking everything after minor changes in Makefile.in
version:	Makefile.in
		if test -r $@ && test x'$(VERSION)' = x`cat $@` ; then true ; else echo $(VERSION) > $@ ; fi

# With dos we use normal dos echo
# we cannot pipe the output to engine/version.h directly because
# of the "/ and \" problem. Copying works because we use the
# shell und file utilities.

kernel/version.fs:	version
	$(MAKE) gforth
	$(SHELL) versions.bsh $(VERSION)

more:	engine $(FORTH_GEN) gforth

#from the gcc Makefile: 
#"Deletion of files made during compilation.
# There are four levels of this:
#   `mostlyclean', `clean', `distclean' and `realclean'.
# `mostlyclean' is useful while working on a particular type of machine.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# `clean' deletes everything made by running `make all'.
# `distclean' also deletes the files made by config.
# `realclean' also deletes everything that could be regenerated automatically."

mostlyclean:	FORCE
		-$(RM) -rf *.s gforth.fi *.fi~ *.fi- kernel/version.fs *TAGS \
		doc/crossdoc.fd doc/doc.fd doc/gforth.texi doc/gforth.fns \
		doc/gforth.aux doc/gforth.cp doc/gforth.cps \
		doc/gforth.dvi doc/gforth.fn doc/gforth.ky doc/gforth.log \
		doc/gforth.pg \
		doc/gforth.toc doc/gforth.tp doc/gforth.vr html \
		gforth-$(VERSION).tar.gz

clean:		mostlyclean
		-$(RM) -rf $(GEN) *.o engine/*.o engine/*.a

distclean:	clean
		-$(RM) config.cache config.log \
		config.status engine/config.h Makefile stamp-h

#realclean is useless, but dangerous, so it's commented out
#realclean:	distclean
#		-$(RM) $(GEN_PRECIOUS)

#mostlyclean, but also remove some of the stuff that is distributed
virtualclean:	mostlyclean
		-$(RM) -rf gforth.fns gforth.texi gforth.ps gforth.info* \
		gforth-$(VERSION).tar.gz config.cache *~ */*~

#use dist targets only when srcdir=.
dist:		$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(TAR) $(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) | \
			(cd gforth-$(VERSION); tar xf -)
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-$(VERSION).tar.gz
		-$(RMTREE) gforth-$(VERSION)

#use dist targets only when srcdir=.
dosdist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST)
		-$(RMTREE) gforth.$(DOSVERSION)
		mkdir gforth.$(DOSVERSION)
		$(TAR) $(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) | \
			(cd gforth.$(DOSVERSION); tar xf -)
		zip -r9 gf$(DOSVERSION)dos.zip gforth.$(DOSVERSION)/*
		-$(RMTREE) gforth.$(DOSVERSION)

#A source distribution contains only the things needed to install gforth,
#without the documents.
srcdist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(TAR) $(SOURCES) $(FORTH_GEN0) @KERNEL@ | \
			(cd gforth-$(VERSION); tar xf -)
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-src-$(VERSION).tar.gz
		-$(RMTREE) gforth-$(VERSION)

srconlydist:	$(SOURCES)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(TAR) $(SOURCES) | \
			(cd gforth-$(VERSION); tar xf -)
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-srconly-$(VERSION).tar.gz
		-$(RMTREE) gforth-$(VERSION)

#A document distribution contains only the documents, which can be created
#with MAKE.
docdist:	$(DOCDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(TAR) $(DOCDIST) | (cd gforth-$(VERSION); tar xf -)
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-doc-$(VERSION).tar.gz
		-$(RMTREE) gforth-$(VERSION)

#a binary distribution contains the complete source distribution,
# the objects, the executable and the links. the objects are there for making
# make happy.
bindist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) $(BINONLYDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(TAR) $(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) $(BINONLYDIST) | (cd gforth-$(VERSION); tar xf -)
		strip gforth-$(VERSION)/gforth
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-$(VERSION)-@host@.tar.gz

#makes a package with only the stuff not present in the source
#package. For installation the source package is still needed!
#This is useful if you want to distribute many binary versions in
#little space (e.g., on floppy disk): Put the source package and
#all the binonly packages you are interested in on the disk. The user
#then just has to unpack the source and his favourite binonly into the
#same directory and has a full binary distribution.
binonlydist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) $(BINONLYDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(TAR) $(BINONLYDIST) | (cd gforth-$(VERSION); tar xf -)
		strip gforth-$(VERSION)/gforth
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-$(VERSION)-binonly-@host@.tar.gz


#strip gforth, because the debugging stuff is hardly useful once
# gforth manages to execute more than a few primitives

#install does not depend on gforth.info, because that would require
#supplying a lot of files that can be easily generated (only info is
#hard to generate)
install:	gforth $(FORTH_SRC) $(kernel_fi) gforth.fi doc/gforth.1 prim gforth.TAGS installdirs
		touch $(datadir)/gforth/site-forth/siteinit.fs
		-$(RM) $(bindir)/gforth $(bindir)/gforth-$(VERSION)
		$(INSTALL_PROGRAM) -s gforth $(bindir)
		ln $(bindir)/gforth $(bindir)/gforth-$(VERSION)
		-$(INSTALL_DATA) $(srcdir)/doc/gforth.1 $(man1dir)
		-for i in $(srcdir)/gforth.info*; do $(INSTALL_DATA) $$i $(infodir); done
		for i in $(FORTH_SRC) prim; do \
			$(INSTALL_DATA) $(srcdir)/$$i $(datadir)/gforth/$(VERSION); \
		done
		$(INSTALL_DATA) $(kernel_fi) $(datadir)/gforth/$(VERSION)
		$(RM) gforth.fi; $(MAKE) gforth.fi #gforth.fi contains some path names
		$(INSTALL_DATA) gforth.fi $(libdir)/gforth/$(VERSION)
		sed 's:^$(srcdir)/:$(datadir)/gforth/$(VERSION)/:' gforth.TAGS >TAGS; $(INSTALL_DATA) TAGS $(datadir)/gforth/$(VERSION)
		@if test -d $(emacssitelispdir); then \
			$(INSTALL_DATA) $(srcdir)/gforth.el $(emacssitelispdir); \
		else \
			echo ">>>>>Please install $(srcdir)/gforth.el in your .../emacs/site-lisp directory"; \
		fi
		@echo ">>>>> Please make an entry for Gforth in your info dir file; e.g.:"; \
		echo "* Gforth: (gforth).	A fast interpreter for the Forth language."

install-strip:	install

installdirs:	mkinstalldirs
		$(srcdir)/mkinstalldirs $(bindir) $(man1dir) $(infodir) $(libdir)/gforth/$(VERSION) $(datadir)/gforth/$(VERSION) $(libdir)/gforth/site-forth $(datadir)/gforth/site-forth

#deinstall all files specific to this version of gforth
#to uninstall version foo, type `make uninstall VERSION=foo'
uninstall:	FORCE
		-$(RM) -rf $(libdir)/gforth/$(VERSION) $(datadir)/gforth/$(VERSION) $(bindir)/gforth-$(VERSION)
		@echo -e "Type\n$(RM) -rf $(bindir)/gforth $(man1dir)/gforth.1 $(infodir)/gforth.info* $(datadir)/gforth $(libdir)/gforth\nto remove Gforth completely"

check test:	gforth gforth.fi
		$(FORTH) test/tester.fs test/coretest.fs test/postpone.fs test/dbltest.fs -e bye
		$(FORTH) test/other.fs -e bye
		$(FORTH) code.fs test/checkans.fs -e bye
		@echo 'Expect no differences'
		$(FORTHK) -m 100000 prims2x.fs -e "s\" $(srcdir)/prim.b\"' output-c process-file bye"| diff -c - $(srcdir)/engine/prim.i

bench:		gforth gforth.fi
		@echo 'Each benchmark takes about 30s on a 486-66 (gcc-2.6.3 -DFORCE_REG)'
		time $(FORTH) siev.fs -e "main bye"
		time $(FORTH) bubble.fs -e "main bye"
		time $(FORTH) -m 160000 matrix.fs -e "main bye"
		time $(FORTH) fib.fs -e "main bye"

# -------------	Make forth images

# Hot to make new images:
# 1. Produce an image called kernlXYZ.fi-
#    the original kernel.fi is not touched because it's needed for creation
# 2. copy old kernlXYZ.fi to kernlXYZ.fi~
#    that's a backup copy in case the new kernels don't work
# 3. copy new kernels to kernlXYZ.fi
#    these are the ones we want to use now

kernl16l.fi-:	$(KERN_SRC) kernel/version.fs mach16l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach16l.fs"' kernel/main.fs -e "save-cross kernl16l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl16b.fi-:	$(KERN_SRC) kernel/version.fs mach16b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach16b.fs"' kernel/main.fs -e "save-cross kernl16b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl32l.fi-:	$(KERN_SRC) kernel/version.fs mach32l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32l.fs"' kernel/main.fs -e "save-cross kernl32l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl32b.fi-:	$(KERN_SRC) kernel/version.fs mach32b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32b.fs"' kernel/main.fs -e "save-cross kernl32b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl64l.fi-:	$(KERN_SRC) kernel/version.fs mach64l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach64l.fs"' kernel/main.fs -e "save-cross kernl64l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl64b.fi-:	$(KERN_SRC) kernel/version.fs mach64b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach64b.fs"' kernel/main.fs -e "save-cross kernl64b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl-%.fi:	arch/%/mach.fs $(KERN_SRC) kernel/version.fs $(FORTH_GEN0) \
		arch/%/prim.fs arch/%/asm.fs
		$(FORTHK) -e 's" $<"' kernel/main.fs -e "save-cross $@- $(bindir)/gforth-$(VERSION) bye"
		if [ -f `echo $< | sed s/fs/sh/` ]; \
		then sh `echo $< | sed s/fs/sh/` $@; \
		else $(CP) $@- $@; \
		fi

kernl16b.fi:	$(KERNLS)
		-$(CP) kernl16b.fi kernl16b.fi~
		-$(CP) kernl16b.fi- kernl16b.fi

kernl16l.fi:	$(KERNLS)
		-$(CP) kernl16l.fi kernl16l.fi~
		-$(CP) kernl16l.fi- kernl16l.fi

kernl32b.fi:	$(KERNLS)
		-$(CP) kernl32b.fi kernl32b.fi~
		-$(CP) kernl32b.fi- kernl32b.fi

kernl32l.fi:	$(KERNLS)
		-$(CP) kernl32l.fi kernl32l.fi~
		-$(CP) kernl32l.fi- kernl32l.fi

kernl64b.fi:	$(KERNLS)
		-$(CP) kernl64b.fi kernl64b.fi~
		-$(CP) kernl64b.fi- kernl64b.fi

kernl64l.fi:	$(KERNLS)
		-$(CP) kernl64l.fi kernl64l.fi~
		-$(CP) kernl64l.fi- kernl64l.fi

#kernl%.fi:	kernl%.fi- $(KERNLS)
#		-$(CP) $@ $@~
#		-$(CP) $< $@

gforth.fi:	$(kernel_fi) gforthmi gforth gforth-ditc $(GFORTH_FI_SRC)
		GFORTHD="./gforth-ditc -p .$(PATHSEP)$(srcdir)" GFORTH="./gforth-ditc -p .$(PATHSEP)$(srcdir) -i $(kernel_fi) startup.fs" $(srcdir)/gforthmi gforth.fi $(FORTHSIZES) $(FORTHKFLAGS) startup.fs

# -------------	Make c-engine

prim.b:		prim
		m4 -s $(srcdir)/prim >$@ 

engine/prim.i:		prim.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" prim.b\" ' output-c process-file bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

engine/prim_lab.i:	prim.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" prim.b\" ' output-label process-file bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

kernel/aliases.fs:	prim.b prims2x.fs kernel/aliases0.fs
		$(CP) kernel/aliases0.fs $@-
		$(FORTHK) prims2x.fs -e "s\" prim.b\" ' output-alias process-file bye" >>$@-
		$(CP) $@- $@
		$(RM) $@-

kernel/prim.fs:	prim.b prims2x.fs kernel/prim0.fs
		$(CP) kernel/prim0.fs kernel/prim.fs-
		$(FORTHK) prims2x.fs -e "s\" prim.b\" ' output-forth process-file bye" >>$@-
		$(CP) $@- $@
		$(RM) $@-

gforth:		FORCE
		-$(CP) gforth gforth~
		cd engine; make gforth; cd ..
		$(CP) engine/$@ $@
		@GFORTH_EXE@

gforth-ditc:	FORCE
		cd engine; make gforth-ditc; cd ..
		$(CP) engine/$@ $@
		@GFORTHDITC_EXE@

# ------------- additional C primitives

%.c:		%.pri prim2cl.fs
		$(FORTHK) prim2cl.fs -e "file $< altogether bye" >$@

%.so:		%.c
		$(GCC) -shared $(CFLAGS) $< -o $@

# -------------	Make Documentation

#TAGS is a GNU standard target
TAGS:		gforth.TAGS
		$(CP) gforth.TAGS $@

gforth.TAGS:	@kernel_fi@ gforth $(GFORTH_FI_SRC) prim.TAGS
		$(FORTHK) etags.fs startup.fs -e bye
		cat TAGS prim.TAGS kernel.TAGS >gforth.TAGS
		rm TAGS

prim.TAGS: 	prim.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" $(srcdir)/prim.b\" ' output-tag process-file bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

doc/doc.fd:	doc/makedoc.fs $(GFORTH_FI_SRC) code.fs objects.fs oof.fs
		$(FORTHK) -e "s\" doc/doc.fd\"" doc/makedoc.fs startup.fs code.fs objects.fs oof.fs -e bye

doc/crossdoc.fd:	$(KERN_SRC) kernel/version.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32l.fs"' kernel/main.fs -e bye

doc/gforth.texi:	doc/gforth.ds prim.b ds2texi.fs prims2x.fs \
		doc/doc.fd doc/crossdoc.fd
		$(FORTHK) -m 100000 ds2texi.fs prims2x.fs -e "s\" $(srcdir)/prim.b\" ' register-doc process-file" doc/crossdoc.fd doc/doc.fd -e "s\" $(srcdir)/doc/gforth.ds\" r/o open-file throw ds2texi bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

checkdoc:	doc/gforth.ds prim.b ds2texi.fs prims2x.fs doc/doc.fd doc/crossdoc.fd answords.fs doc/gforth.texi
		$(FORTHK) ds2texi.fs prims2x.fs -e "s\" $(srcdir)/prim.b\" ' register-doc process-file" doc/crossdoc.fd doc/doc.fd answords.fs -e bye
		-grep unknown doc/gforth.texi

dvi:		doc/gforth.dvi

doc/gforth.dvi doc/gforth.fns:	doc/gforth.texi
		cd doc; $(TEXI2DVI) gforth.texi

doc/gforth.ps:	doc/gforth.dvi
		$(DVI2PS) doc/gforth.dvi -o $@

info:		doc/gforth.info

doc/gforth.info doc/gforth.info-*:	doc/gforth.texi
		-cd doc; $(MAKEINFO) gforth.texi

html:		doc/gforth.texi
		-$(RM) html/*
		-mkdir html
		cd html; $(TEXI2HTML) -menu -split_node ../doc/gforth.texi

doc:		doc/gforth.ps html

# For an explanation of the following Makefile rules, see node
# `Automatic Remaking' in GNU Autoconf documentation.
$(srcdir)/configure:	configure.in 
		cd $(srcdir) && autoconf

# autoheader might not change config.h.in, so touch a stamp file.
config.h.in:	stamp-h.in
stamp-h.in:	configure.in  acconfig.h
		cd $(srcdir) && autoheader
		echo timestamp > $(srcdir)/stamp-h.in

engine/config.h:	stamp-h
stamp-h:	config.h.in config.status
		CONFIG_FILES=$@ CONFIG_HEADERS=engine/config.h ./config.status
		echo > stamp-h
Makefile:	Makefile.in config.status
		CONFIG_FILES="$@ engine/$@" CONFIG_HEADERS=engine/config.h ./config.status
     
config.status:	configure
		./config.status --recheck


#create files for DOS, because DOS cannot do it itself
makefile.dos: mkdosmf.sed Makefile.in engine/Makefile.in
	sed -f mkdosmf.sed <Makefile.in >makefile.dos
	sed -f mkdosmf.sed <engine/Makefile.in >engine/makefile.dos

makefile.os2: mkos2mf.sed Makefile.in engine/Makefile.in
	sed -f mkos2mf.sed <Makefile.in >makefile.os2
	sed -f mkos2mf.sed <engine/Makefile.in >engine/makefile.os2
	echo '%.o:	%.c' >>makefile.os2
	echo '		$$(GCC) $$(CFLAGS) -c $$<' >>makefile.os2
	echo '%.o:	%.c' >>engine/makefile.os2
	echo '		$$(GCC) $$(CFLAGS) -c $$<' >>engine/makefile.os2

# Garbage:
# to be deleted!

# history is a little bit different now! JAW
# history.dos: history.fs Makefile.in
#	sed -e "s,~/\.gforth-history,/gforth.his,g" <history.fs >history.dos

# startup.dos: startup.fs Makefile.in
# 	sed -e "s/\\\\ include doskey/include doskey/g" \
#	    -e "s/include vt100key/\\\\ include vt100key/g" <startup.fs >startup.dos
