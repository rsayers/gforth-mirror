#Makefile for Gforth

#Copyright (C) 1995,1996,1997,1998 Free Software Foundation, Inc.

#This file is part of Gforth.

#Gforth is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.#See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

# Warning:
# For some stupid reason setting SHELL to bash does not work properly with
# DOS. If you want to use shell-specific things that must run with DOS make
# an external batch file and call it with bash (see versions.bsh).

# ------------- gforth version

VERSION	= @VERSION@
DOSVERSION=`echo $(VERSION)|sed 's/\.//g'`

# -------------	System specific variables	

machine=@machine@
kernel_fi=@kernel_fi@
EXE=@EXE@

# this is the type of machine
# used to extend the include path with ./arch/$machine
# so we can include a machine specific 
# machine.h file

PATHSEP = @PATHSEP@

osclass = @OSCLASS@

# -------------	Utility programs

SHELL	= /bin/sh
RM	= rm
RMTREE	= rm -rf
CP	= cp -p
MV	= mv
TAR	= tar cf -
INSTALL	= @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
LN_S	= @LN_S@
GCC	= @CC@
CC	= $(GCC)
FORTHPATH = ~+$(PATHSEP)$(libdir)/gforth/site-forth$(PATHSEP)$(siteforthdir)$(PATHSEP)$(libdir)/gforth/$(VERSION)$(PATHSEP)$(datadir)/gforth/$(VERSION)
FORTHSIZES = @FORTHSIZES@
FORTH_ARGS = --die-on-signal -p $(FORTHPATH)$(PATHSEP)$(srcdir)
ENGINE = ./gforth
FORTH	= $(ENGINE) $(FORTH_ARGS)
ENGINE_FAST = $(ENGINE)-fast
FORTH_FAST	= $(ENGINE_FAST) $(FORTH_ARGS)
FORTHKFLAGS= --die-on-signal -p ".$(PATHSEP)~+$(PATHSEP)$(srcdir)" -i $(kernel_fi)
FORTHK	= $(ENGINE) $(FORTHKFLAGS)
FORTHP	= $(ENGINE) --die-on-signal -i ./$(kernel_fi)
STRIP	= strip
TEXI2DVI = texi2dvi
DVI2PS	= dvips -Z
#you can get texi2html from http://wwwcn.cern.ch/dci/texi2html/
TEXI2HTML = texi2html
MAKEINFO = makeinfo

# -------------	Compiler Flags

XCFLAGS	= @CFLAGS@
XDEFINES = @DEFS@
SWITCHES = $(XCFLAGS) $(XDEFINES) #-DNDEBUG #turn off assertions
ENGINE_FLAGS = @ENGINE_FLAGS@ -fno-defer-pop -fcaller-saves
DEBUGFLAG = @DEBUGFLAG@
CFLAGS	= $(DEBUGFLAG) -I$(srcdir)/engine -I$(srcdir)/arch/$(machine) -O3 -Wall $(SWITCHES) -DDEFAULTPATH=\"$(FORTHPATH)\"

#John Wavrik should use -Xlinker -N to get a writable text (executable)
XLDFLAGS = @LDFLAGS@
LDFLAGS	=  $(DEBUGFLAG) $(XLDFLAGS)
LDLIBS	= @LIBS@

# ------------	Install Directorys

VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @srcdir@
bindir = $(exec_prefix)/bin
#read-only architecture-independent files
datadir = $(prefix)/share
#read-only architecture-dependent non-ascii files
libdir = $(prefix)/lib
infodir = $(prefix)/info
mandir = $(prefix)/man
man1dir= $(mandir)/man1
man1ext= .1
#older emacses have their site-lisp in $(libdir)/emacs/
emacssitelispdir=@lispdir@
siteforthdir=$(datadir)/gforth/site-forth

CVSDIRS = CVS engine/CVS kernel/CVS doc/CVS asm/CVS ec/CVS test/CVS \
	compat/CVS \
	arch/CVS arch/generic/CVS arch/m68k/CVS arch/mips/CVS \
	arch/386/CVS arch/hppa/CVS arch/sparc/CVS arch/power/CVS \
	arch/alpha/CVS arch/4stack/CVS arch/misc/CVS arch/6502/CVS \
	arch/8086/CVS arch/avr/CVS arch/c165/CVS arch/h8/CVS \
	arch/shboom/CVS \

INCLUDES = engine/forth.h engine/threaded.h engine/io.h

KERN_SRC = \
	mach16b.fs mach16l.fs mach32b.fs mach32l.fs mach64b.fs mach64l.fs \
	machpc.fs \
	kernel/aliases0.fs \
	kernel/aliases.fs \
	kernel/args.fs \
	chains.fs \
	kernel/cond.fs \
	kernel/cond-old.fs \
	cross.fs \
	kernel/errore.fs \
	kernel/files.fs \
	kernel/require.fs \
	kernel/paths.fs \
	kernel/kernel.fs \
	kernel/main.fs \
	kernel/prim0.fs \
	search.fs \
	kernel/quotes.fs \
	kernel/tools.fs \
	kernel/toolsext.fs \
	kernel/vars.fs \
	kernel/accept.fs \
	kernel/basics.fs \
	kernel/int.fs \
	kernel/comp.fs \
	kernel/io.fs \
	kernel/license.fs \
	kernel/nio.fs \
	kernel/saccept.fs \
	kernel/doers.fs \
	kernel/getdoers.fs \
	kernel/pass.fs

EC_SRC = \
	asm/README \
	asm/bitmask.fs \
	asm/numref.fs \
	asm/basic.fs \
	asm/generic.fs \
	asm/target.fs \
	ec/README \
	ec/mirror.fs \
	ec/shex.fs \
	ec/builttag.fs \
	ec/dotx.fs \
	ec/nesting.fs

GFORTH_FI_SRC = \
	assert.fs \
	backtrace.fs \
	blocked.fb \
	blocks.fs \
	bufio.fs \
	debug.fs \
	debugs.fs \
	ekey.fs \
	savesys.fs \
	environ.fs \
	errors.fs \
	exceptions.fs \
	extend.fs \
	float.fs \
	glocals.fs \
	hash.fs \
	history.fs \
	intcomp.fs \
	locals.fs \
	look.fs \
	search.fs \
	see.fs \
	see-ext.fs \
	source.fs \
	startup.fs \
	struct.fs \
	stuff.fs \
	tasker.fs \
	termsize.fs \
	vt100.fs \
	vt100key.fs \
	wordinfo.fs \
	lib.fs \
	sieve.fs \
	add.fs

FORTH_SRC = $(KERN_SRC) $(GFORTH_FI_SRC) $(EC_SRC) \
	ans-report.fs ansi.fs answords.fs \
	code.fs colorize.fs comp-i.fs \
	doskey.fs ds2texi.fs \
	envos.fs envos.dos envos.os2 etags.fs filedump.fs fi2c.fs \
	glosgen.fs gray.fs httpd.fs \
	make-app.fs doc/makedoc.fs \
	more.fs other.fs prims2x.fs random.fs \
	table.fs string.fs \
	tt.fs sokoban.fs \
	unbuffered.fs wordsets.fs \
	test/tester.fs test/coretest.fs test/postpone.fs test/dbltest.fs \
	test/other.fs test/checkans.fs \
	bubble.fs siev.fs matrix.fs fib.fs \
	oof.fs oofsampl.fs objects.fs objexamp.fs mini-oof.fs moof-exm.fs \
	moofglos.fs

COMPAT = compat/README \
	compat/anslocal.fs \
	compat/assert.fs \
	compat/control.fs \
	compat/defer.fs \
	compat/exception.fs \
	compat/loops.fs \
	compat/required.fs \
	compat/struct.fs \
	compat/vocabulary.fs

GFORTH_TEXI =  doc/gforth.texi doc/version.texi

ALLSUBDIRS = engine

ARCHS =	\
	arch/generic/machine.h \
	arch/m68k/machine.h \
	arch/mips/machine.h \
	arch/386/machine.h \
	arch/hppa/machine.h \
	arch/hppa/cache.c \
	arch/sparc/machine.h \
	arch/power/machine.h \
	arch/power/_sync_cache_range.c \
	arch/alpha/machine.h \
	arch/4stack/README \
	arch/4stack/asm.fs \
	arch/4stack/mach.fs \
	arch/4stack/prim.fs \
	arch/4stack/mach.sh \
	arch/4stack/relocate.fs \
	arch/misc/README \
	arch/misc/asm.fs \
	arch/misc/mach.fs \
	arch/misc/prim.fs \
	arch/misc/sim.fs \
	arch/misc/sokoban.fs \
	arch/misc/tt.fs \
	arch/6502/asm.fs \
	arch/6502/prim.fs \
	arch/6502/mach.fs \
	arch/6502/zero.fs \
	arch/6502/softuart.fs \
	arch/6502/cold.fs \
	arch/8086/asm.fs \
	arch/8086/mach.fs \
	arch/8086/mach.sh \
	arch/8086/prim.fs \
	arch/avr/asm.fs \
	arch/c165/asm.fs \
	arch/c165/mach.fs \
	arch/c165/prim.fs \
	arch/h8/asm.fs \
	arch/shboom/asm.fs \
	arch/shboom/compiler.fs \
	arch/shboom/dis.fs \
	arch/shboom/mach.fs \
	arch/shboom/prim.fs \
	arch/shboom/dis2.fs \
	arch/shboom/sh.p \
	arch/shboom/doers.fs

SOURCES	= $(CVSDIRS) compat Makefile.in Makedist.in engine/Makefile.in gforthmi.in \
	configure.in configure config.sub config.guess elisp-comp missing \
	acconfig.h acinclude.m4 engine/config.h.in stamp-h.in \
	install-sh INSTALL INSTALL.BINDIST NEWS README ToDo BUGS model \
	COPYING AUTHORS ChangeLog Benchres aclocal.m4 \
	doc/gforth.ds doc/texinfo.tex doc/gforth.1 doc/version.texi.in \
	gforth.el \
	prim engine/engine.c engine/main.c engine/io.c engine/memcmpc.c \
	engine/signals.c $(ARCHS) \
	engine/getopt.c engine/getopt1.c engine/getopt.h engine/select.c \
	engine/ecvt.c engine/memcmp.c engine/strtol.c engine/strtoul.c \
	engine/ansidecl.h engine/memmove.c \
	engine/pow10.c engine/atanh.c engine/cleanalign.c \
	engine/strerror.c engine/strsignal.c engine/dblsub.c \
	INSTALL.DOS makefile.dos engine/makefile.dos mkdosmf.sed config.bat \
	dosconf.h gforthmi.bat mkinstalldirs siteinit.fs \
	versions.bsh \
	configure.cmd mkos2mf.sed os2conf.h makefile.os2 engine/makefile.os2 \
	gforthmi.cmd glosgen.glo doc/glossaries.doc \
	$(INCLUDES) $(FORTH_SRC) $(COMPAT) \
	timings.sc \
	test/coretest.out test/checkans.out

RCS_FILES =  ToDo model high-level

GEN = gforth$(EXE) gforth-ditc$(EXE) gforth-fast$(EXE) kernel/version.fs

# things that need a working forth system to be generated
FORTH_GEN0 = prim.b engine/prim.i engine/prim_lab.i kernel/aliases.fs kernel/prim.fs
FORTH_GEN =  $(FORTH_GEN0) @KERNEL@ gforth.fi
# this is used for antidependences,
FORTH_GEN1 = $(FORTH_GEN0) @kernel_fi@ 

#distributed documentation
DOCDIST = doc/gforth.info doc/gforth.info-* doc/gforth.ps

KERNLS = kernl16b.fi- kernl16l.fi- \
	 kernl32b.fi- kernl32l.fi- \
	 kernl64b.fi- kernl64l.fi-

GEN_PRECIOUS = $(FORTH_GEN) $(KERNLS) doc/gforth.texi doc/gforth.dvi doc/gforth.ps Makefile Makedist engine/Makefile configure

#standards.info recommends this:
.SUFFIXES:
.SUFFIXES: .c .o


all:	kernel/version.fs more

# use this dependency for phony targets just as mostlyclean,...
FORCE: ;

#this rule avoids remaking everything after minor changes in Makefile.in
version:	Makefile.in
		if test -r $@ && test x'$(VERSION)' = x`cat $@` ; then true ; else echo $(VERSION) > $@ ; fi

# With dos we use normal dos echo
# we cannot pipe the output to engine/version.h directly because
# of the "/ and \" problem. Copying works because we use the
# shell und file utilities.

kernel/version.fs:	version
	$(MAKE) gforth$(EXE)
	echo ": version-string s\" $(VERSION)\" ;" > kernel/version.fs

more:	engine $(FORTH_GEN) $(GEN)

#from the gcc Makefile: 
#"Deletion of files made during compilation.
# There are four levels of this:
#   `mostlyclean', `clean', `distclean' and `realclean'.
# `mostlyclean' is useful while working on a particular type of machine.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# `clean' deletes everything made by running `make all'.
# `distclean' also deletes the files made by config.
# `realclean' also deletes everything that could be regenerated automatically."

mostlyclean:	FORCE
		-$(RM) -rf engine/*.s gforth.fi *.fi~ *.fi- kernel/version.fs \
		*TAGS gforth~ \
		doc/crossdoc.fd doc/doc.fd doc/gforth.texi doc/gforth.fns \
		doc/gforth.aux doc/gforth.cp doc/gforth.cps \
		doc/gforth.dvi doc/gforth.fn doc/gforth.ky doc/gforth.log \
		doc/gforth.pg \
		doc/gforth.toc doc/gforth.tp doc/gforth.vr html \
		gforth-$(VERSION).tar.gz

# Just the stuff needed to rebuild the documentation nac03feb1999
docclean:	FORCE
		-$(RM) -rf doc/crossdoc.fd doc/doc.fd doc/gforth.texi doc/gforth.fns \
		doc/gforth.aux doc/gforth.cp doc/gforth.cps \
		doc/gforth.dvi doc/gforth.fn doc/gforth.ky doc/gforth.log \
		doc/gforth.pg \
		doc/gforth.toc doc/gforth.tp doc/gforth.vr html

clean:		mostlyclean
		-$(RM) -rf $(GEN) engine/gforth$(EXE) \
		engine/gforth-fast$(EXE) engine/gforth-ditc$(EXE) \
		*.o engine/*.o arch/*/*.o version

distclean:	clean
		-$(RM) config.cache config.log config.status \
		engine/config.h Makefile Makedist engine/Makefile \
		stamp-h engine/stamp-h \
		doc/version.texi gforthmi

#realclean is useless, but dangerous, so it's commented out
#realclean:	distclean
#		-$(RM) $(GEN_PRECIOUS)

#mostlyclean, but also remove some of the stuff that is distributed
virtualclean:	mostlyclean
		-$(RM) -rf gforth.fns gforth.texi gforth.ps gforth.info* \
		gforth-$(VERSION).tar.gz config.cache *~ */*~

#Some makes (Ultrix, SunOS, IRIX) are so broken, they cannot read the
#Makefile if it contains our dist rules.  Therefore we have put these
#rules in Makedist (you can use them with GNU make on these systems).
dist:		Makedist FORCE
		$(MAKE) -f Makedist d$@

dosdist:	Makedist FORCE
		$(MAKE) -f Makedist d$@

srcdist:	Makedist FORCE
		$(MAKE) -f Makedist d$@

srconlydist:	Makedist FORCE
		$(MAKE) -f Makedist d$@

docdist:	Makedist FORCE
		$(MAKE) -f Makedist d$@

htmldist:	Makedist FORCE
		$(MAKE) -f Makedist d$@

bindist:	Makedist FORCE
		$(MAKE) -f Makedist d$@

binonlydist:	Makedist FORCE
		$(MAKE) -f Makedist d$@


#strip gforth, because the debugging stuff is hardly useful once
# gforth manages to execute more than a few primitives

#install does not depend on gforth.info, because that would require
#supplying a lot of files that can be easily generated (only info is
#hard to generate)
install:	gforth$(EXE) $(FORTH_SRC) $(kernel_fi) gforth.fi gforthmi doc/gforth.1 prim install.TAGS installdirs
		touch $(siteforthdir)/siteinit.fs
		-$(RM) $(bindir)/gforth$(EXE) $(bindir)/gforth-$(VERSION)$(EXE) $(bindir)/gforthmi
		-$(RM) $(bindir)/gforth-fast$(EXE) $(bindir)/gforth-fast-$(VERSION)$(EXE)
		$(INSTALL_PROGRAM) -s gforth$(EXE) $(bindir)/gforth-$(VERSION)$(EXE)
		(cd $(bindir) && $(LN_S) gforth-$(VERSION)$(EXE) gforth$(EXE))
		$(INSTALL_PROGRAM) -s gforth-fast$(EXE) $(bindir)/gforth-fast-$(VERSION)$(EXE)
		(cd $(bindir) && $(LN_S) gforth-fast-$(VERSION)$(EXE) gforth-fast$(EXE))
		$(INSTALL_PROGRAM) gforthmi $(bindir)/gforthmi-$(VERSION)
		$(INSTALL_PROGRAM) gforth-ditc $(libdir)/gforth/$(VERSION)
		(cd $(bindir) && $(LN_S) gforthmi-$(VERSION) gforthmi)
		-$(INSTALL_DATA) $(srcdir)/doc/gforth.1 $(man1dir)
		-for i in $(srcdir)/doc/gforth.info*; do $(INSTALL_DATA) $$i $(infodir); done
		for i in $(FORTH_SRC) $(COMPAT) prim; do \
			$(INSTALL_DATA) $(srcdir)/$$i $(datadir)/gforth/$(VERSION)/$$i; \
		done
		$(INSTALL_DATA) $(kernel_fi) $(datadir)/gforth/$(VERSION)
		$(RM) gforth.fi
		GFORTHD="./gforth-ditc -p$(libdir)/gforth/site-forth$(PATHSEP)$(siteforthdir)$(PATHSEP)$(datadir)/gforth/$(VERSION) -i $(kernel_fi)" GFORTH="./gforth-ditc --die-on-signal -i $(kernel_fi) startup.fs" ./gforthmi gforth.fi $(FORTHSIZES) startup.fs #gforth.fi contains some path names
		$(INSTALL_DATA) gforth.fi $(libdir)/gforth/$(VERSION)
		$(INSTALL_DATA) install.TAGS $(datadir)/gforth/$(VERSION)/TAGS
		# after install, remove these because they are owned by ROOT
		$(RM) gforth.fi install.TAGS
		@if test -d "$(emacssitelispdir)"; then \
			$(INSTALL_DATA) $(srcdir)/gforth.el $(emacssitelispdir); \
		else \
			echo ">>>>>Please install $(srcdir)/gforth.el in your .../emacs/site-lisp directory"; \
		fi
		@echo ">>>>> Please make an entry for Gforth in your info dir file; e.g.:"; \
		echo "* Gforth: (gforth).	A fast interpreter for the Forth language."

install-strip:	install

installdirs:	mkinstalldirs
		for i in $(bindir) $(man1dir) $(infodir) $(libdir)/gforth/$(VERSION) $(datadir)/gforth/$(VERSION) $(libdir)/gforth/site-forth $(siteforthdir); do \
			$(srcdir)/mkinstalldirs $$i; \
		done
		for i in $(CVSDIRS); do \
			$(srcdir)/mkinstalldirs $(datadir)/gforth/$(VERSION)/`dirname $$i`; \
		done
		$(RM) -rf $(datadir)/gforth/$(VERSION)/arch $(datadir)/gforth/$(VERSION)/engine

#deinstall all files specific to this version of gforth
#to uninstall version foo, type `make uninstall VERSION=foo'
uninstall:	FORCE
		-$(RM) -rf $(libdir)/gforth/$(VERSION) $(datadir)/gforth/$(VERSION) $(bindir)/gforth-$(VERSION)$(EXE) $(bindir)/gforthmi-$(VERSION)
		@echo -e "To remove Gforth completely, type\n$(RM) -rf $(bindir)/gforth$(EXE) $(bindir)/gforthmi $(man1dir)/gforth.1 $(infodir)/gforth.info* $(datadir)/gforth $(libdir)/gforth"

check test:	gforth$(EXE) gforth.fi
		$(FORTH) test/tester.fs test/coretest.fs test/postpone.fs test/dbltest.fs -e bye | diff -c - $(srcdir)/test/coretest.out
		$(FORTH) test/other.fs -e bye
		$(FORTH) code.fs test/checkans.fs -e bye | diff -c - $(srcdir)/test/checkans.out
		$(FORTHK) -m 100000 prims2x.fs -e \
		  "c-flag on s\" $(srcdir)/prim.b\" ' output-c process-file bye"| \
		  diff -c - $(srcdir)/engine/prim.i

bench:		gforth-fast$(EXE) gforth.fi
		@echo 'Each benchmark takes about 30s on a 486-66 (gcc-2.6.3 -DFORCE_REG)'
		time $(FORTH_FAST) siev.fs -e "main bye"
		time $(FORTH_FAST) bubble.fs -e "main bye"
		time $(FORTH_FAST) -m 160000 matrix.fs -e "main bye"
		time $(FORTH_FAST) fib.fs -e "main bye"

# -------------	Make forth images

# How to make new images:
# 1. Produce an image called kernlXYZ.fi-
#    the original kernel.fi is not touched because it's needed for creation
# 2. copy old kernlXYZ.fi to kernlXYZ.fi~
#    that's a backup copy in case the new kernels don't work
# 3. copy new kernels to kernlXYZ.fi
#    these are the ones we want to use now

kernl16l.fi-:	$(KERN_SRC) kernel/version.fs mach16l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach16l.fs"' $(srcdir)/kernel/main.fs -e "save-cross kernl16l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl16b.fi-:	$(KERN_SRC) kernel/version.fs mach16b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach16b.fs"' $(srcdir)/kernel/main.fs -e "save-cross kernl16b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl32l.fi-:	$(KERN_SRC) kernel/version.fs mach32l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32l.fs"' $(srcdir)/kernel/main.fs -e "save-cross kernl32l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl32b.fi-:	$(KERN_SRC) kernel/version.fs mach32b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32b.fs"' $(srcdir)/kernel/main.fs -e "save-cross kernl32b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl64l.fi-:	$(KERN_SRC) kernel/version.fs mach64l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach64l.fs"' $(srcdir)/kernel/main.fs -e "save-cross kernl64l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl64b.fi-:	$(KERN_SRC) kernel/version.fs mach64b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach64b.fs"' $(srcdir)/kernel/main.fs -e "save-cross kernl64b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl-%.fi:	arch/%/mach.fs $(KERN_SRC) kernel/version.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" $<"' $(srcdir)/kernel/main.fs -e "save-cross $@- $(bindir)/gforth-$(VERSION) bye"
		if [ -f `echo $< | sed s/fs/sh/` ]; \
		then sh `echo $< | sed s/fs/sh/` $@; \
		else $(CP) $@- $@; \
		fi

arch/%/mach.fs:	arch/%/prim.fs arch/%/asm.fs

kernl16b.fi:	$(KERNLS)
		-$(CP) kernl16b.fi kernl16b.fi~
		-$(CP) kernl16b.fi- kernl16b.fi

kernl16l.fi:	$(KERNLS)
		-$(CP) kernl16l.fi kernl16l.fi~
		-$(CP) kernl16l.fi- kernl16l.fi

kernl32b.fi:	$(KERNLS)
		-$(CP) kernl32b.fi kernl32b.fi~
		-$(CP) kernl32b.fi- kernl32b.fi

kernl32l.fi:	$(KERNLS)
		-$(CP) kernl32l.fi kernl32l.fi~
		-$(CP) kernl32l.fi- kernl32l.fi

kernl64b.fi:	$(KERNLS)
		-$(CP) kernl64b.fi kernl64b.fi~
		-$(CP) kernl64b.fi- kernl64b.fi

kernl64l.fi:	$(KERNLS)
		-$(CP) kernl64l.fi kernl64l.fi~
		-$(CP) kernl64l.fi- kernl64l.fi

#kernl%.fi:	kernl%.fi- $(KERNLS)
#		-$(CP) $@ $@~
#		-$(CP) $< $@

gforth.fi:	$(kernel_fi) gforthmi gforth$(EXE) gforth-ditc$(EXE) $(GFORTH_FI_SRC)
		GFORTHD="./gforth-ditc -p .$(PATHSEP)$(srcdir)" GFORTH="./gforth-ditc --die-on-signal -p .$(PATHSEP)$(srcdir) -i $(kernel_fi) startup.fs" ./gforthmi gforth.fi $(FORTHSIZES) $(FORTHKFLAGS) startup.fs

# -------------	Make c-engine

prim.b:		prim
		m4 -s $(srcdir)/prim >$@ 

engine/prim.i:		prim.b prims2x.fs
		$(FORTHK) prims2x.fs -e "c-flag on s\" prim.b\" ' output-c process-file bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

engine/prim_lab.i:	prim.b prims2x.fs
		$(FORTHK) prims2x.fs -e "c-flag on s\" prim.b\" ' output-label process-file bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

kernel/aliases.fs:	prim.b prims2x.fs kernel/aliases0.fs
		$(CP) kernel/aliases0.fs $@-
		$(FORTHK) prims2x.fs -e "forth-flag on s\" prim.b\" ' output-alias process-file bye" >>$@-
		$(CP) $@- $@
		$(RM) $@-

kernel/prim.fs:	prim.b prims2x.fs kernel/prim0.fs
		$(CP) kernel/prim0.fs kernel/prim.fs-
		$(FORTHK) prims2x.fs -e "forth-flag on s\" prim.b\" ' output-forth process-file bye" >>$@-
		$(CP) $@- $@
		$(RM) $@-

gforth$(EXE):		engines
		-$(CP) gforth$(EXE) gforth~
		$(CP) engine/$@ $@
		@GFORTH_EXE@

gforth-fast$(EXE):	engines
		$(CP) engine/$@ $@
		@GFORTHFAST_EXE@

gforth-ditc$(EXE):	engines
		$(CP) engine/$@ $@
		@GFORTHDITC_EXE@

engines:	FORCE engine/Makefile
		cd engine && $(MAKE) gforth$(EXE) gforth-fast$(EXE) gforth-ditc$(EXE)

# ------------- additional C primitives

%.c:		%.pri prim2cl.fs
		$(FORTHK) prim2cl.fs -e "file $< altogether bye" >$@

%.so:		%.c
		$(GCC) -shared $(CFLAGS) $< -o $@

# -------------	Make Documentation

#TAGS is a GNU standard target
TAGS:		gforth.TAGS
		$(CP) gforth.TAGS $@

install.TAGS:	gforth.TAGS
		sed 's:^\$(srcdir)/:$(datadir)/gforth/$(VERSION)/:' gforth.TAGS >install.TAGS

gforth.TAGS:	@kernel_fi@ gforth $(GFORTH_FI_SRC) prim.TAGS
		$(FORTHK) etags.fs startup.fs -e bye
		cat TAGS prim.TAGS kernel.TAGS >gforth.TAGS
		rm TAGS

prim.TAGS: 	prim.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" $(srcdir)/prim.b\" ' output-tag process-file bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

doc/doc.fd:	doc/makedoc.fs $(GFORTH_FI_SRC) code.fs objects.fs oof.fs moofglos.fs
		$(FORTHK) -e "s\" doc/doc.fd\"" doc/makedoc.fs startup.fs code.fs objects.fs oof.fs moofglos.fs -e bye

doc/crossdoc.fd:	$(KERN_SRC) kernel/version.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32l.fs"' kernel/main.fs -e bye

doc/gforth.texi:	doc/gforth.ds prim.b ds2texi.fs prims2x.fs \
		doc/doc.fd doc/crossdoc.fd
		$(FORTHK) -m 100000 ds2texi.fs prims2x.fs -e "s\" $(srcdir)/prim.b\" ' register-doc process-file" doc/crossdoc.fd doc/doc.fd -e "s\" $(srcdir)/doc/gforth.ds\" r/o open-file throw ds2texi bye" >$@-
		$(CP) $@- $@
		$(RM) $@-

checkdoc:	doc/gforth.ds prim.b ds2texi.fs prims2x.fs doc/doc.fd doc/crossdoc.fd answords.fs doc/gforth.texi
		$(FORTHK) -m 1M ds2texi.fs prims2x.fs -e "s\" $(srcdir)/prim.b\" ' register-doc process-file" doc/crossdoc.fd doc/doc.fd answords.fs -e bye
		-grep unknown doc/gforth.texi

dvi:		doc/gforth.dvi

doc/gforth.dvi doc/gforth.fns:	$(GFORTH_TEXI)
		cd doc; $(TEXI2DVI) gforth.texi

doc/gforth.ps:	doc/gforth.dvi
		$(DVI2PS) doc/gforth.dvi -o $@

info:		doc/gforth.info

doc/gforth.info doc/gforth.info-*: $(GFORTH_TEXI)
		-cd doc; $(MAKEINFO) gforth.texi

html:		$(GFORTH_TEXI)
		-$(RMTREE) html
		-mkdir html
### need makeinfo 4.0 to generate html. Otherwise, use texi2html..
###		cd html; $(MAKEINFO) --html -I ../doc ../doc/gforth.texi
		cd html; $(TEXI2HTML) -menu -split_node ../doc/gforth.texi

doc/gforth.txt:	$(GFORTH_TEXI)
		-cd doc; $(MAKEINFO) --no-headers --no-split gforth.texi >gforth.txt

doc:		info doc/gforth.ps html doc/gforth.txt TAGS

# For an explanation of the following Makefile rules, see node
# `Automatic Remaking' in GNU Autoconf documentation.

#Note: no target "$(srcdir)/configure", because that does not trigger 
#unless $(srcdir)!="."
configure:	configure.in aclocal.m4
		cd $(srcdir) && autoconf

aclocal.m4:	acinclude.m4 configure.in
		aclocal

# autoheader might not change config.h.in, so touch a stamp file.
engine/config.h.in:	stamp-h.in
stamp-h.in:	configure.in  acconfig.h
		cd $(srcdir) && autoheader
		echo timestamp > $(srcdir)/stamp-h.in

engine/config.h:	stamp-h
stamp-h:	engine/config.h.in config.status
		CONFIG_FILES=$@ CONFIG_HEADERS=engine/config.h ./config.status
		echo timestamp > stamp-h

Makefile Makedist engine/Makefile gforthmi:	Makefile.in Makedist.in engine/Makefile.in gforthmi.in config.status
		CONFIG_FILES="$@" CONFIG_HEADERS=engine/config.h ./config.status

config.status:	configure
		./config.status --recheck


#create files for DOS, because DOS cannot do it itself
makefile.dos: mkdosmf.sed Makefile.in engine/Makefile.in
	sed -f mkdosmf.sed <Makefile.in >makefile.dos
	sed -f mkdosmf.sed <engine/Makefile.in >engine/makefile.dos

makefile.os2: mkos2mf.sed Makefile.in engine/Makefile.in
	sed -f mkos2mf.sed <Makefile.in >makefile.os2
	sed -f mkos2mf.sed <engine/Makefile.in >engine/makefile.os2
	echo '%.o:	%.c' >>makefile.os2
	echo '		$$(GCC) $$(CFLAGS) -c $$<' >>makefile.os2
	echo '%.o:	%.c' >>engine/makefile.os2
	echo '		$$(GCC) $$(CFLAGS) -c $$<' >>engine/makefile.os2
