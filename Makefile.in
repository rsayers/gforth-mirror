#Makefile for Gforth

#Copyright (C) 1995, 1996 Free Software Foundation, Inc.

#This file is part of Gforth.

#Gforth is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.#See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

#gforth version
VERSION_MAJOR=0
VERSION_MINOR=2
VERSION_RELEASE=9
VERSION	=$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_RELEASE)
DOSVERSION=$(VERSION_MAJOR)$(VERSION_MINOR)$(VERSION_RELEASE)
SHELL	= /bin/sh
RM	= rm
RMTREE	= rm -rf
CP	= cp
TAR	= tar cf -
INSTALL	= @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
LN_S	= @LN_S@
GCC	= @CC@
CC	= $(GCC)
PATHSEP = @PATHSEP@
FORTHPATH = $(libdir)/gforth/site-forth$(PATHSEP)$(datadir)/gforth/site-forth$(PATHSEP)$(libdir)/gforth/$(VERSION)$(PATHSEP)$(datadir)/gforth/$(VERSION)$(PATHSEP).
FORTHSIZES = @FORTHSIZES@
FORTH	= ./gforth -p $(FORTHPATH)$(PATHSEP)$(srcdir)
FORTHK	= ./gforth -p .$(PATHSEP)$(srcdir) -i ./kernel.fi
FORTHP	= ./gforth -i ./kernel.fi
STRIP	= strip
TEXI2DVI = texi2dvi
DVI2PS	= dvips -D300
#you can get texi2html from http://asis01.cern.ch/infohtml/texi2html.html
TEXI2HTML = texi2html
MAKEINFO = makeinfo
XCFLAGS	= @CFLAGS@
XDEFINES = @DEFS@
SWITCHES = $(XCFLAGS) $(XDEFINES) #-DNDEBUG #turn off assertions
ENGINE_FLAGS = @ENGINE_FLAGS@ -fno-defer-pop -fcaller-saves
DEBUGFLAG = @DEBUGFLAG@
CFLAGS	= $(DEBUGFLAG) -I. -I$(srcdir) -O4 -Wall $(SWITCHES) -DDEFAULTPATH=\"$(FORTHPATH)\"

#John Wavrik should use -Xlinker -N to get a writable text (executable)
XLDFLAGS = @LDFLAGS@
GCCLDFLAGS = @GCCLDFLAGS@
LDFLAGS	=  $(DEBUGFLAG) $(XLDFLAGS) $(GCCLDFLAGS)
LDLIBS	= @LIBS@

VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @srcdir@
bindir = $(exec_prefix)/bin
#read-only architecture-independent files
datadir = $(prefix)/share
#read-only architecture-dependent non-ascii files
libdir = $(prefix)/lib
infodir = $(prefix)/info
mandir = $(prefix)/man
man1dir= $(mandir)/man1
man1ext= .1
#older emacses have their site-lisp in $(libdir)/emacs/
emacssitelispdir=$(datadir)/emacs/site-lisp

INCLUDES = forth.h threading.h io.h

KERN_SRC = \
	add.fs \
	aliases.fs \
	cross.fs \
	errore.fs \
	extend.fs \
	kernel.fs \
	main.fs \
	search-order.fs \
	special.fs \
	tools.fs \
	toolsext.fs \
	vars.fs

GFORTH_FI_SRC = \
	assert.fs \
	blockedit.fb \
	blocks.fs \
	bufio.fs \
	debug.fs \
	debugging.fs \
	dumpimage.fs \
	environ.fs \
	float.fs \
	glocals.fs \
	hash.fs \
	history.fs \
	intcomp.fs \
	look.fs \
	search-order.fs \
	see.fs \
	source.fs \
	startup.fs \
	struct.fs \
	stuff.fs \
	tasker.fs \
	termsize.fs \
	vt100.fs \
	vt100key.fs \
	wordinfo.fs

FORTH_SRC = $(KERN_SRC) $(GFORTH_FI_SRC) \
	ans-report.fs ansi.fs answords.fs \
	checkans.fs \
	code.fs colorize.fs \
	doskey.fs ds2texi.fs \
	etags.fs filedump.fs \
	glosgen.fs gray.fs \
	makedoc.fs \
	mach16b.fs mach16l.fs mach32b.fs mach32l.fs mach64b.fs mach64l.fs \
	more.fs other.fs prims2x.fs random.fs \
	sieve.fs \
	site-init.fs \
	tt.fs sokoban.fs \
	wordsets.fs \
	tester.fs coretest.fs postponetest.fs dbltest.fs \
	bubble.fs siev.fs matrix.fs fib.fs \
	oof.fs oofsampl.fs objects.fs

SOURCES	= CVS compat Makefile.in configure.in configure config.sub config.guess \
	acconfig.h config.h.in stamp-h.in \
	install-sh INSTALL README ToDo BUGS model COPYING Benchres \
	gforth.ds texinfo.tex gforth.1 gforth.el \
	primitives engine.c main.c io.c memcasecmp.c \
	m68k.h mips.h 386.h hppa.h cache.c sparc.h power.h alpha.h 32bit.h \
	getopt.c getopt1.c getopt.h select.c \
	ecvt.c memcmp.c strtol.c strtoul.c ansidecl.h memmove.c pow10.c atanh.c \
	strerror.c strsignal.c dblsub.c \
	INSTALL.DOS makefile.dos mkdosmf.sed configure.bat dosconf.h \
	startup.dos history.dos \
	configure.cmd mkos2mf.sed os2conf.h makefile.os2 \
	glosgen.glo glossaries.doc \
	$(INCLUDES) $(FORTH_SRC)

RCS_FILES =  ToDo model high-level

GEN = gforth version.fs

OBJECTS	= engine.o io.o main.o memcasecmp.o @LIBOBJS@ @getopt_long@

# things that need a working forth system to be generated
FORTH_GEN0 = primitives.b primitives.i prim_labels.i aliases.fs
FORTH_GEN =  $(FORTH_GEN0) @KERNEL@ gforth.fi
# this is used for antidependences,
FORTH_GEN1 = $(FORTH_GEN0) @kernel_fi@ 

#distributed documentation
DOCDIST = gforth.info* gforth.ps

#stuff in a binonly distribution 
BINONLYDIST = config.status Makefile gforth $(OBJECTS) \
	machine.h config.h kernel.fi stamp-h version.h version.fs \
	INSTALL.BINDIST

KERNLS = kernl16b.fi- kernl16l.fi- \
	 kernl32b.fi- kernl32l.fi- \
	 kernl64b.fi- kernl64l.fi-

GEN_PRECIOUS = $(FORTH_GEN) $(KERNLS) gforth.texi gforth.dvi gforth.ps Makefile configure

#standards.info recommends this:
.SUFFIXES:
.SUFFIXES: .c .o

all:	version.fs more

#this rule avoids remaking everything after minor changes in Makefile.in
version-stamp:	Makefile.in
		test x'$(VERSION)' = x`cat $@` || echo $(VERSION) >$@

version.h:	version-stamp
		echo "static char gforth_version[]=\"$(VERSION)\" ;" >$@

version.fs:	version-stamp
		$(MAKE) gforth
		echo ": version-string s\" $(VERSION)\" ;" >$@

more:	$(FORTH_GEN) gforth

#from the gcc Makefile: 
#"Deletion of files made during compilation.
# There are four levels of this:
#   `mostlyclean', `clean', `distclean' and `realclean'.
# `mostlyclean' is useful while working on a particular type of machine.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# `clean' deletes everything made by running `make all'.
# `distclean' also deletes the files made by config.
# `realclean' also deletes everything that could be regenerated automatically."

mostlyclean:
		-$(RM) -rf *.s gforth.fi *.fi~ *.fi- version.fs *TAGS \
		crossdoc.fd doc.fd gforth.texi gforth.fns gforth.aux gforth.cp gforth.cps \
		gforth.dvi gforth.fn gforth.ky gforth.log gforth.pg \
		gforth.toc gforth.tp gforth.vr html gforth-$(VERSION).tar.gz \
		version.h

clean:		mostlyclean
		-$(RM) -rf $(GEN) *.o 

distclean:	clean
		-$(RM) machine.h kernel.fi config.cache config.log \
		config.status config.h Makefile stamp-h

#realclean is useless, but dangerous, so it's commented out
#realclean:	distclean
#		-$(RM) $(GEN_PRECIOUS)

#mostlyclean, but also remove some of the stuff that is distributed
virtualclean:	mostlyclean
		-$(RM) -rf gforth.fns gforth.texi gforth.ps gforth.info* \
		gforth-$(VERSION).tar.gz config.cache *~ */*~

#use dist targets only when srcdir=.
dist:		$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(CP) -rp $(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) gforth-$(VERSION)
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-$(VERSION).tar.gz
		-$(RMTREE) gforth-$(VERSION)

#use dist targets only when srcdir=.
dosdist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST)
		-$(RMTREE) gforth.$(DOSVERSION)
		mkdir gforth.$(DOSVERSION)
		$(CP) -rp $(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) gforth.$(DOSVERSION)
		zip -r9 gforth.zip gforth.$(DOSVERSION)/*
		-$(RMTREE) gforth.$(DOSVERSION)

#A source distribution contains only the things needed to install gforth,
#without the documents.
srcdist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(CP) -rp $(SOURCES) $(FORTH_GEN0) @KERNEL@ gforth-$(VERSION)
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-src-$(VERSION).tar.gz
		-$(RMTREE) gforth-$(VERSION)

#A document distribution contains only the documents, which can be created
#with MAKE.
docdist:	$(DOCDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(CP) -rp $(DOCDIST) gforth-$(VERSION)
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-doc-$(VERSION).tar.gz
		-$(RMTREE) gforth-$(VERSION)

#a binary distribution contains the complete source distribution,
# the objects, the executable and the links. the objects are there for making
# make happy.
bindist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) $(BINONLYDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(CP) -rp -d $(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) $(BINONLYDIST) gforth-$(VERSION)
		strip gforth-$(VERSION)/gforth
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-$(VERSION)-@host@.tar.gz

#makes a package with only the stuff not present in the source
#package. For installation the source package is still needed!
#This is useful if you want to distribute many binary versions in
#little space (e.g., on floppy disk): Put the source package and
#all the binonly packages you are interested in on the disk. The user
#then just has to unpack the source and his favourite binonly into the
#same directory and has a full binary distribution.
binonlydist:	$(SOURCES) $(FORTH_GEN0) @KERNEL@ $(DOCDIST) $(BINONLYDIST)
		-$(RMTREE) gforth-$(VERSION)
		mkdir gforth-$(VERSION)
		$(CP) -p -d  $(BINONLYDIST) gforth-$(VERSION)
		strip gforth-$(VERSION)/gforth
		$(TAR) gforth-$(VERSION)|gzip -9 >gforth-$(VERSION)-binonly-@host@.tar.gz


#strip gforth, because the debugging stuff is hardly useful once
# gforth manages to execute more than a few primitives

#install does not depend on gforth.info, because that would require
#supplying a lot of files that can be easily generated (only info is
#hard to generate)
install:	gforth $(FORTH_SRC) kernel.fi gforth.fi gforth.1 primitives gforth.TAGS installdirs
		touch $(datadir)/gforth/site-forth/site-init.fs
		-$(RM) $(bindir)/gforth $(bindir)/gforth-$(VERSION)
		$(INSTALL_PROGRAM) -s gforth $(bindir)
		ln $(bindir)/gforth $(bindir)/gforth-$(VERSION)
		$(INSTALL_DATA) $(srcdir)/gforth.1 $(man1dir)
		for i in $(srcdir)/gforth.info*; do $(INSTALL_DATA) $$i $(infodir); done
		for i in $(FORTH_SRC) primitives; do \
			$(INSTALL_DATA) $(srcdir)/$$i $(datadir)/gforth/$(VERSION); \
		done
		$(INSTALL_DATA) kernel.fi $(libdir)/gforth/$(VERSION)
		$(RM) gforth.fi; $(MAKE) gforth.fi #gforth.fi contains some path names
		sed s:^$(srcdir)/:$(datadir)/gforth/$(VERSION)/: gforth.TAGS >TAGS; $(INSTALL_DATA) TAGS $(datadir)/gforth/$(VERSION)
		if test -d $(emacssitelispdir); then \
			$(INSTALL_DATA) $(srcdir)/gforth.el $(emacssitelispdir); \
		else \
			echo ">>>>>Please install $(srcdir)/gforth.el in your .../emacs/site-lisp directory"; \
		fi
		echo ">>>>> Please make an entry for Gforth in your info dir file; e.g.:"; \
		echo "* Gforth: (gforth).	A fast interpreter for the Forth language."

install-strip:	install

installdirs:	mkinstalldirs
		$(srcdir)/mkinstalldirs $(bindir) $(man1dir) $(infodir) $(libdir)/gforth/$(VERSION) $(datadir)/gforth/$(VERSION) $(libdir)/gforth/site-forth $(datadir)/gforth/site-forth

#deinstall all files specific to this version of gforth
#to uninstall version foo, type `make uninstall VERSION=foo'
uninstall:	
		-$(RM) -rf $(libdir)/gforth/$(VERSION) $(datadir)/gforth/$(VERSION) $(bindir)/gforth-$(VERSION)
		@echo -e "Type\n$(RM) -rf $(bindir)/gforth $(mandir)/gforth.1 $(infodir)/gforth.info* $(datadir)/gforth $(libdir)/gforth\nto remove Gforth completely"

check test:	gforth gforth.fi
		$(FORTH) tester.fs coretest.fs postponetest.fs dbltest.fs -e bye
		$(FORTH) code.fs checkans.fs -e bye
		@echo 'Expect no differences'
		$(FORTH) prims2x.fs -e "s\" $(srcdir)/primitives.b\" ' output-c process-file bye"| diff -c - $(srcdir)/primitives.i

bench:		gforth gforth.fi
		@echo 'Each benchmark takes about 30s on a 486-66 (gcc-2.6.3 -DFORCE_REG)'
		time $(FORTH) siev.fs -e "main bye"
		time $(FORTH) bubble.fs -e "main bye"
		time $(FORTH) -m 160000 matrix.fs -e "main bye"
		time $(FORTH) fib.fs -e "main bye"

dvi:		gforth.dvi

gforth:		$(OBJECTS)
		-$(CP) gforth gforth~
		$(GCC) $(LDFLAGS) $(OBJECTS) $(LDLIBS) -o $@
		@MAKE_EXE@

kernl16l.fi-:	$(KERN_SRC) version.fs mach16l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach16l.fs"' main.fs -e "save-cross kernl16l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl16b.fi-:	$(KERN_SRC) version.fs mach16b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach16b.fs"' main.fs -e "save-cross kernl16b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl32l.fi-:	$(KERN_SRC) version.fs mach32l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32l.fs"' main.fs -e "save-cross kernl32l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl32b.fi-:	$(KERN_SRC) version.fs mach32b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32b.fs"' main.fs -e "save-cross kernl32b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl64l.fi-:	$(KERN_SRC) version.fs mach64l.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach64l.fs"' main.fs -e "save-cross kernl64l.fi- $(bindir)/gforth-$(VERSION) bye"

kernl64b.fi-:	$(KERN_SRC) version.fs mach64b.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach64b.fs"' main.fs -e "save-cross kernl64b.fi- $(bindir)/gforth-$(VERSION) bye"

kernl16b.fi:	$(KERNLS)
		-$(CP) kernl16b.fi kernl16b.fi~
		-$(CP) kernl16b.fi- kernl16b.fi
		@LINK_KERNL16B@

kernl16l.fi:	$(KERNLS)
		-$(CP) kernl16l.fi kernl16l.fi~
		-$(CP) kernl16l.fi- kernl16l.fi
		@LINK_KERNL16L@

kernl32b.fi:	$(KERNLS)
		-$(CP) kernl32b.fi kernl32b.fi~
		-$(CP) kernl32b.fi- kernl32b.fi
		@LINK_KERNL32B@

kernl32l.fi:	$(KERNLS)
		-$(CP) kernl32l.fi kernl32l.fi~
		-$(CP) kernl32l.fi- kernl32l.fi
		@LINK_KERNL32L@

kernl64b.fi:	$(KERNLS)
		-$(CP) kernl64b.fi kernl64b.fi~
		-$(CP) kernl64b.fi- kernl64b.fi
		@LINK_KERNL64B@

kernl64l.fi:	$(KERNLS)
		-$(CP) kernl64l.fi kernl64l.fi~
		-$(CP) kernl64l.fi- kernl64l.fi
		@LINK_KERNL64L@

gforth.fi:	@kernel_fi@ gforth $(GFORTH_FI_SRC)
		$(FORTHK) --clear-dictionary $(FORTHSIZES) startup.fs -e "savesystem gforth.fi1 bye"
		$(FORTHK)  --clear-dictionary --offset-image $(FORTHSIZES) startup.fs -e "savesystem gforth.fi2 bye"
		$(FORTHK) -m 100000 startup.fs  comp-image.fs -e "comp-image gforth.fi1 gforth.fi2 gforth.fi bye"

#TAGS is a GNU standard target
TAGS:		gforth.TAGS
		$(CP) gforth.TAGS $@

gforth.TAGS:	@kernel_fi@ gforth $(GFORTH_FI_SRC) primitives.TAGS
		$(FORTHK) etags.fs startup.fs -e bye
		cat TAGS primitives.TAGS kernel.TAGS >gforth.TAGS
		rm TAGS

engine.s:	engine.c primitives.i prim_labels.i machine.h threading.h $(INCLUDES) config.h
		$(GCC) $(CFLAGS) $(ENGINE_FLAGS) -S $(srcdir)/engine.c

engine.o:	engine.c primitives.i prim_labels.i machine.h threading.h $(INCLUDES) config.h
		$(GCC) $(CFLAGS) $(ENGINE_FLAGS) -c $(srcdir)/engine.c

main.o:		main.c machine.h threading.h $(INCLUDES) config.h version.h
		$(GCC) $(CFLAGS) $(ENGINE_FLAGS) -c $(srcdir)/main.c

strtoul.o:	strtoul.c strtol.c

primitives.b:	primitives
		m4 -s $(srcdir)/primitives >$@ 

primitives.i :	primitives.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" primitives.b\" ' output-c process-file bye" >$@

prim_labels.i :	primitives.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" primitives.b\" ' output-label process-file bye" >$@

aliases.fs:	primitives.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" primitives.b\" ' output-alias process-file bye" >$@

primitives.fs:	primitives.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" primitives.b\" ' output-forth process-file bye" >$@

primitives.TAGS: primitives.b prims2x.fs
		$(FORTHK) prims2x.fs -e "s\" $(srcdir)/primitives.b\" ' output-tag process-file bye" >$@

doc.fd:		makedoc.fs float.fs search-order.fs glocals.fs environ.fs \
		 toolsext.fs wordinfo.fs \
		 vt100.fs colorize.fs see.fs bufio.fs debug.fs history.fs \
		 doskey.fs vt100key.fs startup.fs assert.fs debugging.fs code.fs
		$(FORTHK) -e "s\" doc.fd\"" makedoc.fs startup.fs code.fs -e bye

crossdoc.fd:	$(KERN_SRC) version.fs $(FORTH_GEN0)
		$(FORTHK) -e 's" mach32l.fs"' main.fs -e bye

gforth.texi:	gforth.ds primitives.b ds2texi.fs prims2x.fs doc.fd crossdoc.fd
		$(FORTHK) -m 100000 ds2texi.fs prims2x.fs -e "s\" $(srcdir)/primitives.b\" ' register-doc process-file" crossdoc.fd doc.fd -e "s\" $(srcdir)/gforth.ds\" r/o open-file throw ds2texi bye" >$@

checkdoc:	gforth.ds primitives.b ds2texi.fs prims2x.fs doc.fd crossdoc.fd answords.fs
		$(FORTHK) ds2texi.fs answords.fs -e bye

dvi:		gforth.dvi

gforth.dvi gforth.fns:	gforth.texi
		$(TEXI2DVI) gforth.texi

gforth.ps:	gforth.dvi
		$(DVI2PS) gforth.dvi -o $@

info:		gforth.info

gforth.info:	gforth.texi
		-$(MAKEINFO) gforth.texi

html:		gforth.texi
		-$(RM) html/*
		-mkdir html
		cd html; $(TEXI2HTML) -menu -split_node ../gforth.texi

doc:		gforth.ps html

# For an explanation of the following Makefile rules, see node
# `Automatic Remaking' in GNU Autoconf documentation.
$(srcdir)/configure:	configure.in 
		cd $(srcdir) && autoconf

# autoheader might not change config.h.in, so touch a stamp file.
$(srcdir)/config.h.in:	stamp-h.in
$(srcdir)/stamp-h.in:	configure.in  acconfig.h
		cd $(srcdir) && autoheader
		echo timestamp > $(srcdir)/stamp-h.in

config.h:	stamp-h
stamp-h:	config.h.in config.status
		CONFIG_FILES=$@ CONFIG_HEADERS=config.h ./config.status
		echo > stamp-h
Makefile:	Makefile.in config.status
		CONFIG_FILES=$@ CONFIG_HEADERS=config.h ./config.status
     
config.status:	configure
		./config.status --recheck


#create files for DOS, because DOS cannot do it itself
makefile.dos: mkdosmf.sed Makefile.in
	sed -f mkdosmf.sed <Makefile.in >makefile.dos

makefile.os2: mkos2mf.sed Makefile.in
	sed -f mkos2mf.sed <Makefile.in >makefile.os2
	echo '%.o:	%.c' >>makefile.os2
	echo '		$$(GCC) $$(CFLAGS) -c $$<' >>makefile.os2

history.dos: history.fs Makefile.in
	sed -e "s,~/\.gforth-history,/gforth.his,g" <history.fs >history.dos

startup.dos: startup.fs Makefile.in
	sed -e "s/\\\\ include doskey/include doskey/g" \
	    -e "s/include vt100key/\\\\ include vt100key/g" <startup.fs >startup.dos

