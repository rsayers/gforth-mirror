#Copyright 1992 by the ANSI figForth Development Group
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

#To do:
#use $(srcdir) to make compilation in a non-srcdir possible

VERSION	=0.1alpha#gforth version
SHELL	= /bin/sh
RM	= rm
CP	= cp
INSTALL	= @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
LN_S	= @LN_S@
GCC	= gcc
FORTH	= ./gforth
CC	= gcc
TEXI2DVI = tex
DVI2PS	= dvips
MAKEINFO = makeinfo
XCFLAGS	= @CFLAGS@
XDEFINES = @DEFS@
SWITCHES = $(XCFLAGS) $(XDEFINES) #-DNDEBUG #turn off assertions
ENGINE_FLAGS =  -fforce-mem -fforce-addr -fomit-frame-pointer -fno-defer-pop -fcaller-saves
CFLAGS	= -g -O4 -Wall $(SWITCHES)

#John Wavrik should use -Xlinker -N to get a writable text (executable)
LDFLAGS	=  @LDFLAGS@
LDLIBS	= @LIBS@

prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @srcdir@
bindir = $(exec_prefix)/bin
#read-only architecture-independent files
datadir = $(prefix)/share
#read-only architecture-dependent non-ascii files
libdir = $(prefix)/lib
infodir = $(prefix)/info
mandir = $(prefix)/man/man1


INCLUDES = forth.h io.h

FORTH_SRC = add.fs assert.fs ansi.fs blocks.fs bufio.fs checkans.fs \
	colorize.fs cross.fs debug.fs debugging.fs doskey.fs ds2texi.fs \
	dumpimage.fs environ.fs errore.fs etags.fs extend.fs filedump.fs \
	float.fs glocals.fs glosgen.fs gray.fs hash.fs history.fs \
	kernal.fs locals-test.fs look.fs main.fs \
 	mach16b.fs mach16l.fs mach32b.fs mach32l.fs mach64b.fs mach64l.fs \
	other.fs prims2x.fs random.fs search-order.fs see.fs sieve.fs \
	startup.fs struct.fs tools.fs toolsext.fs tt.fs vars.fs vt100.fs \
	vt100key.fs wordinfo.fs wordsets.fs

SOURCES	= Makefile.in configure.in configure config.sub  config.guess \
	INSTALL README ToDo BUGS model gforth.ds install-sh \
	primitives engine.c main.c io.c \
	m68k.h mips.h 386.h hppa.h cache.c sparc.h 32bit.h \
	getopt.c getopt1.c getopt.h \
	ecvt.c memcmp.c strtol.c strtoul.c memmove.c \
	makefile.dos io-dos.h configure.bat startup.dos \
	glosgen.glo glossaries.doc \
	$(INCLUDES) $(FORTH_SRC)

RCS_FILES =  ToDo model high-level

GEN = gforth

OBJECTS	= engine.o io.o main.o @LIBOBJS@ @getopt_long@

# things that need a working forth system to be generated
# this is used for antidependences,

FORTH_GEN =  primitives.b primitives.i prim_labels.i aliases.fs @KERNAL@ 

GEN_PRECIOUS = $(FORTH_GEN) gforth.texi gforth.dvi gforth.ps Makefile configure

#standards.info recommends this:
.SUFFIXES:
.SUFFIXES: .c .o

all:
	if [ ! -f gforth ]; then $(MAKE) first; fi
	$(MAKE) more

first:	gforth

more:	$(FORTH_GEN) gforth

#from the gcc Makefile: 
#"Deletion of files made during compilation.
# There are four levels of this:
#   `mostlyclean', `clean', `distclean' and `realclean'.
# `mostlyclean' is useful while working on a particular type of machine.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# `clean' deletes everything made by running `make all'.
# `distclean' also deletes the files made by config.
# `realclean' also deletes everything that could be regenerated automatically."

clean:		
		-$(RM) $(GEN) *.o *.s

distclean:	clean
		-$(RM) machine.h gforth.fi config.cache config.log

realclean:	distclean
		-$(RM) $(GEN_PRECIOUS)

dist:		$(SOURCES) $(FORTH_GEN)
		-rm gforth-$(VERSION)
		ln -s `pwd` gforth-$(VERSION)
		echo "" $(SOURCES) $(FORTH_GEN) |\
			sed -e 's| | gforth-$(VERSION)/|g' |\
			xargs tar cvf gforth-$(VERSION).tar
		gzip -9 -f gforth-$(VERSION).tar
		-rm gforth-$(VERSION)

install:	gforth $(FORTH_SRC) gforth.fi gforth.1 gforth.info
		$(INSTALL) -d $(bindir) $(mandir) $(infodir) $(libdir)/gforth $(datadir)/gforth	
		$(INSTALL_PROGRAM) gforth $(bindir)
		$(INSTALL_DATA) gforth.1 $(mandir)
		$(INSTALL_DATA) gforth.info* $(infodir)
		$(INSTALL_DATA) gforth.fi $(libdir)/gforth
		for i in $(FORTH_SRC); do \
			$(CP) $$i $(datadir)/gforth; \
			$(LN_S) $(datadir)/gforth/$$i $(libdir)/gforth \
		done
		
dvi:		gforth.dvi

gforth:	$(OBJECTS)
		-$(CP) gforth gforth~
		$(GCC) $(LDFLAGS) $(OBJECTS) $(LDLIBS) -o $@
		@MAKE_EXE@

kernl16l.fi:	main.fs search-order.fs cross.fs aliases.fs vars.fs add.fs \
		errore.fs kernal.fs extend.fs tools.fs toolsext.fs \
		mach16l.fs $(FORTH_GEN)
		-$(CP) kernl16l.fi kernl16l.fi~
		$(FORTH) -e 's" mach16l.fs"' main.fs
		@LINK_KERNL16L@

kernl16b.fi:	main.fs search-order.fs cross.fs aliases.fs vars.fs add.fs \
		errore.fs kernal.fs extend.fs tools.fs toolsext.fs \
		mach16b.fs $(FORTH_GEN)
		-$(CP) kernl16b.fi kernl16b.fi~
		$(FORTH) -e 's" mach16b.fs"' main.fs
		@LINK_KERNL16B@

kernl32l.fi:	main.fs search-order.fs cross.fs aliases.fs vars.fs add.fs \
		errore.fs kernal.fs extend.fs tools.fs toolsext.fs \
		mach32l.fs $(FORTH_GEN)
		-$(CP) kernl32l.fi kernl32l.fi~
		$(FORTH) -e 's" mach32l.fs"' main.fs
		@LINK_KERNL32L@

kernl32b.fi:	main.fs search-order.fs cross.fs aliases.fs vars.fs add.fs \
		errore.fs kernal.fs extend.fs tools.fs toolsext.fs \
		mach32b.fs $(FORTH_GEN)
		-$(CP) kernl32b.fi kernl32b.fi~
		$(FORTH) -e 's" mach32b.fs"' main.fs
		@LINK_KERNL32B@

kernl64l.fi:	main.fs search-order.fs cross.fs aliases.fs vars.fs add.fs \
		errore.fs kernal.fs extend.fs tools.fs toolsext.fs \
		mach64l.fs $(FORTH_GEN)
		-$(CP) kernl64l.fi kernl64l.fi~
		$(FORTH) -e 's" mach64l.fs"' main.fs
		@LINK_KERNL64L@

kernl64b.fi:	main.fs search-order.fs cross.fs aliases.fs vars.fs add.fs \
		errore.fs kernal.fs extend.fs tools.fs toolsext.fs \
		mach64b.fs $(FORTH_GEN)
		-$(CP) kernl64b.fi kernl64b.fi~
		$(FORTH) -e 's" mach64b.fs"' main.fs
		@LINK_KERNL64B@

engine.s:	engine.c primitives.i prim_labels.i machine.h $(INCLUDES)
		$(GCC) $(CFLAGS) $(ENGINE_FLAGS) -S engine.c

engine.o:	engine.c primitives.i prim_labels.i machine.h $(INCLUDES)
		$(GCC) $(CFLAGS) $(ENGINE_FLAGS) -c engine.c

strtoul.o:	strtoul.c strtol.c

primitives.b:	primitives
		m4 primitives >$@ 

primitives.i :	primitives.b prims2x.fs
		$(FORTH) prims2x.fs -e "s\" primitives.b\" ' output-c process-file bye" >$@

prim_labels.i :	primitives.b prims2x.fs
		$(FORTH) prims2x.fs -e "s\" primitives.b\" ' output-label process-file bye" >$@

aliases.fs:	primitives.b prims2x.fs
		$(FORTH) prims2x.fs -e "s\" primitives.b\" ' output-alias process-file bye" >$@

primitives.fs:	primitives.b prims2x.fs
		$(FORTH) prims2x.fs -e "s\" primitives.b\" ' output-forth process-file bye" >$@

gforth.texi:	gforth.ds primitives.b ds2texi.fs prims2x.fs
		$(FORTH) ds2texi.fs >$@

gforth.dvi:	gforth.texi
		$(TEXI2DVI) gforth.texi

gforth.ps:	gforth.dvi
		$(DVI2PS) gforth.dvi -o $@

gforth.info:	gforth.texi
		-$(MAKEINFO) gforth.texi

# For an explanation of the following Makefile rules, see node
# `Automatic Remaking' in GNU Autoconf documentation.
Makefile: Makefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= ./config.status
config.status: configure
	./config.status --recheck
configure: configure.in
	cd $(srcdir) && autoconf

#unnecessary and does not work with all makes
#%.s :		%.c $(INCLUDES)
#		$(CC) $(CFLAGS) -S $< -o $@

#%.o :		%.s
#		$(CC) $(CFLAGS) -c $< -o $@

